
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000022c  00800060  000037ae  00003842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000fc  0080028c  0080028c  00003a6e  2**0
                  ALLOC
  3 .stab         00001fd4  00000000  00000000  00003a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d26  00000000  00000000  00005a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000676a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000007c5  00000000  00000000  000067aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002e3f  00000000  00000000  00006f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000570  00000000  00000000  00009dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000324d  00000000  00000000  0000a31e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000630  00000000  00000000  0000d56c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007d3  00000000  00000000  0000db9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000012fd  00000000  00000000  0000e36f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000007b  00000000  00000000  0000f66c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000258  00000000  00000000  0000f6e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	12 e0       	ldi	r17, 0x02	; 2
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	ee ea       	ldi	r30, 0xAE	; 174
      a8:	f7 e3       	ldi	r31, 0x37	; 55
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	ac 38       	cpi	r26, 0x8C	; 140
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	13 e0       	ldi	r17, 0x03	; 3
      b8:	ac e8       	ldi	r26, 0x8C	; 140
      ba:	b2 e0       	ldi	r27, 0x02	; 2
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a8 38       	cpi	r26, 0x88	; 136
      c2:	b1 07       	cpc	r27, r17
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <main>
      ca:	0c 94 d5 1b 	jmp	0x37aa	; 0x37aa <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <isset>:
//~ uint8_t isset(uint8_t,uint8_t);
//~ uint8_t isclear(uint8_t,uint8_t);
//~ void lcdhapus(uint8_t, uint8_t, uint8_t);

uint8_t isset(uint8_t _REG,uint8_t _BIT)
{
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	0f 92       	push	r0
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	89 83       	std	Y+1, r24	; 0x01
	if (bit_is_set(_REG,_BIT))
      de:	89 81       	ldd	r24, Y+1	; 0x01
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <isset+0x16>
      e4:	95 95       	asr	r25
      e6:	87 95       	ror	r24
      e8:	6a 95       	dec	r22
      ea:	e2 f7       	brpl	.-8      	; 0xe4 <isset+0x12>
		return 1;
	else
		return 0;
}
      ec:	81 70       	andi	r24, 0x01	; 1
      ee:	0f 90       	pop	r0
      f0:	cf 91       	pop	r28
      f2:	df 91       	pop	r29
      f4:	08 95       	ret

000000f6 <isclear>:
uint8_t isclear(uint8_t _REG,uint8_t _BIT)
{
      f6:	df 93       	push	r29
      f8:	cf 93       	push	r28
      fa:	0f 92       	push	r0
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
     100:	89 83       	std	Y+1, r24	; 0x01
	if (bit_is_clear(_REG,_BIT))
     102:	29 81       	ldd	r18, Y+1	; 0x01
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	02 c0       	rjmp	.+4      	; 0x10c <isclear+0x16>
     108:	35 95       	asr	r19
     10a:	27 95       	ror	r18
     10c:	6a 95       	dec	r22
     10e:	e2 f7       	brpl	.-8      	; 0x108 <isclear+0x12>
		return 1;
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	20 fd       	sbrc	r18, 0
     114:	80 e0       	ldi	r24, 0x00	; 0
	else
		return 0;
}
     116:	0f 90       	pop	r0
     118:	cf 91       	pop	r28
     11a:	df 91       	pop	r29
     11c:	08 95       	ret

0000011e <initpwm>:

void initpwm(void)			//initialize PWM				
{	
	TCCR1A = _BV(WGM10)    //0xF1 11110001			 		    
     11e:	81 ef       	ldi	r24, 0xF1	; 241
     120:	8f bd       	out	0x2f, r24	; 47
		   | _BV(COM1A0)
		   | _BV(COM1A1)
		   | _BV(COM1B0)	// set OC1A/B on compare match
		   | _BV(COM1B1);		
	TCCR1B = _BV(CS11)	// 00000011 nilai OCR1 sebagai nilai fall
     122:	83 e0       	ldi	r24, 0x03	; 3
     124:	8e bd       	out	0x2e, r24	; 46
			|_BV(CS10);  				
}	
     126:	08 95       	ret

00000128 <initadc>:
void initadc(void)
{
	//register adc multiplexer
	//========================
	//bit refs1=0 refs0 = 1 : adc reference di AVCC
	ADMUX |= (0<<REFS1) | (1<<REFS0);
     128:	3e 9a       	sbi	0x07, 6	; 7
	//register ADC Control and Status Register A
	//aktivin adc, bit ADEN di ADCSRA diisi 1
	ADCSRA |= (1<<ADEN);
     12a:	37 9a       	sbi	0x06, 7	; 6
	// milih prescaler = 64, 
	//kecepatan adc=FCPU/64=11059200/64=172.8KHz
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     12c:	86 b1       	in	r24, 0x06	; 6
     12e:	87 60       	ori	r24, 0x07	; 7
     130:	86 b9       	out	0x06, r24	; 6
	
}
     132:	08 95       	ret

00000134 <adc_baca>:
	//milih channel,
	//biar gak numpuk yg dipilih sama nilai ch sebelumnya di register admux, register channel dikosongke sik
	//admux = 0b11000101
	//di and sama nilai admux dengan 5 bit pertama di kasih nilai 0
	//ADMUX &= (0<<MUX4);
	_clear(ADMUX,MUX4);
     134:	3c 98       	cbi	0x07, 4	; 7
	_clear(ADMUX,MUX3);
     136:	3b 98       	cbi	0x07, 3	; 7
	_clear(ADMUX,MUX2);
     138:	3a 98       	cbi	0x07, 2	; 7
	_clear(ADMUX,MUX1);
     13a:	39 98       	cbi	0x07, 1	; 7
	_clear(ADMUX,MUX0);
     13c:	38 98       	cbi	0x07, 0	; 7
	//ADMUX &= (0<<MUX3);
	//ADMUX &= (0<<MUX2);
	//ADMUX &= (0<<MUX1);
	//ADMUX &= (0<<MUX0);
	//trs dilebokke ning admux nilai ch
	ADMUX |= ch;
     13e:	97 b1       	in	r25, 0x07	; 7
     140:	98 2b       	or	r25, r24
     142:	97 b9       	out	0x07, r25	; 7
	//mulai conversi, bit ADSC di ADCSRA diisi 1
	ADCSRA |= (1<<ADSC);
     144:	36 9a       	sbi	0x06, 6	; 6
	//loop terus sampe conversi selesai, nek selesai bit ADSC berubah 0 otomatis
	while(ADCSRA & (1<<ADSC))
     146:	36 99       	sbic	0x06, 6	; 6
     148:	fe cf       	rjmp	.-4      	; 0x146 <adc_baca+0x12>
	{
	}
	//fungsi dikasih nilai register adc 
	return(ADC);
     14a:	24 b1       	in	r18, 0x04	; 4
     14c:	35 b1       	in	r19, 0x05	; 5
}
     14e:	c9 01       	movw	r24, r18
     150:	08 95       	ret

00000152 <cetak_bil>:

uint8_t cetak_bil(uint16_t bil, uint8_t x, uint8_t y,uint8_t _c)
{
     152:	cf 92       	push	r12
     154:	df 92       	push	r13
     156:	ef 92       	push	r14
     158:	ff 92       	push	r15
     15a:	0f 93       	push	r16
     15c:	1f 93       	push	r17
     15e:	df 93       	push	r29
     160:	cf 93       	push	r28
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
     166:	6e 97       	sbiw	r28, 0x1e	; 30
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	f8 94       	cli
     16c:	de bf       	out	0x3e, r29	; 62
     16e:	0f be       	out	0x3f, r0	; 63
     170:	cd bf       	out	0x3d, r28	; 61
     172:	8c 01       	movw	r16, r24
     174:	e6 2e       	mov	r14, r22
     176:	f4 2e       	mov	r15, r20
     178:	c2 2e       	mov	r12, r18
	uint8_t pjg;
	char lcdchar[30];
			LCDGotoXY(x,y);
     17a:	86 2f       	mov	r24, r22
     17c:	64 2f       	mov	r22, r20
     17e:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			if (_c!=0)
     182:	cc 20       	and	r12, r12
     184:	79 f0       	breq	.+30     	; 0x1a4 <cetak_bil+0x52>
     186:	dd 24       	eor	r13, r13
     188:	d3 94       	inc	r13
     18a:	06 c0       	rjmp	.+12     	; 0x198 <cetak_bil+0x46>
			{
				
				for (uint8_t i=1; i<=_c; i++)
				{
					LCDstring(" ",1);
     18c:	80 e6       	ldi	r24, 0x60	; 96
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
	char lcdchar[30];
			LCDGotoXY(x,y);
			if (_c!=0)
			{
				
				for (uint8_t i=1; i<=_c; i++)
     196:	d3 94       	inc	r13
     198:	cd 14       	cp	r12, r13
     19a:	c0 f7       	brcc	.-16     	; 0x18c <cetak_bil+0x3a>
				{
					LCDstring(" ",1);
				}
				LCDGotoXY(x,y);
     19c:	8e 2d       	mov	r24, r14
     19e:	6f 2d       	mov	r22, r15
     1a0:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			}
			snprintf(lcdchar,15, "%d",bil);
     1a4:	8d b7       	in	r24, 0x3d	; 61
     1a6:	9e b7       	in	r25, 0x3e	; 62
     1a8:	08 97       	sbiw	r24, 0x08	; 8
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	f8 94       	cli
     1ae:	9e bf       	out	0x3e, r25	; 62
     1b0:	0f be       	out	0x3f, r0	; 63
     1b2:	8d bf       	out	0x3d, r24	; 61
     1b4:	ed b7       	in	r30, 0x3d	; 61
     1b6:	fe b7       	in	r31, 0x3e	; 62
     1b8:	31 96       	adiw	r30, 0x01	; 1
     1ba:	7e 01       	movw	r14, r28
     1bc:	08 94       	sec
     1be:	e1 1c       	adc	r14, r1
     1c0:	f1 1c       	adc	r15, r1
     1c2:	ad b7       	in	r26, 0x3d	; 61
     1c4:	be b7       	in	r27, 0x3e	; 62
     1c6:	12 96       	adiw	r26, 0x02	; 2
     1c8:	fc 92       	st	X, r15
     1ca:	ee 92       	st	-X, r14
     1cc:	11 97       	sbiw	r26, 0x01	; 1
     1ce:	8f e0       	ldi	r24, 0x0F	; 15
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	93 83       	std	Z+3, r25	; 0x03
     1d4:	82 83       	std	Z+2, r24	; 0x02
     1d6:	82 e6       	ldi	r24, 0x62	; 98
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	95 83       	std	Z+5, r25	; 0x05
     1dc:	84 83       	std	Z+4, r24	; 0x04
     1de:	17 83       	std	Z+7, r17	; 0x07
     1e0:	06 83       	std	Z+6, r16	; 0x06
     1e2:	0e 94 c0 18 	call	0x3180	; 0x3180 <snprintf>
			pjg = strlen(lcdchar);
     1e6:	f7 01       	movw	r30, r14
     1e8:	01 90       	ld	r0, Z+
     1ea:	00 20       	and	r0, r0
     1ec:	e9 f7       	brne	.-6      	; 0x1e8 <cetak_bil+0x96>
     1ee:	bf 01       	movw	r22, r30
     1f0:	61 50       	subi	r22, 0x01	; 1
     1f2:	70 40       	sbci	r23, 0x00	; 0
     1f4:	6e 19       	sub	r22, r14
     1f6:	7f 09       	sbc	r23, r15
			LCDstring(lcdchar,pjg);
     1f8:	8d b7       	in	r24, 0x3d	; 61
     1fa:	9e b7       	in	r25, 0x3e	; 62
     1fc:	08 96       	adiw	r24, 0x08	; 8
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	9e bf       	out	0x3e, r25	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	8d bf       	out	0x3d, r24	; 61
     208:	c7 01       	movw	r24, r14
     20a:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
	
}
     20e:	6e 96       	adiw	r28, 0x1e	; 30
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	cf 91       	pop	r28
     21c:	df 91       	pop	r29
     21e:	1f 91       	pop	r17
     220:	0f 91       	pop	r16
     222:	ff 90       	pop	r15
     224:	ef 90       	pop	r14
     226:	df 90       	pop	r13
     228:	cf 90       	pop	r12
     22a:	08 95       	ret

0000022c <cetak_bil_lgsg>:

uint8_t cetak_bil_lgsg(uint16_t bil, uint8_t _c)
{
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	df 93       	push	r29
     236:	cf 93       	push	r28
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	6e 97       	sbiw	r28, 0x1e	; 30
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	f8 94       	cli
     242:	de bf       	out	0x3e, r29	; 62
     244:	0f be       	out	0x3f, r0	; 63
     246:	cd bf       	out	0x3d, r28	; 61
     248:	8c 01       	movw	r16, r24
     24a:	f6 2e       	mov	r15, r22
	uint8_t pjg;
	char lcdchar[30];
	if (_c!=0)
     24c:	66 23       	and	r22, r22
     24e:	59 f0       	breq	.+22     	; 0x266 <cetak_bil_lgsg+0x3a>
     250:	ee 24       	eor	r14, r14
     252:	e3 94       	inc	r14
     254:	06 c0       	rjmp	.+12     	; 0x262 <cetak_bil_lgsg+0x36>
	{
		
		for (uint8_t i=1; i<=_c; i++)
		{
			LCDstring(" ",1);
     256:	80 e6       	ldi	r24, 0x60	; 96
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	61 e0       	ldi	r22, 0x01	; 1
     25c:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
	uint8_t pjg;
	char lcdchar[30];
	if (_c!=0)
	{
		
		for (uint8_t i=1; i<=_c; i++)
     260:	e3 94       	inc	r14
     262:	fe 14       	cp	r15, r14
     264:	c0 f7       	brcc	.-16     	; 0x256 <cetak_bil_lgsg+0x2a>
		{
			LCDstring(" ",1);
		}
	}
	snprintf(lcdchar,15, "%d",bil);
     266:	8d b7       	in	r24, 0x3d	; 61
     268:	9e b7       	in	r25, 0x3e	; 62
     26a:	08 97       	sbiw	r24, 0x08	; 8
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	9e bf       	out	0x3e, r25	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	8d bf       	out	0x3d, r24	; 61
     276:	ed b7       	in	r30, 0x3d	; 61
     278:	fe b7       	in	r31, 0x3e	; 62
     27a:	31 96       	adiw	r30, 0x01	; 1
     27c:	7e 01       	movw	r14, r28
     27e:	08 94       	sec
     280:	e1 1c       	adc	r14, r1
     282:	f1 1c       	adc	r15, r1
     284:	ad b7       	in	r26, 0x3d	; 61
     286:	be b7       	in	r27, 0x3e	; 62
     288:	12 96       	adiw	r26, 0x02	; 2
     28a:	fc 92       	st	X, r15
     28c:	ee 92       	st	-X, r14
     28e:	11 97       	sbiw	r26, 0x01	; 1
     290:	8f e0       	ldi	r24, 0x0F	; 15
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	93 83       	std	Z+3, r25	; 0x03
     296:	82 83       	std	Z+2, r24	; 0x02
     298:	82 e6       	ldi	r24, 0x62	; 98
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	95 83       	std	Z+5, r25	; 0x05
     29e:	84 83       	std	Z+4, r24	; 0x04
     2a0:	17 83       	std	Z+7, r17	; 0x07
     2a2:	06 83       	std	Z+6, r16	; 0x06
     2a4:	0e 94 c0 18 	call	0x3180	; 0x3180 <snprintf>
	pjg = strlen(lcdchar);
     2a8:	f7 01       	movw	r30, r14
     2aa:	01 90       	ld	r0, Z+
     2ac:	00 20       	and	r0, r0
     2ae:	e9 f7       	brne	.-6      	; 0x2aa <cetak_bil_lgsg+0x7e>
     2b0:	bf 01       	movw	r22, r30
     2b2:	61 50       	subi	r22, 0x01	; 1
     2b4:	70 40       	sbci	r23, 0x00	; 0
     2b6:	6e 19       	sub	r22, r14
     2b8:	7f 09       	sbc	r23, r15
	LCDstring(lcdchar,pjg);
     2ba:	8d b7       	in	r24, 0x3d	; 61
     2bc:	9e b7       	in	r25, 0x3e	; 62
     2be:	08 96       	adiw	r24, 0x08	; 8
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	9e bf       	out	0x3e, r25	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	8d bf       	out	0x3d, r24	; 61
     2ca:	c7 01       	movw	r24, r14
     2cc:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
	
}
     2d0:	6e 96       	adiw	r28, 0x1e	; 30
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	f8 94       	cli
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	cd bf       	out	0x3d, r28	; 61
     2dc:	cf 91       	pop	r28
     2de:	df 91       	pop	r29
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	ff 90       	pop	r15
     2e6:	ef 90       	pop	r14
     2e8:	08 95       	ret

000002ea <lcdhapus>:

void lcdhapus(uint8_t xawal, uint8_t xakhir, uint8_t _Y)
{
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	08 2f       	mov	r16, r24
     2f0:	16 2f       	mov	r17, r22
	LCDGotoXY(xawal,_Y);
     2f2:	64 2f       	mov	r22, r20
     2f4:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
	for (uint8_t i=xawal;i<=xakhir;i++)
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <lcdhapus+0x1c>
	{
		LCDstring(" ",1);
     2fa:	80 e6       	ldi	r24, 0x60	; 96
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	61 e0       	ldi	r22, 0x01	; 1
     300:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
}

void lcdhapus(uint8_t xawal, uint8_t xakhir, uint8_t _Y)
{
	LCDGotoXY(xawal,_Y);
	for (uint8_t i=xawal;i<=xakhir;i++)
     304:	0f 5f       	subi	r16, 0xFF	; 255
     306:	10 17       	cp	r17, r16
     308:	c0 f7       	brcc	.-16     	; 0x2fa <lcdhapus+0x10>
	{
		LCDstring(" ",1);
	}
}
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	08 95       	ret

00000310 <Button0>:
		OCR1B=40;
	}
}
uint8_t Button0()
{
	return isclear(PINC,0);
     310:	83 b3       	in	r24, 0x13	; 19
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
}
     318:	08 95       	ret

0000031a <Button1>:
uint8_t Button1()
{
	return isclear(PINC,1);
     31a:	83 b3       	in	r24, 0x13	; 19
     31c:	61 e0       	ldi	r22, 0x01	; 1
     31e:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
}
     322:	08 95       	ret

00000324 <Button2>:
uint8_t Button2()
{
	return isclear(PINC,2);
     324:	83 b3       	in	r24, 0x13	; 19
     326:	62 e0       	ldi	r22, 0x02	; 2
     328:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
}
     32c:	08 95       	ret

0000032e <Button3>:
uint8_t Button3()
{
	return isclear(PINC,3);
     32e:	83 b3       	in	r24, 0x13	; 19
     330:	63 e0       	ldi	r22, 0x03	; 3
     332:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
}
     336:	08 95       	ret

00000338 <ButtonEnter>:
uint8_t ButtonEnter()
{
	return isclear(PINC,BUTTON_ENTER_DOWN);
     338:	83 b3       	in	r24, 0x13	; 19
     33a:	61 e0       	ldi	r22, 0x01	; 1
     33c:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
}
     340:	08 95       	ret

00000342 <ButtonBack>:
uint8_t ButtonBack()
{
	return isclear(PINC,BUTTON_BACK_DOWN);
     342:	83 b3       	in	r24, 0x13	; 19
     344:	62 e0       	ldi	r22, 0x02	; 2
     346:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
}
     34a:	08 95       	ret

0000034c <ButtonNext>:
uint8_t ButtonNext()
{
	return isclear(PINC,BUTTON_NEXT_DOWN);
     34c:	83 b3       	in	r24, 0x13	; 19
     34e:	63 e0       	ldi	r22, 0x03	; 3
     350:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
}
     354:	08 95       	ret

00000356 <ButtonPrev>:
uint8_t ButtonPrev()
{
	return isclear(PINC,BUTTON_PREV_DOWN);
     356:	83 b3       	in	r24, 0x13	; 19
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
}
     35e:	08 95       	ret

00000360 <ButtonWait>:



void ButtonWait()
{
	while (isset(PINC,0) && isset(PINC,1) && isset(PINC,2) && isset(PINC,3));
     360:	83 b3       	in	r24, 0x13	; 19
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
     368:	88 23       	and	r24, r24
     36a:	91 f0       	breq	.+36     	; 0x390 <ButtonWait+0x30>
     36c:	83 b3       	in	r24, 0x13	; 19
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
     374:	88 23       	and	r24, r24
     376:	61 f0       	breq	.+24     	; 0x390 <ButtonWait+0x30>
     378:	83 b3       	in	r24, 0x13	; 19
     37a:	62 e0       	ldi	r22, 0x02	; 2
     37c:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
     380:	88 23       	and	r24, r24
     382:	31 f0       	breq	.+12     	; 0x390 <ButtonWait+0x30>
     384:	83 b3       	in	r24, 0x13	; 19
     386:	63 e0       	ldi	r22, 0x03	; 3
     388:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
     38c:	88 23       	and	r24, r24
     38e:	41 f7       	brne	.-48     	; 0x360 <ButtonWait>
     390:	08 95       	ret

00000392 <ButtonIsPressed>:
}
uint8_t ButtonIsPressed()
{
	return (isclear(PINC,0) || isclear(PINC,1) || isclear(PINC,2) || isclear(PINC,3));
     392:	83 b3       	in	r24, 0x13	; 19
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
     39a:	88 23       	and	r24, r24
     39c:	b9 f4       	brne	.+46     	; 0x3cc <ButtonIsPressed+0x3a>
     39e:	83 b3       	in	r24, 0x13	; 19
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
     3a6:	88 23       	and	r24, r24
     3a8:	89 f4       	brne	.+34     	; 0x3cc <ButtonIsPressed+0x3a>
     3aa:	83 b3       	in	r24, 0x13	; 19
     3ac:	62 e0       	ldi	r22, 0x02	; 2
     3ae:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
     3b2:	88 23       	and	r24, r24
     3b4:	59 f4       	brne	.+22     	; 0x3cc <ButtonIsPressed+0x3a>
     3b6:	83 b3       	in	r24, 0x13	; 19
     3b8:	63 e0       	ldi	r22, 0x03	; 3
     3ba:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
     3be:	21 e0       	ldi	r18, 0x01	; 1
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	88 23       	and	r24, r24
     3c4:	29 f4       	brne	.+10     	; 0x3d0 <ButtonIsPressed+0x3e>
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <ButtonIsPressed+0x3e>
     3cc:	21 e0       	ldi	r18, 0x01	; 1
     3ce:	30 e0       	ldi	r19, 0x00	; 0
}
     3d0:	82 2f       	mov	r24, r18
     3d2:	08 95       	ret

000003d4 <ButtonIsNotPressed>:
uint8_t ButtonIsNotPressed()
{
	return (isset(PINC,0) && isset(PINC,1) && isset(PINC,2) && isset(PINC,3));
     3d4:	83 b3       	in	r24, 0x13	; 19
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
     3dc:	88 23       	and	r24, r24
     3de:	c1 f0       	breq	.+48     	; 0x410 <ButtonIsNotPressed+0x3c>
     3e0:	83 b3       	in	r24, 0x13	; 19
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
     3e8:	88 23       	and	r24, r24
     3ea:	91 f0       	breq	.+36     	; 0x410 <ButtonIsNotPressed+0x3c>
     3ec:	83 b3       	in	r24, 0x13	; 19
     3ee:	62 e0       	ldi	r22, 0x02	; 2
     3f0:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
     3f4:	88 23       	and	r24, r24
     3f6:	79 f0       	breq	.+30     	; 0x416 <ButtonIsNotPressed+0x42>
     3f8:	83 b3       	in	r24, 0x13	; 19
     3fa:	63 e0       	ldi	r22, 0x03	; 3
     3fc:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
}
uint8_t ButtonIsPressed()
{
	return (isclear(PINC,0) || isclear(PINC,1) || isclear(PINC,2) || isclear(PINC,3));
}
uint8_t ButtonIsNotPressed()
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	88 23       	and	r24, r24
     406:	11 f4       	brne	.+4      	; 0x40c <ButtonIsNotPressed+0x38>
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
{
	return (isset(PINC,0) && isset(PINC,1) && isset(PINC,2) && isset(PINC,3));
     40c:	c9 01       	movw	r24, r18
     40e:	08 95       	ret
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	08 95       	ret
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
}
     41a:	08 95       	ret

0000041c <ButtonRead>:
uint8_t ButtonRead()
{
	uint8_t output;
	ButtonWait();
     41c:	0e 94 b0 01 	call	0x360	; 0x360 <ButtonWait>
	if (isclear(PINC,0))
     420:	83 b3       	in	r24, 0x13	; 19
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
     428:	88 23       	and	r24, r24
     42a:	71 f4       	brne	.+28     	; 0x448 <ButtonRead+0x2c>
		output = BUTTON_0_DOWN;
	else if (isclear(PINC,1))
     42c:	83 b3       	in	r24, 0x13	; 19
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
     434:	88 23       	and	r24, r24
     436:	51 f4       	brne	.+20     	; 0x44c <ButtonRead+0x30>
		output = BUTTON_1_DOWN;
	else if (isclear(PINC,2))
     438:	83 b3       	in	r24, 0x13	; 19
     43a:	62 e0       	ldi	r22, 0x02	; 2
     43c:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
     440:	88 23       	and	r24, r24
     442:	31 f0       	breq	.+12     	; 0x450 <ButtonRead+0x34>
		output = BUTTON_2_DOWN;
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	05 c0       	rjmp	.+10     	; 0x452 <ButtonRead+0x36>
uint8_t ButtonRead()
{
	uint8_t output;
	ButtonWait();
	if (isclear(PINC,0))
		output = BUTTON_0_DOWN;
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	03 c0       	rjmp	.+6      	; 0x452 <ButtonRead+0x36>
	else if (isclear(PINC,1))
		output = BUTTON_1_DOWN;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	01 c0       	rjmp	.+2      	; 0x452 <ButtonRead+0x36>
	else if (isclear(PINC,2))
		output = BUTTON_2_DOWN;
	else 
		output = BUTTON_3_DOWN;
     450:	83 e0       	ldi	r24, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     452:	2f e7       	ldi	r18, 0x7F	; 127
     454:	39 ea       	ldi	r19, 0xA9	; 169
     456:	43 e0       	ldi	r20, 0x03	; 3
     458:	21 50       	subi	r18, 0x01	; 1
     45a:	30 40       	sbci	r19, 0x00	; 0
     45c:	40 40       	sbci	r20, 0x00	; 0
     45e:	e1 f7       	brne	.-8      	; 0x458 <ButtonRead+0x3c>
     460:	00 c0       	rjmp	.+0      	; 0x462 <ButtonRead+0x46>
     462:	00 00       	nop
	_delay_ms(100);
	return (output);
}
     464:	08 95       	ret

00000466 <SettingDebugPrintlog2>:
			gState = GetParent(STATE_SETTING_DEBUG_PRINTLOG);
		}
	}	
}
void SettingDebugPrintlog2(char* nama,int8_t data[][2])
{
     466:	bf 92       	push	r11
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	6c 01       	movw	r12, r24
     47a:	7b 01       	movw	r14, r22
	/// shows
	uint8_t act;
	uint8_t i=0;
     47c:	bb 24       	eor	r11, r11
		if (act == BUTTON_NEXT_DOWN)		i++;
		else if (act == BUTTON_PREV_DOWN)	i--;
		else if (act == BUTTON_BACK_DOWN)	gState = GetParent(STATE_SETTING_DEBUG_PRINTLOG);
		else if (act == BUTTON_ENTER_DOWN)
		{
			gState = GetParent(STATE_SETTING_DEBUG_PRINTLOG);
     47e:	0d e3       	ldi	r16, 0x3D	; 61
     480:	10 e0       	ldi	r17, 0x00	; 0
void SettingDebugPrintlog2(char* nama,int8_t data[][2])
{
	/// shows
	uint8_t act;
	uint8_t i=0;
	while (gState == STATE_SETTING_DEBUG_PRINTLOG)
     482:	3b c0       	rjmp	.+118    	; 0x4fa <SettingDebugPrintlog2+0x94>
	{
		LCDGotoXY(0,0);
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
		LCDstring(nama,16);
     48c:	c6 01       	movw	r24, r12
     48e:	60 e1       	ldi	r22, 0x10	; 16
     490:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
		LCDGotoXY(0,1);
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
		LCDstring("<<-####||####+>>",16);
     49c:	85 e6       	ldi	r24, 0x65	; 101
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	60 e1       	ldi	r22, 0x10	; 16
     4a2:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
		cetak_bil(data[i][0],3,1,4);
     4a6:	cb 2d       	mov	r28, r11
     4a8:	d0 e0       	ldi	r29, 0x00	; 0
     4aa:	cc 0f       	add	r28, r28
     4ac:	dd 1f       	adc	r29, r29
     4ae:	ce 0d       	add	r28, r14
     4b0:	df 1d       	adc	r29, r15
     4b2:	88 81       	ld	r24, Y
     4b4:	99 27       	eor	r25, r25
     4b6:	87 fd       	sbrc	r24, 7
     4b8:	90 95       	com	r25
     4ba:	63 e0       	ldi	r22, 0x03	; 3
     4bc:	41 e0       	ldi	r20, 0x01	; 1
     4be:	24 e0       	ldi	r18, 0x04	; 4
     4c0:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
		cetak_bil(data[i][1],9,1,4);
     4c4:	89 81       	ldd	r24, Y+1	; 0x01
     4c6:	99 27       	eor	r25, r25
     4c8:	87 fd       	sbrc	r24, 7
     4ca:	90 95       	com	r25
     4cc:	69 e0       	ldi	r22, 0x09	; 9
     4ce:	41 e0       	ldi	r20, 0x01	; 1
     4d0:	24 e0       	ldi	r18, 0x04	; 4
     4d2:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
		act=ButtonRead();
     4d6:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
		if (act == BUTTON_NEXT_DOWN)		i++;
     4da:	83 30       	cpi	r24, 0x03	; 3
     4dc:	11 f4       	brne	.+4      	; 0x4e2 <SettingDebugPrintlog2+0x7c>
     4de:	b3 94       	inc	r11
     4e0:	0c c0       	rjmp	.+24     	; 0x4fa <SettingDebugPrintlog2+0x94>
		else if (act == BUTTON_PREV_DOWN)	i--;
     4e2:	88 23       	and	r24, r24
     4e4:	11 f4       	brne	.+4      	; 0x4ea <SettingDebugPrintlog2+0x84>
     4e6:	ba 94       	dec	r11
     4e8:	08 c0       	rjmp	.+16     	; 0x4fa <SettingDebugPrintlog2+0x94>
		else if (act == BUTTON_BACK_DOWN)	gState = GetParent(STATE_SETTING_DEBUG_PRINTLOG);
     4ea:	82 30       	cpi	r24, 0x02	; 2
     4ec:	11 f0       	breq	.+4      	; 0x4f2 <SettingDebugPrintlog2+0x8c>
		else if (act == BUTTON_ENTER_DOWN)
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	21 f4       	brne	.+8      	; 0x4fa <SettingDebugPrintlog2+0x94>
		{
			gState = GetParent(STATE_SETTING_DEBUG_PRINTLOG);
     4f2:	10 93 95 02 	sts	0x0295, r17
     4f6:	00 93 94 02 	sts	0x0294, r16
void SettingDebugPrintlog2(char* nama,int8_t data[][2])
{
	/// shows
	uint8_t act;
	uint8_t i=0;
	while (gState == STATE_SETTING_DEBUG_PRINTLOG)
     4fa:	80 91 94 02 	lds	r24, 0x0294
     4fe:	90 91 95 02 	lds	r25, 0x0295
     502:	22 e0       	ldi	r18, 0x02	; 2
     504:	86 36       	cpi	r24, 0x66	; 102
     506:	92 07       	cpc	r25, r18
     508:	09 f4       	brne	.+2      	; 0x50c <SettingDebugPrintlog2+0xa6>
     50a:	bc cf       	rjmp	.-136    	; 0x484 <SettingDebugPrintlog2+0x1e>
		{
			gState = GetParent(STATE_SETTING_DEBUG_PRINTLOG);
		}
	}
	
}
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	df 90       	pop	r13
     51a:	cf 90       	pop	r12
     51c:	bf 90       	pop	r11
     51e:	08 95       	ret

00000520 <SettingDebugPrintlog>:
	SettingDebugPrintlog("LOG RUNWHILE ERR",log);
}
///EBOTEC

void SettingDebugPrintlog(char* nama,int8_t data[])
{
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	7c 01       	movw	r14, r24
     530:	8b 01       	movw	r16, r22
	/// shows
	uint8_t act;
	uint8_t i=0;
     532:	dd 24       	eor	r13, r13
		if (act == BUTTON_NEXT_DOWN)		i++;
		else if (act == BUTTON_PREV_DOWN)	i--;
		else if (act == BUTTON_BACK_DOWN)	gState = GetParent(STATE_SETTING_DEBUG_PRINTLOG);
		else if (act == BUTTON_ENTER_DOWN)
		{
			gState = GetParent(STATE_SETTING_DEBUG_PRINTLOG);
     534:	cd e3       	ldi	r28, 0x3D	; 61
     536:	d0 e0       	ldi	r29, 0x00	; 0
void SettingDebugPrintlog(char* nama,int8_t data[])
{
	/// shows
	uint8_t act;
	uint8_t i=0;
	while (gState == STATE_SETTING_DEBUG_PRINTLOG)
     538:	2f c0       	rjmp	.+94     	; 0x598 <SettingDebugPrintlog+0x78>
	{
		LCDGotoXY(0,0);
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
		LCDstring(nama,16);
     542:	c7 01       	movw	r24, r14
     544:	60 e1       	ldi	r22, 0x10	; 16
     546:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
		LCDGotoXY(0,1);
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
		LCDstring("<<-   ####   +>>",16);
     552:	86 e7       	ldi	r24, 0x76	; 118
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	60 e1       	ldi	r22, 0x10	; 16
     558:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
		cetak_bil(data[i],6,1,4);
     55c:	f8 01       	movw	r30, r16
     55e:	ed 0d       	add	r30, r13
     560:	f1 1d       	adc	r31, r1
     562:	80 81       	ld	r24, Z
     564:	99 27       	eor	r25, r25
     566:	87 fd       	sbrc	r24, 7
     568:	90 95       	com	r25
     56a:	66 e0       	ldi	r22, 0x06	; 6
     56c:	41 e0       	ldi	r20, 0x01	; 1
     56e:	24 e0       	ldi	r18, 0x04	; 4
     570:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
		act=ButtonRead();
     574:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
		if (act == BUTTON_NEXT_DOWN)		i++;
     578:	83 30       	cpi	r24, 0x03	; 3
     57a:	11 f4       	brne	.+4      	; 0x580 <SettingDebugPrintlog+0x60>
     57c:	d3 94       	inc	r13
     57e:	0c c0       	rjmp	.+24     	; 0x598 <SettingDebugPrintlog+0x78>
		else if (act == BUTTON_PREV_DOWN)	i--;
     580:	88 23       	and	r24, r24
     582:	11 f4       	brne	.+4      	; 0x588 <SettingDebugPrintlog+0x68>
     584:	da 94       	dec	r13
     586:	08 c0       	rjmp	.+16     	; 0x598 <SettingDebugPrintlog+0x78>
		else if (act == BUTTON_BACK_DOWN)	gState = GetParent(STATE_SETTING_DEBUG_PRINTLOG);
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	11 f0       	breq	.+4      	; 0x590 <SettingDebugPrintlog+0x70>
		else if (act == BUTTON_ENTER_DOWN)
     58c:	81 30       	cpi	r24, 0x01	; 1
     58e:	21 f4       	brne	.+8      	; 0x598 <SettingDebugPrintlog+0x78>
		{
			gState = GetParent(STATE_SETTING_DEBUG_PRINTLOG);
     590:	d0 93 95 02 	sts	0x0295, r29
     594:	c0 93 94 02 	sts	0x0294, r28
void SettingDebugPrintlog(char* nama,int8_t data[])
{
	/// shows
	uint8_t act;
	uint8_t i=0;
	while (gState == STATE_SETTING_DEBUG_PRINTLOG)
     598:	80 91 94 02 	lds	r24, 0x0294
     59c:	90 91 95 02 	lds	r25, 0x0295
     5a0:	22 e0       	ldi	r18, 0x02	; 2
     5a2:	86 36       	cpi	r24, 0x66	; 102
     5a4:	92 07       	cpc	r25, r18
     5a6:	49 f2       	breq	.-110    	; 0x53a <SettingDebugPrintlog+0x1a>
		else if (act == BUTTON_ENTER_DOWN)
		{
			gState = GetParent(STATE_SETTING_DEBUG_PRINTLOG);
		}
	}	
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	df 90       	pop	r13
     5b6:	08 95       	ret

000005b8 <SensorReadAnalog>:
	_delay_ms(100);
	return (output);
}

void SensorReadAnalog()
{
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
	*/
	/// 0	1	2	3	4	5	6	7		8	9	10	11	12	13	14	15
	/// 		VVVVVVVVVVVV
	/// 7	6	5	4	3	2	1	0		15	14	13	12	11	10	9	8
	
	gSensAnalog[16+SENS_A_LEFT_BIT] = adc_baca(ANALOG_SENSOR_LEFT_CHANNEL);
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     5c2:	90 93 f7 02 	sts	0x02F7, r25
     5c6:	80 93 f6 02 	sts	0x02F6, r24
	gSensAnalog[16+SENS_A_RIGHT_BIT] = adc_baca(ANALOG_SENSOR_RIGHT_CHANNEL);
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     5d0:	90 93 f9 02 	sts	0x02F9, r25
     5d4:	80 93 f8 02 	sts	0x02F8, r24
	gSensAnalog[16+SENS_A_MID_BIT] = adc_baca(ANALOG_SENSOR_MID_CHANNEL);
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     5de:	90 93 fb 02 	sts	0x02FB, r25
     5e2:	80 93 fa 02 	sts	0x02FA, r24
	
	
	///MUX 0, untuk sensor di map 0 low, 13 high
	PORTA = (PORTA & 0b11000111) | (0<<3);
     5e6:	8b b3       	in	r24, 0x1b	; 27
     5e8:	87 7c       	andi	r24, 0xC7	; 199
     5ea:	8b bb       	out	0x1b, r24	; 27
	gSensAnalog[6] 	= adc_baca(ANALOG_SENSOR_LOW_CHANNEL);
     5ec:	87 e0       	ldi	r24, 0x07	; 7
     5ee:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     5f2:	90 93 e3 02 	sts	0x02E3, r25
     5f6:	80 93 e2 02 	sts	0x02E2, r24
	gSensAnalog[10] = adc_baca(ANALOG_SENSOR_HIGH_CHANNEL);
     5fa:	86 e0       	ldi	r24, 0x06	; 6
     5fc:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     600:	90 93 eb 02 	sts	0x02EB, r25
     604:	80 93 ea 02 	sts	0x02EA, r24
	
	///MUX 1, untuk sensor di map 4 low, 8 high
	PORTA = (PORTA & 0b11000111) | (1<<3);
     608:	8b b3       	in	r24, 0x1b	; 27
     60a:	87 7c       	andi	r24, 0xC7	; 199
     60c:	88 60       	ori	r24, 0x08	; 8
     60e:	8b bb       	out	0x1b, r24	; 27
	gSensAnalog[3] 	= adc_baca(ANALOG_SENSOR_LOW_CHANNEL);
     610:	87 e0       	ldi	r24, 0x07	; 7
     612:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     616:	90 93 dd 02 	sts	0x02DD, r25
     61a:	80 93 dc 02 	sts	0x02DC, r24
	gSensAnalog[15] = adc_baca(ANALOG_SENSOR_HIGH_CHANNEL);
     61e:	86 e0       	ldi	r24, 0x06	; 6
     620:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     624:	90 93 f5 02 	sts	0x02F5, r25
     628:	80 93 f4 02 	sts	0x02F4, r24
	
	///MUX 2, untuk sensor di map 3 low, 15 high
	PORTA = (PORTA & 0b11000111) | (2<<3);
     62c:	8b b3       	in	r24, 0x1b	; 27
     62e:	87 7c       	andi	r24, 0xC7	; 199
     630:	80 61       	ori	r24, 0x10	; 16
     632:	8b bb       	out	0x1b, r24	; 27
	gSensAnalog[4] 	= adc_baca(ANALOG_SENSOR_LOW_CHANNEL);
     634:	87 e0       	ldi	r24, 0x07	; 7
     636:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     63a:	90 93 df 02 	sts	0x02DF, r25
     63e:	80 93 de 02 	sts	0x02DE, r24
	gSensAnalog[8] = adc_baca(ANALOG_SENSOR_HIGH_CHANNEL);
     642:	86 e0       	ldi	r24, 0x06	; 6
     644:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     648:	90 93 e7 02 	sts	0x02E7, r25
     64c:	80 93 e6 02 	sts	0x02E6, r24
	
	///MUX 3, untuk sensor di map 5 low, 9 high
	PORTA = (PORTA & 0b11000111) | (3<<3);
     650:	8b b3       	in	r24, 0x1b	; 27
     652:	87 7c       	andi	r24, 0xC7	; 199
     654:	88 61       	ori	r24, 0x18	; 24
     656:	8b bb       	out	0x1b, r24	; 27
	gSensAnalog[2] 	= adc_baca(ANALOG_SENSOR_LOW_CHANNEL);
     658:	87 e0       	ldi	r24, 0x07	; 7
     65a:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     65e:	90 93 db 02 	sts	0x02DB, r25
     662:	80 93 da 02 	sts	0x02DA, r24
	gSensAnalog[14] = adc_baca(ANALOG_SENSOR_HIGH_CHANNEL);
     666:	86 e0       	ldi	r24, 0x06	; 6
     668:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     66c:	90 93 f3 02 	sts	0x02F3, r25
     670:	80 93 f2 02 	sts	0x02F2, r24
	
	///MUX 4, untuk sensor di map 2 low, 14 high
	PORTA = (PORTA & 0b11000111) | (4<<3);
     674:	8b b3       	in	r24, 0x1b	; 27
     676:	87 7c       	andi	r24, 0xC7	; 199
     678:	80 62       	ori	r24, 0x20	; 32
     67a:	8b bb       	out	0x1b, r24	; 27
	gSensAnalog[5] 	= adc_baca(ANALOG_SENSOR_LOW_CHANNEL);
     67c:	87 e0       	ldi	r24, 0x07	; 7
     67e:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     682:	90 93 e1 02 	sts	0x02E1, r25
     686:	80 93 e0 02 	sts	0x02E0, r24
	gSensAnalog[9] = adc_baca(ANALOG_SENSOR_HIGH_CHANNEL);
     68a:	86 e0       	ldi	r24, 0x06	; 6
     68c:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     690:	90 93 e9 02 	sts	0x02E9, r25
     694:	80 93 e8 02 	sts	0x02E8, r24
	
	///MUX 5, untuk sensor di map 7 low, 11 high
	PORTA = (PORTA & 0b11000111) | (5<<3);
     698:	8b b3       	in	r24, 0x1b	; 27
     69a:	87 7c       	andi	r24, 0xC7	; 199
     69c:	88 62       	ori	r24, 0x28	; 40
     69e:	8b bb       	out	0x1b, r24	; 27
	gSensAnalog[0] 	= adc_baca(ANALOG_SENSOR_LOW_CHANNEL);
     6a0:	87 e0       	ldi	r24, 0x07	; 7
     6a2:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     6a6:	c6 ed       	ldi	r28, 0xD6	; 214
     6a8:	d2 e0       	ldi	r29, 0x02	; 2
     6aa:	99 83       	std	Y+1, r25	; 0x01
     6ac:	88 83       	st	Y, r24
	gSensAnalog[12] = adc_baca(ANALOG_SENSOR_HIGH_CHANNEL);
     6ae:	86 e0       	ldi	r24, 0x06	; 6
     6b0:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     6b4:	99 8f       	std	Y+25, r25	; 0x19
     6b6:	88 8f       	std	Y+24, r24	; 0x18
	
	///MUX 6, untuk sensor di map 0 low, 12 high
	PORTA = (PORTA & 0b11000111) | (6<<3);
     6b8:	8b b3       	in	r24, 0x1b	; 27
     6ba:	87 7c       	andi	r24, 0xC7	; 199
     6bc:	80 63       	ori	r24, 0x30	; 48
     6be:	8b bb       	out	0x1b, r24	; 27
	gSensAnalog[7] 	= adc_baca(ANALOG_SENSOR_LOW_CHANNEL);
     6c0:	87 e0       	ldi	r24, 0x07	; 7
     6c2:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     6c6:	9f 87       	std	Y+15, r25	; 0x0f
     6c8:	8e 87       	std	Y+14, r24	; 0x0e
	gSensAnalog[11] = adc_baca(ANALOG_SENSOR_HIGH_CHANNEL);
     6ca:	86 e0       	ldi	r24, 0x06	; 6
     6cc:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     6d0:	9f 8b       	std	Y+23, r25	; 0x17
     6d2:	8e 8b       	std	Y+22, r24	; 0x16
	
	///MUX 7, untuk sensor di map 6 low, 10 high
	PORTA = (PORTA & 0b11000111) | (7<<3);
     6d4:	8b b3       	in	r24, 0x1b	; 27
     6d6:	88 63       	ori	r24, 0x38	; 56
     6d8:	8b bb       	out	0x1b, r24	; 27
	gSensAnalog[1] 	= adc_baca(ANALOG_SENSOR_LOW_CHANNEL);
     6da:	87 e0       	ldi	r24, 0x07	; 7
     6dc:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     6e0:	9b 83       	std	Y+3, r25	; 0x03
     6e2:	8a 83       	std	Y+2, r24	; 0x02
	gSensAnalog[13] = adc_baca(ANALOG_SENSOR_HIGH_CHANNEL);
     6e4:	86 e0       	ldi	r24, 0x06	; 6
     6e6:	0e 94 9a 00 	call	0x134	; 0x134 <adc_baca>
     6ea:	9b 8f       	std	Y+27, r25	; 0x1b
     6ec:	8a 8f       	std	Y+26, r24	; 0x1a
	//~ PORTA = (PORTA & 0b11000111) | (7<<3);
	//~ gSensAnalog[6] 	= adc_baca(ANALOG_SENSOR_LOW_CHANNEL);
	//~ gSensAnalog[10] = adc_baca(ANALOG_SENSOR_HIGH_CHANNEL);
	
	
}
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <SensorReadDigital>:
void SensorReadDigital()
{
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
	gSensH = 0;
     6fc:	10 92 d1 02 	sts	0x02D1, r1
	gSensL = 0;
     700:	10 92 cf 02 	sts	0x02CF, r1
	gSensA = 0;
     704:	10 92 87 03 	sts	0x0387, r1
	uint8_t l_Num;
	SensorReadAnalog();
     708:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <SensorReadAnalog>
	
	if (gSensAnalog[16+SENS_A_LEFT_BIT]>gSensRef[16+SENS_A_LEFT_BIT])	_set(gSensA,SENS_A_LEFT_BIT);
     70c:	20 91 f6 02 	lds	r18, 0x02F6
     710:	30 91 f7 02 	lds	r19, 0x02F7
     714:	80 91 81 03 	lds	r24, 0x0381
     718:	90 91 82 03 	lds	r25, 0x0382
     71c:	82 17       	cp	r24, r18
     71e:	93 07       	cpc	r25, r19
     720:	28 f4       	brcc	.+10     	; 0x72c <SensorReadDigital+0x38>
     722:	80 91 87 03 	lds	r24, 0x0387
     726:	81 60       	ori	r24, 0x01	; 1
     728:	80 93 87 03 	sts	0x0387, r24
	if (gSensAnalog[16+SENS_A_RIGHT_BIT]>gSensRef[16+SENS_A_RIGHT_BIT])	_set(gSensA,SENS_A_RIGHT_BIT);
     72c:	20 91 f8 02 	lds	r18, 0x02F8
     730:	30 91 f9 02 	lds	r19, 0x02F9
     734:	80 91 83 03 	lds	r24, 0x0383
     738:	90 91 84 03 	lds	r25, 0x0384
     73c:	82 17       	cp	r24, r18
     73e:	93 07       	cpc	r25, r19
     740:	28 f4       	brcc	.+10     	; 0x74c <SensorReadDigital+0x58>
     742:	80 91 87 03 	lds	r24, 0x0387
     746:	82 60       	ori	r24, 0x02	; 2
     748:	80 93 87 03 	sts	0x0387, r24
	if (gSensAnalog[16+SENS_A_MID_BIT]>gSensRef[16+SENS_A_MID_BIT])		_set(gSensA,SENS_A_MID_BIT);
     74c:	20 91 fa 02 	lds	r18, 0x02FA
     750:	30 91 fb 02 	lds	r19, 0x02FB
     754:	80 91 85 03 	lds	r24, 0x0385
     758:	90 91 86 03 	lds	r25, 0x0386
     75c:	82 17       	cp	r24, r18
     75e:	93 07       	cpc	r25, r19
     760:	28 f4       	brcc	.+10     	; 0x76c <SensorReadDigital+0x78>
     762:	80 91 87 03 	lds	r24, 0x0387
     766:	84 60       	ori	r24, 0x04	; 4
     768:	80 93 87 03 	sts	0x0387, r24
     76c:	00 91 cf 02 	lds	r16, 0x02CF
     770:	10 91 d1 02 	lds	r17, 0x02D1
     774:	a6 ed       	ldi	r26, 0xD6	; 214
     776:	b2 e0       	ldi	r27, 0x02	; 2
     778:	e1 e6       	ldi	r30, 0x61	; 97
     77a:	f3 e0       	ldi	r31, 0x03	; 3
	//~ gSensAnalog[10] = adc_baca(ANALOG_SENSOR_HIGH_CHANNEL);
	
	
}
void SensorReadDigital()
{
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
	
	for (l_Num=0;l_Num<=7;l_Num++)
	{
		if (gSensAnalog[l_Num]>gSensRef[l_Num])
		{
			_set(gSensL,l_Num);
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t l_Num;
	SensorReadAnalog();
	
	if (gSensAnalog[16+SENS_A_LEFT_BIT]>gSensRef[16+SENS_A_LEFT_BIT])	_set(gSensA,SENS_A_LEFT_BIT);
	if (gSensAnalog[16+SENS_A_RIGHT_BIT]>gSensRef[16+SENS_A_RIGHT_BIT])	_set(gSensA,SENS_A_RIGHT_BIT);
	if (gSensAnalog[16+SENS_A_MID_BIT]>gSensRef[16+SENS_A_MID_BIT])		_set(gSensA,SENS_A_MID_BIT);
     784:	48 2f       	mov	r20, r24
	
	for (l_Num=0;l_Num<=7;l_Num++)
	{
		if (gSensAnalog[l_Num]>gSensRef[l_Num])
     786:	cd 91       	ld	r28, X+
     788:	dd 91       	ld	r29, X+
     78a:	61 91       	ld	r22, Z+
     78c:	71 91       	ld	r23, Z+
     78e:	6c 17       	cp	r22, r28
     790:	7d 07       	cpc	r23, r29
     792:	40 f4       	brcc	.+16     	; 0x7a4 <SensorReadDigital+0xb0>
		{
			_set(gSensL,l_Num);
     794:	b9 01       	movw	r22, r18
     796:	08 2e       	mov	r0, r24
     798:	02 c0       	rjmp	.+4      	; 0x79e <SensorReadDigital+0xaa>
     79a:	66 0f       	add	r22, r22
     79c:	77 1f       	adc	r23, r23
     79e:	0a 94       	dec	r0
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <SensorReadDigital+0xa6>
     7a2:	06 2b       	or	r16, r22
		}
		if (gSensAnalog[l_Num+8]>gSensRef[l_Num+8])
     7a4:	1e 96       	adiw	r26, 0x0e	; 14
     7a6:	cd 91       	ld	r28, X+
     7a8:	dc 91       	ld	r29, X
     7aa:	1f 97       	sbiw	r26, 0x0f	; 15
     7ac:	66 85       	ldd	r22, Z+14	; 0x0e
     7ae:	77 85       	ldd	r23, Z+15	; 0x0f
     7b0:	6c 17       	cp	r22, r28
     7b2:	7d 07       	cpc	r23, r29
     7b4:	38 f4       	brcc	.+14     	; 0x7c4 <SensorReadDigital+0xd0>
		{
			_set(gSensH,l_Num);
     7b6:	b9 01       	movw	r22, r18
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <SensorReadDigital+0xca>
     7ba:	66 0f       	add	r22, r22
     7bc:	77 1f       	adc	r23, r23
     7be:	4a 95       	dec	r20
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <SensorReadDigital+0xc6>
     7c2:	16 2b       	or	r17, r22
     7c4:	01 96       	adiw	r24, 0x01	; 1
	
	if (gSensAnalog[16+SENS_A_LEFT_BIT]>gSensRef[16+SENS_A_LEFT_BIT])	_set(gSensA,SENS_A_LEFT_BIT);
	if (gSensAnalog[16+SENS_A_RIGHT_BIT]>gSensRef[16+SENS_A_RIGHT_BIT])	_set(gSensA,SENS_A_RIGHT_BIT);
	if (gSensAnalog[16+SENS_A_MID_BIT]>gSensRef[16+SENS_A_MID_BIT])		_set(gSensA,SENS_A_MID_BIT);
	
	for (l_Num=0;l_Num<=7;l_Num++)
     7c6:	88 30       	cpi	r24, 0x08	; 8
     7c8:	91 05       	cpc	r25, r1
     7ca:	e1 f6       	brne	.-72     	; 0x784 <SensorReadDigital+0x90>
     7cc:	00 93 cf 02 	sts	0x02CF, r16
     7d0:	10 93 d1 02 	sts	0x02D1, r17
		if (gSensAnalog[l_Num+8]>gSensRef[l_Num+8])
		{
			_set(gSensH,l_Num);
		}
	}
}
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	08 95       	ret

000007de <SensorCalibrate>:
void Calibrate()
{
	SensorCalibrate();
}
void SensorCalibrate()
{
     7de:	2f 92       	push	r2
     7e0:	3f 92       	push	r3
     7e2:	4f 92       	push	r4
     7e4:	5f 92       	push	r5
     7e6:	6f 92       	push	r6
     7e8:	7f 92       	push	r7
     7ea:	8f 92       	push	r8
     7ec:	9f 92       	push	r9
     7ee:	af 92       	push	r10
     7f0:	bf 92       	push	r11
     7f2:	cf 92       	push	r12
     7f4:	df 92       	push	r13
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	df 93       	push	r29
     800:	cf 93       	push	r28
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	cc 54       	subi	r28, 0x4C	; 76
     808:	d0 40       	sbci	r29, 0x00	; 0
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	8f eb       	ldi	r24, 0xBF	; 191
     816:	97 e2       	ldi	r25, 0x27	; 39
     818:	a9 e0       	ldi	r26, 0x09	; 9
     81a:	81 50       	subi	r24, 0x01	; 1
     81c:	90 40       	sbci	r25, 0x00	; 0
     81e:	a0 40       	sbci	r26, 0x00	; 0
     820:	e1 f7       	brne	.-8      	; 0x81a <SensorCalibrate+0x3c>
     822:	00 c0       	rjmp	.+0      	; 0x824 <SensorCalibrate+0x46>
     824:	00 00       	nop
	_delay_ms(250);
	uint16_t refbellow[19];
	uint16_t refupper[19];
	uint8_t num;
	LCDclr();
     826:	0e 94 29 17 	call	0x2e52	; 0x2e52 <LCDclr>
     82a:	2e 01       	movw	r4, r28
     82c:	08 94       	sec
     82e:	41 1c       	adc	r4, r1
     830:	51 1c       	adc	r5, r1
     832:	8e 01       	movw	r16, r28
     834:	09 5d       	subi	r16, 0xD9	; 217
     836:	1f 4f       	sbci	r17, 0xFF	; 255
}
void Calibrate()
{
	SensorCalibrate();
}
void SensorCalibrate()
     838:	d8 01       	movw	r26, r16
     83a:	f2 01       	movw	r30, r4
	uint16_t refupper[19];
	uint8_t num;
	LCDclr();
	for (num=0;num<=18;num++)
	{
		refbellow[num] = 1023;
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	93 e0       	ldi	r25, 0x03	; 3
     840:	81 93       	st	Z+, r24
     842:	91 93       	st	Z+, r25
		refupper[num] = 0;
     844:	1d 92       	st	X+, r1
     846:	1d 92       	st	X+, r1
	_delay_ms(250);
	uint16_t refbellow[19];
	uint16_t refupper[19];
	uint8_t num;
	LCDclr();
	for (num=0;num<=18;num++)
     848:	e0 17       	cp	r30, r16
     84a:	f1 07       	cpc	r31, r17
     84c:	c9 f7       	brne	.-14     	; 0x840 <SensorCalibrate+0x62>
     84e:	e6 c0       	rjmp	.+460    	; 0xa1c <__stack+0x1bd>
		refbellow[num] = 1023;
		refupper[num] = 0;
	}
	while (ButtonIsNotPressed())
	{
		SensorReadAnalog();
     850:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <SensorReadAnalog>
     854:	46 ed       	ldi	r20, 0xD6	; 214
     856:	52 e0       	ldi	r21, 0x02	; 2
     858:	21 e6       	ldi	r18, 0x61	; 97
     85a:	33 e0       	ldi	r19, 0x03	; 3
     85c:	d8 01       	movw	r26, r16
     85e:	12 01       	movw	r2, r4
		for (num=0;num<=15;num++)
     860:	bb 24       	eor	r11, r11
		{
			if (gSensAnalog[num]<refbellow[num])		refbellow[num]	= gSensAnalog[num];
     862:	fa 01       	movw	r30, r20
     864:	81 91       	ld	r24, Z+
     866:	91 91       	ld	r25, Z+
     868:	af 01       	movw	r20, r30
     86a:	f1 01       	movw	r30, r2
     86c:	60 81       	ld	r22, Z
     86e:	71 81       	ldd	r23, Z+1	; 0x01
     870:	86 17       	cp	r24, r22
     872:	97 07       	cpc	r25, r23
     874:	10 f4       	brcc	.+4      	; 0x87a <__stack+0x1b>
     876:	91 83       	std	Z+1, r25	; 0x01
     878:	80 83       	st	Z, r24
			if (gSensAnalog[num]>refupper[num])		refupper[num]	= gSensAnalog[num];
     87a:	6d 91       	ld	r22, X+
     87c:	7c 91       	ld	r23, X
     87e:	11 97       	sbiw	r26, 0x01	; 1
     880:	68 17       	cp	r22, r24
     882:	79 07       	cpc	r23, r25
     884:	18 f4       	brcc	.+6      	; 0x88c <__stack+0x2d>
     886:	11 96       	adiw	r26, 0x01	; 1
     888:	9c 93       	st	X, r25
     88a:	8e 93       	st	-X, r24
			gSensRef[num] = (refbellow[num]+refupper[num])/2;
     88c:	8d 91       	ld	r24, X+
     88e:	9d 91       	ld	r25, X+
     890:	f1 01       	movw	r30, r2
     892:	61 91       	ld	r22, Z+
     894:	71 91       	ld	r23, Z+
     896:	1f 01       	movw	r2, r30
     898:	86 0f       	add	r24, r22
     89a:	97 1f       	adc	r25, r23
     89c:	96 95       	lsr	r25
     89e:	87 95       	ror	r24
     8a0:	f9 01       	movw	r30, r18
     8a2:	81 93       	st	Z+, r24
     8a4:	91 93       	st	Z+, r25
     8a6:	9f 01       	movw	r18, r30
		refupper[num] = 0;
	}
	while (ButtonIsNotPressed())
	{
		SensorReadAnalog();
		for (num=0;num<=15;num++)
     8a8:	b3 94       	inc	r11
     8aa:	fb 2d       	mov	r31, r11
     8ac:	f0 31       	cpi	r31, 0x10	; 16
     8ae:	c9 f6       	brne	.-78     	; 0x862 <__stack+0x3>
		{
			if (gSensAnalog[num]<refbellow[num])		refbellow[num]	= gSensAnalog[num];
			if (gSensAnalog[num]>refupper[num])		refupper[num]	= gSensAnalog[num];
			gSensRef[num] = (refbellow[num]+refupper[num])/2;
		}
		if (gSensAnalog[16+SENS_A_LEFT_BIT]<refbellow[16+SENS_A_LEFT_BIT])		refbellow[16+SENS_A_LEFT_BIT]=gSensAnalog[16+SENS_A_LEFT_BIT];
     8b0:	80 91 f6 02 	lds	r24, 0x02F6
     8b4:	90 91 f7 02 	lds	r25, 0x02F7
     8b8:	29 a1       	ldd	r18, Y+33	; 0x21
     8ba:	3a a1       	ldd	r19, Y+34	; 0x22
     8bc:	82 17       	cp	r24, r18
     8be:	93 07       	cpc	r25, r19
     8c0:	10 f4       	brcc	.+4      	; 0x8c6 <__stack+0x67>
     8c2:	9a a3       	std	Y+34, r25	; 0x22
     8c4:	89 a3       	std	Y+33, r24	; 0x21
		if (gSensAnalog[16+SENS_A_LEFT_BIT]>refupper[16+SENS_A_LEFT_BIT])		refupper[16+SENS_A_LEFT_BIT]=gSensAnalog[16+SENS_A_LEFT_BIT];
     8c6:	d7 01       	movw	r26, r14
     8c8:	2d 91       	ld	r18, X+
     8ca:	3c 91       	ld	r19, X
     8cc:	11 97       	sbiw	r26, 0x01	; 1
     8ce:	28 17       	cp	r18, r24
     8d0:	39 07       	cpc	r19, r25
     8d2:	18 f4       	brcc	.+6      	; 0x8da <__stack+0x7b>
     8d4:	11 96       	adiw	r26, 0x01	; 1
     8d6:	9c 93       	st	X, r25
     8d8:	8e 93       	st	-X, r24
		gSensRef[16+SENS_A_LEFT_BIT] = (refbellow[16+SENS_A_LEFT_BIT]+refupper[16+SENS_A_LEFT_BIT])/2;
     8da:	f7 01       	movw	r30, r14
     8dc:	80 81       	ld	r24, Z
     8de:	91 81       	ldd	r25, Z+1	; 0x01
     8e0:	29 a1       	ldd	r18, Y+33	; 0x21
     8e2:	3a a1       	ldd	r19, Y+34	; 0x22
     8e4:	82 0f       	add	r24, r18
     8e6:	93 1f       	adc	r25, r19
     8e8:	96 95       	lsr	r25
     8ea:	87 95       	ror	r24
     8ec:	90 93 82 03 	sts	0x0382, r25
     8f0:	80 93 81 03 	sts	0x0381, r24
		
		if (gSensAnalog[16+SENS_A_RIGHT_BIT]<refbellow[16+SENS_A_RIGHT_BIT])	refbellow[16+SENS_A_RIGHT_BIT]=gSensAnalog[16+SENS_A_RIGHT_BIT];
     8f4:	80 91 f8 02 	lds	r24, 0x02F8
     8f8:	90 91 f9 02 	lds	r25, 0x02F9
     8fc:	2b a1       	ldd	r18, Y+35	; 0x23
     8fe:	3c a1       	ldd	r19, Y+36	; 0x24
     900:	82 17       	cp	r24, r18
     902:	93 07       	cpc	r25, r19
     904:	10 f4       	brcc	.+4      	; 0x90a <__stack+0xab>
     906:	9c a3       	std	Y+36, r25	; 0x24
     908:	8b a3       	std	Y+35, r24	; 0x23
		if (gSensAnalog[16+SENS_A_RIGHT_BIT]>refupper[16+SENS_A_RIGHT_BIT])		refupper[16+SENS_A_RIGHT_BIT]=gSensAnalog[16+SENS_A_RIGHT_BIT];
     90a:	d6 01       	movw	r26, r12
     90c:	2d 91       	ld	r18, X+
     90e:	3c 91       	ld	r19, X
     910:	11 97       	sbiw	r26, 0x01	; 1
     912:	28 17       	cp	r18, r24
     914:	39 07       	cpc	r19, r25
     916:	18 f4       	brcc	.+6      	; 0x91e <__stack+0xbf>
     918:	11 96       	adiw	r26, 0x01	; 1
     91a:	9c 93       	st	X, r25
     91c:	8e 93       	st	-X, r24
		gSensRef[16+SENS_A_RIGHT_BIT] = (refbellow[16+SENS_A_RIGHT_BIT]+refupper[16+SENS_A_RIGHT_BIT])/2;
     91e:	f6 01       	movw	r30, r12
     920:	80 81       	ld	r24, Z
     922:	91 81       	ldd	r25, Z+1	; 0x01
     924:	2b a1       	ldd	r18, Y+35	; 0x23
     926:	3c a1       	ldd	r19, Y+36	; 0x24
     928:	82 0f       	add	r24, r18
     92a:	93 1f       	adc	r25, r19
     92c:	96 95       	lsr	r25
     92e:	87 95       	ror	r24
     930:	90 93 84 03 	sts	0x0384, r25
     934:	80 93 83 03 	sts	0x0383, r24
		
		if (gSensAnalog[16+SENS_A_MID_BIT]<refbellow[16+SENS_A_MID_BIT])		refbellow[16+SENS_A_MID_BIT]=gSensAnalog[16+SENS_A_MID_BIT];
     938:	80 91 fa 02 	lds	r24, 0x02FA
     93c:	90 91 fb 02 	lds	r25, 0x02FB
     940:	2d a1       	ldd	r18, Y+37	; 0x25
     942:	3e a1       	ldd	r19, Y+38	; 0x26
     944:	82 17       	cp	r24, r18
     946:	93 07       	cpc	r25, r19
     948:	10 f4       	brcc	.+4      	; 0x94e <__stack+0xef>
     94a:	9e a3       	std	Y+38, r25	; 0x26
     94c:	8d a3       	std	Y+37, r24	; 0x25
		if (gSensAnalog[16+SENS_A_MID_BIT]>refupper[16+SENS_A_MID_BIT])			refupper[16+SENS_A_MID_BIT]=gSensAnalog[16+SENS_A_MID_BIT];
     94e:	d3 01       	movw	r26, r6
     950:	2d 91       	ld	r18, X+
     952:	3c 91       	ld	r19, X
     954:	11 97       	sbiw	r26, 0x01	; 1
     956:	28 17       	cp	r18, r24
     958:	39 07       	cpc	r19, r25
     95a:	10 f4       	brcc	.+4      	; 0x960 <__stack+0x101>
     95c:	8d 93       	st	X+, r24
     95e:	9c 93       	st	X, r25
		gSensRef[16+SENS_A_MID_BIT] = (refbellow[16+SENS_A_MID_BIT]+refupper[16+SENS_A_MID_BIT])/2;
     960:	f3 01       	movw	r30, r6
     962:	80 81       	ld	r24, Z
     964:	91 81       	ldd	r25, Z+1	; 0x01
     966:	2d a1       	ldd	r18, Y+37	; 0x25
     968:	3e a1       	ldd	r19, Y+38	; 0x26
     96a:	82 0f       	add	r24, r18
     96c:	93 1f       	adc	r25, r19
     96e:	96 95       	lsr	r25
     970:	87 95       	ror	r24
     972:	90 93 86 03 	sts	0x0386, r25
     976:	80 93 85 03 	sts	0x0385, r24
		
		SensorReadDigital();
     97a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
     97e:	ef e0       	ldi	r30, 0x0F	; 15
     980:	ae 2e       	mov	r10, r30
     982:	77 e0       	ldi	r23, 0x07	; 7
     984:	b7 2e       	mov	r11, r23
     986:	98 2c       	mov	r9, r8
     988:	9b 18       	sub	r9, r11
		for (num=0;num<=7;num++)
		{
			if (isset(gSensH,num))	cetak_bil(1,15-num-8,1,1);
     98a:	80 91 d1 02 	lds	r24, 0x02D1
     98e:	69 2d       	mov	r22, r9
     990:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
     994:	88 23       	and	r24, r24
     996:	19 f0       	breq	.+6      	; 0x99e <__stack+0x13f>
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0x143>
			else 						cetak_bil(0,15-num-8,1,1);
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	6b 2d       	mov	r22, r11
     9a4:	41 e0       	ldi	r20, 0x01	; 1
     9a6:	21 e0       	ldi	r18, 0x01	; 1
     9a8:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
			if (isset(gSensL,num))	cetak_bil(1,15-num,1,1);
     9ac:	80 91 cf 02 	lds	r24, 0x02CF
     9b0:	69 2d       	mov	r22, r9
     9b2:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
     9b6:	88 23       	and	r24, r24
     9b8:	19 f0       	breq	.+6      	; 0x9c0 <__stack+0x161>
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__stack+0x165>
			else 						cetak_bil(0,15-num,1,1);
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	6a 2d       	mov	r22, r10
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	21 e0       	ldi	r18, 0x01	; 1
     9ca:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
     9ce:	ba 94       	dec	r11
     9d0:	aa 94       	dec	r10
		if (gSensAnalog[16+SENS_A_MID_BIT]<refbellow[16+SENS_A_MID_BIT])		refbellow[16+SENS_A_MID_BIT]=gSensAnalog[16+SENS_A_MID_BIT];
		if (gSensAnalog[16+SENS_A_MID_BIT]>refupper[16+SENS_A_MID_BIT])			refupper[16+SENS_A_MID_BIT]=gSensAnalog[16+SENS_A_MID_BIT];
		gSensRef[16+SENS_A_MID_BIT] = (refbellow[16+SENS_A_MID_BIT]+refupper[16+SENS_A_MID_BIT])/2;
		
		SensorReadDigital();
		for (num=0;num<=7;num++)
     9d2:	fb 2d       	mov	r31, r11
     9d4:	ff 3f       	cpi	r31, 0xFF	; 255
     9d6:	b9 f6       	brne	.-82     	; 0x986 <__stack+0x127>
			if (isset(gSensH,num))	cetak_bil(1,15-num-8,1,1);
			else 						cetak_bil(0,15-num-8,1,1);
			if (isset(gSensL,num))	cetak_bil(1,15-num,1,1);
			else 						cetak_bil(0,15-num,1,1);
		}
		cetak_bil(isset(gSensA,SENS_A_LEFT_BIT),7,0,1);
     9d8:	80 91 87 03 	lds	r24, 0x0387
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	67 e0       	ldi	r22, 0x07	; 7
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	21 e0       	ldi	r18, 0x01	; 1
     9ea:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
		cetak_bil(isset(gSensA,SENS_A_MID_BIT),8,0,1);
     9ee:	80 91 87 03 	lds	r24, 0x0387
     9f2:	62 e0       	ldi	r22, 0x02	; 2
     9f4:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	68 e0       	ldi	r22, 0x08	; 8
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	21 e0       	ldi	r18, 0x01	; 1
     a00:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
		cetak_bil(isset(gSensA,SENS_A_RIGHT_BIT),9,0,1);
     a04:	80 91 87 03 	lds	r24, 0x0387
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	69 e0       	ldi	r22, 0x09	; 9
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	21 e0       	ldi	r18, 0x01	; 1
     a16:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
     a1a:	11 c0       	rjmp	.+34     	; 0xa3e <__stack+0x1df>
			if (gSensAnalog[num]<refbellow[num])		refbellow[num]	= gSensAnalog[num];
			if (gSensAnalog[num]>refupper[num])		refupper[num]	= gSensAnalog[num];
			gSensRef[num] = (refbellow[num]+refupper[num])/2;
		}
		if (gSensAnalog[16+SENS_A_LEFT_BIT]<refbellow[16+SENS_A_LEFT_BIT])		refbellow[16+SENS_A_LEFT_BIT]=gSensAnalog[16+SENS_A_LEFT_BIT];
		if (gSensAnalog[16+SENS_A_LEFT_BIT]>refupper[16+SENS_A_LEFT_BIT])		refupper[16+SENS_A_LEFT_BIT]=gSensAnalog[16+SENS_A_LEFT_BIT];
     a1c:	67 e4       	ldi	r22, 0x47	; 71
     a1e:	e6 2e       	mov	r14, r22
     a20:	f1 2c       	mov	r15, r1
     a22:	ec 0e       	add	r14, r28
     a24:	fd 1e       	adc	r15, r29
		gSensRef[16+SENS_A_LEFT_BIT] = (refbellow[16+SENS_A_LEFT_BIT]+refupper[16+SENS_A_LEFT_BIT])/2;
		
		if (gSensAnalog[16+SENS_A_RIGHT_BIT]<refbellow[16+SENS_A_RIGHT_BIT])	refbellow[16+SENS_A_RIGHT_BIT]=gSensAnalog[16+SENS_A_RIGHT_BIT];
		if (gSensAnalog[16+SENS_A_RIGHT_BIT]>refupper[16+SENS_A_RIGHT_BIT])		refupper[16+SENS_A_RIGHT_BIT]=gSensAnalog[16+SENS_A_RIGHT_BIT];
     a26:	59 e4       	ldi	r21, 0x49	; 73
     a28:	c5 2e       	mov	r12, r21
     a2a:	d1 2c       	mov	r13, r1
     a2c:	cc 0e       	add	r12, r28
     a2e:	dd 1e       	adc	r13, r29
		gSensRef[16+SENS_A_RIGHT_BIT] = (refbellow[16+SENS_A_RIGHT_BIT]+refupper[16+SENS_A_RIGHT_BIT])/2;
		
		if (gSensAnalog[16+SENS_A_MID_BIT]<refbellow[16+SENS_A_MID_BIT])		refbellow[16+SENS_A_MID_BIT]=gSensAnalog[16+SENS_A_MID_BIT];
		if (gSensAnalog[16+SENS_A_MID_BIT]>refupper[16+SENS_A_MID_BIT])			refupper[16+SENS_A_MID_BIT]=gSensAnalog[16+SENS_A_MID_BIT];
     a30:	4b e4       	ldi	r20, 0x4B	; 75
     a32:	64 2e       	mov	r6, r20
     a34:	71 2c       	mov	r7, r1
     a36:	6c 0e       	add	r6, r28
     a38:	7d 1e       	adc	r7, r29
		gSensRef[16+SENS_A_MID_BIT] = (refbellow[16+SENS_A_MID_BIT]+refupper[16+SENS_A_MID_BIT])/2;
		
		SensorReadDigital();
     a3a:	37 e0       	ldi	r19, 0x07	; 7
     a3c:	83 2e       	mov	r8, r19
	for (num=0;num<=18;num++)
	{
		refbellow[num] = 1023;
		refupper[num] = 0;
	}
	while (ButtonIsNotPressed())
     a3e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ButtonIsNotPressed>
     a42:	88 23       	and	r24, r24
     a44:	09 f0       	breq	.+2      	; 0xa48 <__stack+0x1e9>
     a46:	04 cf       	rjmp	.-504    	; 0x850 <SensorCalibrate+0x72>
     a48:	21 e6       	ldi	r18, 0x61	; 97
     a4a:	e2 2e       	mov	r14, r18
     a4c:	23 e0       	ldi	r18, 0x03	; 3
     a4e:	f2 2e       	mov	r15, r18
     a50:	07 e1       	ldi	r16, 0x17	; 23
     a52:	12 e0       	ldi	r17, 0x02	; 2
		cetak_bil(isset(gSensA,SENS_A_MID_BIT),8,0,1);
		cetak_bil(isset(gSensA,SENS_A_RIGHT_BIT),9,0,1);
	}
	for (int i = 0; i < 19; i++)
	{
		EepromWrite(ADDRESS_BLOCK_SENSOR_REF+i,(gSensRef[i]/4));
     a54:	d7 01       	movw	r26, r14
     a56:	6d 91       	ld	r22, X+
     a58:	7d 91       	ld	r23, X+
     a5a:	7d 01       	movw	r14, r26
     a5c:	76 95       	lsr	r23
     a5e:	67 95       	ror	r22
     a60:	76 95       	lsr	r23
     a62:	67 95       	ror	r22
     a64:	c8 01       	movw	r24, r16
     a66:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eeupd_byte_m32>
     a6a:	0f 5f       	subi	r16, 0xFF	; 255
     a6c:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		cetak_bil(isset(gSensA,SENS_A_LEFT_BIT),7,0,1);
		cetak_bil(isset(gSensA,SENS_A_MID_BIT),8,0,1);
		cetak_bil(isset(gSensA,SENS_A_RIGHT_BIT),9,0,1);
	}
	for (int i = 0; i < 19; i++)
     a6e:	b2 e0       	ldi	r27, 0x02	; 2
     a70:	0a 32       	cpi	r16, 0x2A	; 42
     a72:	1b 07       	cpc	r17, r27
     a74:	79 f7       	brne	.-34     	; 0xa54 <__stack+0x1f5>
	{
		EepromWrite(ADDRESS_BLOCK_SENSOR_REF+i,(gSensRef[i]/4));
	}
	
	gState = STATE_MENU;
     a76:	10 92 95 02 	sts	0x0295, r1
     a7a:	10 92 94 02 	sts	0x0294, r1
}
     a7e:	c4 5b       	subi	r28, 0xB4	; 180
     a80:	df 4f       	sbci	r29, 0xFF	; 255
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	de bf       	out	0x3e, r29	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	cd bf       	out	0x3d, r28	; 61
     a8c:	cf 91       	pop	r28
     a8e:	df 91       	pop	r29
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	bf 90       	pop	r11
     a9e:	af 90       	pop	r10
     aa0:	9f 90       	pop	r9
     aa2:	8f 90       	pop	r8
     aa4:	7f 90       	pop	r7
     aa6:	6f 90       	pop	r6
     aa8:	5f 90       	pop	r5
     aaa:	4f 90       	pop	r4
     aac:	3f 90       	pop	r3
     aae:	2f 90       	pop	r2
     ab0:	08 95       	ret

00000ab2 <Calibrate>:
		}
	}
}
void Calibrate()
{
	SensorCalibrate();
     ab2:	0e 94 ef 03 	call	0x7de	; 0x7de <SensorCalibrate>
}
     ab6:	08 95       	ret

00000ab8 <SensorRemap>:
	 //~ * 2 - 11
	 //~ * 3 - 9
	 //~ * 4 - 10
	 //~ * 
	 //~ */
}
     ab8:	08 95       	ret

00000aba <SaveCase>:




void SaveCase()
{
     aba:	1f 93       	push	r17
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
	eeprom_write_byte((uint8_t*)(ADDRESS_BLOCK_CASE_N),gCaseN);
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	60 91 91 02 	lds	r22, 0x0291
     ac8:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__eewr_byte_m32>
	for (uint8_t n = 1; n<=gCaseN; n++)
     acc:	11 e0       	ldi	r17, 0x01	; 1
     ace:	1c c0       	rjmp	.+56     	; 0xb08 <SaveCase+0x4e>
	{
		eeprom_write_byte((uint8_t*)(ADDRESS_BLOCK_CASE_H+n),gCaseH[n]);
     ad0:	c1 2f       	mov	r28, r17
     ad2:	d0 e0       	ldi	r29, 0x00	; 0
     ad4:	fe 01       	movw	r30, r28
     ad6:	e9 56       	subi	r30, 0x69	; 105
     ad8:	fd 4f       	sbci	r31, 0xFD	; 253
     ada:	ce 01       	movw	r24, r28
     adc:	03 96       	adiw	r24, 0x03	; 3
     ade:	60 81       	ld	r22, Z
     ae0:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__eewr_byte_m32>
		eeprom_write_byte((uint8_t*)(ADDRESS_BLOCK_CASE_L+n),gCaseL[n]);
     ae4:	fe 01       	movw	r30, r28
     ae6:	e2 5d       	subi	r30, 0xD2	; 210
     ae8:	fc 4f       	sbci	r31, 0xFC	; 252
     aea:	ce 01       	movw	r24, r28
     aec:	8c 96       	adiw	r24, 0x2c	; 44
     aee:	60 81       	ld	r22, Z
     af0:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__eewr_byte_m32>
		eeprom_write_byte((uint8_t*)(ADDRESS_BLOCK_CASE_V+n),gCaseV[n]);
     af4:	fe 01       	movw	r30, r28
     af6:	e4 50       	subi	r30, 0x04	; 4
     af8:	fd 4f       	sbci	r31, 0xFD	; 253
     afa:	ce 01       	movw	r24, r28
     afc:	8b 5a       	subi	r24, 0xAB	; 171
     afe:	9f 4f       	sbci	r25, 0xFF	; 255
     b00:	60 81       	ld	r22, Z
     b02:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__eewr_byte_m32>


void SaveCase()
{
	eeprom_write_byte((uint8_t*)(ADDRESS_BLOCK_CASE_N),gCaseN);
	for (uint8_t n = 1; n<=gCaseN; n++)
     b06:	1f 5f       	subi	r17, 0xFF	; 255
     b08:	80 91 91 02 	lds	r24, 0x0291
     b0c:	81 17       	cp	r24, r17
     b0e:	00 f7       	brcc	.-64     	; 0xad0 <SaveCase+0x16>
	{
		eeprom_write_byte((uint8_t*)(ADDRESS_BLOCK_CASE_H+n),gCaseH[n]);
		eeprom_write_byte((uint8_t*)(ADDRESS_BLOCK_CASE_L+n),gCaseL[n]);
		eeprom_write_byte((uint8_t*)(ADDRESS_BLOCK_CASE_V+n),gCaseV[n]);
	}
}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	08 95       	ret

00000b18 <LoadCase>:
void LoadCase()
{
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
	gCaseN = eeprom_read_byte((uint8_t*)(ADDRESS_BLOCK_CASE_N));
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
     b28:	08 2f       	mov	r16, r24
     b2a:	80 93 91 02 	sts	0x0291, r24
	for (uint8_t n = 1; n<=gCaseN; n++)
     b2e:	11 e0       	ldi	r17, 0x01	; 1
     b30:	1b c0       	rjmp	.+54     	; 0xb68 <LoadCase+0x50>
	{
		gCaseH[n] = eeprom_read_byte((uint8_t*)(ADDRESS_BLOCK_CASE_H+n));
     b32:	c1 2f       	mov	r28, r17
     b34:	d0 e0       	ldi	r29, 0x00	; 0
     b36:	ce 01       	movw	r24, r28
     b38:	03 96       	adiw	r24, 0x03	; 3
     b3a:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
     b3e:	fe 01       	movw	r30, r28
     b40:	e9 56       	subi	r30, 0x69	; 105
     b42:	fd 4f       	sbci	r31, 0xFD	; 253
     b44:	80 83       	st	Z, r24
		gCaseL[n] = eeprom_read_byte((uint8_t*)(ADDRESS_BLOCK_CASE_L+n));
     b46:	ce 01       	movw	r24, r28
     b48:	8c 96       	adiw	r24, 0x2c	; 44
     b4a:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
     b4e:	fe 01       	movw	r30, r28
     b50:	e2 5d       	subi	r30, 0xD2	; 210
     b52:	fc 4f       	sbci	r31, 0xFC	; 252
     b54:	80 83       	st	Z, r24
		gCaseV[n] = eeprom_read_byte((uint8_t*)(ADDRESS_BLOCK_CASE_V+n));
     b56:	ce 01       	movw	r24, r28
     b58:	8b 5a       	subi	r24, 0xAB	; 171
     b5a:	9f 4f       	sbci	r25, 0xFF	; 255
     b5c:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
     b60:	c4 50       	subi	r28, 0x04	; 4
     b62:	dd 4f       	sbci	r29, 0xFD	; 253
     b64:	88 83       	st	Y, r24
	}
}
void LoadCase()
{
	gCaseN = eeprom_read_byte((uint8_t*)(ADDRESS_BLOCK_CASE_N));
	for (uint8_t n = 1; n<=gCaseN; n++)
     b66:	1f 5f       	subi	r17, 0xFF	; 255
     b68:	01 17       	cp	r16, r17
     b6a:	18 f7       	brcc	.-58     	; 0xb32 <LoadCase+0x1a>
	{
		gCaseH[n] = eeprom_read_byte((uint8_t*)(ADDRESS_BLOCK_CASE_H+n));
		gCaseL[n] = eeprom_read_byte((uint8_t*)(ADDRESS_BLOCK_CASE_L+n));
		gCaseV[n] = eeprom_read_byte((uint8_t*)(ADDRESS_BLOCK_CASE_V+n));
	}
}
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	08 95       	ret

00000b76 <SetDefault>:
void SetDefault()
{
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
	
	gCaseN = 32;
     b7e:	80 e2       	ldi	r24, 0x20	; 32
     b80:	80 93 91 02 	sts	0x0291, r24
	gCaseH[ 0] = 0b10000000; gCaseL[ 0] = 0b00000000; gCaseV[ 0] = 15;
     b84:	70 e8       	ldi	r23, 0x80	; 128
     b86:	70 93 97 02 	sts	0x0297, r23
     b8a:	10 92 2e 03 	sts	0x032E, r1
     b8e:	8f e0       	ldi	r24, 0x0F	; 15
     b90:	80 93 fc 02 	sts	0x02FC, r24
	gCaseH[ 1] = 0b11000000; gCaseL[ 1] = 0b00000000; gCaseV[ 1] = 14;
     b94:	60 ec       	ldi	r22, 0xC0	; 192
     b96:	60 93 98 02 	sts	0x0298, r22
     b9a:	10 92 2f 03 	sts	0x032F, r1
     b9e:	4e e0       	ldi	r20, 0x0E	; 14
     ba0:	40 93 fd 02 	sts	0x02FD, r20
	gCaseH[ 2] = 0b11100000; gCaseL[ 2] = 0b00000000; gCaseV[ 2] = 13;
     ba4:	a0 ee       	ldi	r26, 0xE0	; 224
     ba6:	ea 2e       	mov	r14, r26
     ba8:	e0 92 99 02 	sts	0x0299, r14
     bac:	10 92 30 03 	sts	0x0330, r1
     bb0:	ed e0       	ldi	r30, 0x0D	; 13
     bb2:	e0 93 fe 02 	sts	0x02FE, r30
	gCaseH[ 3] = 0b01100000; gCaseL[ 3] = 0b00000000; gCaseV[ 3] = 12;
     bb6:	f0 e6       	ldi	r31, 0x60	; 96
     bb8:	ff 2e       	mov	r15, r31
     bba:	f0 92 9a 02 	sts	0x029A, r15
     bbe:	10 92 31 03 	sts	0x0331, r1
     bc2:	5c e0       	ldi	r21, 0x0C	; 12
     bc4:	50 93 ff 02 	sts	0x02FF, r21
	gCaseH[ 4] = 0b01110000; gCaseL[ 4] = 0b00000000; gCaseV[ 4] = 11;
     bc8:	00 e7       	ldi	r16, 0x70	; 112
     bca:	00 93 9b 02 	sts	0x029B, r16
     bce:	10 92 32 03 	sts	0x0332, r1
     bd2:	8b e0       	ldi	r24, 0x0B	; 11
     bd4:	80 93 00 03 	sts	0x0300, r24
	gCaseH[ 5] = 0b00110000; gCaseL[ 5] = 0b00000000; gCaseV[ 5] = 10;
     bd8:	10 e3       	ldi	r17, 0x30	; 48
     bda:	10 93 9c 02 	sts	0x029C, r17
     bde:	10 92 33 03 	sts	0x0333, r1
     be2:	8a e0       	ldi	r24, 0x0A	; 10
     be4:	80 93 01 03 	sts	0x0301, r24
	gCaseH[ 6] = 0b00111000; gCaseL[ 6] = 0b00000000; gCaseV[ 6] = 9;
     be8:	b8 e3       	ldi	r27, 0x38	; 56
     bea:	b0 93 9d 02 	sts	0x029D, r27
     bee:	10 92 34 03 	sts	0x0334, r1
     bf2:	89 e0       	ldi	r24, 0x09	; 9
     bf4:	80 93 02 03 	sts	0x0302, r24
	gCaseH[ 7] = 0b00011000; gCaseL[ 7] = 0b00000000; gCaseV[ 7] = 8;
     bf8:	a8 e1       	ldi	r26, 0x18	; 24
     bfa:	a0 93 9e 02 	sts	0x029E, r26
     bfe:	10 92 35 03 	sts	0x0335, r1
     c02:	88 e0       	ldi	r24, 0x08	; 8
     c04:	80 93 03 03 	sts	0x0303, r24
	gCaseH[ 8] = 0b00011100; gCaseL[ 8] = 0b00000000; gCaseV[ 8] = 7;
     c08:	fc e1       	ldi	r31, 0x1C	; 28
     c0a:	f0 93 9f 02 	sts	0x029F, r31
     c0e:	10 92 36 03 	sts	0x0336, r1
     c12:	27 e0       	ldi	r18, 0x07	; 7
     c14:	20 93 04 03 	sts	0x0304, r18
	gCaseH[ 9] = 0b00001100; gCaseL[ 9] = 0b00000000; gCaseV[ 9] = 6;
     c18:	50 93 a0 02 	sts	0x02A0, r21
     c1c:	10 92 37 03 	sts	0x0337, r1
     c20:	36 e0       	ldi	r19, 0x06	; 6
     c22:	30 93 05 03 	sts	0x0305, r19
	gCaseH[10] = 0b00001110; gCaseL[10] = 0b00000000; gCaseV[10] = 5;
     c26:	40 93 a1 02 	sts	0x02A1, r20
     c2a:	10 92 38 03 	sts	0x0338, r1
     c2e:	85 e0       	ldi	r24, 0x05	; 5
     c30:	80 93 06 03 	sts	0x0306, r24
	gCaseH[11] = 0b00000110; gCaseL[11] = 0b00000000; gCaseV[11] = 4;
     c34:	30 93 a2 02 	sts	0x02A2, r19
     c38:	10 92 39 03 	sts	0x0339, r1
     c3c:	94 e0       	ldi	r25, 0x04	; 4
     c3e:	90 93 07 03 	sts	0x0307, r25
	gCaseH[12] = 0b00000111; gCaseL[12] = 0b00000000; gCaseV[12] = 5;
     c42:	20 93 a3 02 	sts	0x02A3, r18
     c46:	10 92 3a 03 	sts	0x033A, r1
     c4a:	80 93 08 03 	sts	0x0308, r24
	gCaseH[13] = 0b00000011; gCaseL[13] = 0b00000000; gCaseV[13] = 2;
     c4e:	93 e0       	ldi	r25, 0x03	; 3
     c50:	90 93 a4 02 	sts	0x02A4, r25
     c54:	10 92 3b 03 	sts	0x033B, r1
     c58:	82 e0       	ldi	r24, 0x02	; 2
     c5a:	80 93 09 03 	sts	0x0309, r24
	gCaseH[14] = 0b00000011; gCaseL[14] = 0b10000000; gCaseV[14] = 0;
     c5e:	90 93 a5 02 	sts	0x02A5, r25
     c62:	70 93 3c 03 	sts	0x033C, r23
     c66:	10 92 0a 03 	sts	0x030A, r1
	gCaseH[15] = 0b00000001; gCaseL[15] = 0b10000000; gCaseV[15] = 0;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 a6 02 	sts	0x02A6, r24
     c70:	70 93 3d 03 	sts	0x033D, r23
     c74:	10 92 0b 03 	sts	0x030B, r1
	gCaseH[16] = 0b00000001; gCaseL[16] = 0b11000000; gCaseV[16] = 0;
     c78:	80 93 a7 02 	sts	0x02A7, r24
     c7c:	60 93 3e 03 	sts	0x033E, r22
     c80:	10 92 0c 03 	sts	0x030C, r1
	gCaseH[17] = 0b00000000; gCaseL[17] = 0b11000000; gCaseV[17] = -2;
     c84:	10 92 a8 02 	sts	0x02A8, r1
     c88:	60 93 3f 03 	sts	0x033F, r22
     c8c:	6e ef       	ldi	r22, 0xFE	; 254
     c8e:	60 93 0d 03 	sts	0x030D, r22
	gCaseH[18] = 0b00000000; gCaseL[18] = 0b11100000; gCaseV[18] = -5;
     c92:	10 92 a9 02 	sts	0x02A9, r1
     c96:	e0 92 40 03 	sts	0x0340, r14
     c9a:	6b ef       	ldi	r22, 0xFB	; 251
     c9c:	60 93 0e 03 	sts	0x030E, r22
	gCaseH[19] = 0b00000000; gCaseL[19] = 0b01100000; gCaseV[19] = -4;
     ca0:	10 92 aa 02 	sts	0x02AA, r1
     ca4:	f0 92 41 03 	sts	0x0341, r15
     ca8:	7c ef       	ldi	r23, 0xFC	; 252
     caa:	70 93 0f 03 	sts	0x030F, r23
	gCaseH[20] = 0b00000000; gCaseL[20] = 0b01110000; gCaseV[20] = -5;
     cae:	10 92 ab 02 	sts	0x02AB, r1
     cb2:	00 93 42 03 	sts	0x0342, r16
     cb6:	60 93 10 03 	sts	0x0310, r22
	gCaseH[21] = 0b00000000; gCaseL[21] = 0b00110000; gCaseV[21] = -6;
     cba:	10 92 ac 02 	sts	0x02AC, r1
     cbe:	10 93 43 03 	sts	0x0343, r17
     cc2:	6a ef       	ldi	r22, 0xFA	; 250
     cc4:	60 93 11 03 	sts	0x0311, r22
	gCaseH[22] = 0b00000000; gCaseL[22] = 0b00111000; gCaseV[22] = -7;
     cc8:	10 92 ad 02 	sts	0x02AD, r1
     ccc:	b0 93 44 03 	sts	0x0344, r27
     cd0:	69 ef       	ldi	r22, 0xF9	; 249
     cd2:	60 93 12 03 	sts	0x0312, r22
	gCaseH[23] = 0b00000000; gCaseL[23] = 0b00011000; gCaseV[23] = -8;
     cd6:	10 92 ae 02 	sts	0x02AE, r1
     cda:	a0 93 45 03 	sts	0x0345, r26
     cde:	68 ef       	ldi	r22, 0xF8	; 248
     ce0:	60 93 13 03 	sts	0x0313, r22
	gCaseH[24] = 0b00000000; gCaseL[24] = 0b00011100; gCaseV[24] = -9;
     ce4:	10 92 af 02 	sts	0x02AF, r1
     ce8:	f0 93 46 03 	sts	0x0346, r31
     cec:	67 ef       	ldi	r22, 0xF7	; 247
     cee:	60 93 14 03 	sts	0x0314, r22
	gCaseH[25] = 0b00000000; gCaseL[25] = 0b00001100; gCaseV[25] = -10;
     cf2:	10 92 b0 02 	sts	0x02B0, r1
     cf6:	50 93 47 03 	sts	0x0347, r21
     cfa:	56 ef       	ldi	r21, 0xF6	; 246
     cfc:	50 93 15 03 	sts	0x0315, r21
	gCaseH[26] = 0b00000000; gCaseL[26] = 0b00001110; gCaseV[26] = -11;
     d00:	10 92 b1 02 	sts	0x02B1, r1
     d04:	40 93 48 03 	sts	0x0348, r20
     d08:	45 ef       	ldi	r20, 0xF5	; 245
     d0a:	40 93 16 03 	sts	0x0316, r20
	gCaseH[27] = 0b00000000; gCaseL[27] = 0b00000110; gCaseV[27] = -12;
     d0e:	10 92 b2 02 	sts	0x02B2, r1
     d12:	30 93 49 03 	sts	0x0349, r19
     d16:	34 ef       	ldi	r19, 0xF4	; 244
     d18:	30 93 17 03 	sts	0x0317, r19
	gCaseH[28] = 0b00000000; gCaseL[28] = 0b00000111; gCaseV[28] = -13;
     d1c:	10 92 b3 02 	sts	0x02B3, r1
     d20:	20 93 4a 03 	sts	0x034A, r18
     d24:	23 ef       	ldi	r18, 0xF3	; 243
     d26:	20 93 18 03 	sts	0x0318, r18
	gCaseH[29] = 0b00000000; gCaseL[29] = 0b00000011; gCaseV[29] = -14;
     d2a:	10 92 b4 02 	sts	0x02B4, r1
     d2e:	90 93 4b 03 	sts	0x034B, r25
     d32:	92 ef       	ldi	r25, 0xF2	; 242
     d34:	90 93 19 03 	sts	0x0319, r25
	gCaseH[30] = 0b00000000; gCaseL[30] = 0b00000001; gCaseV[30] = -15;
     d38:	10 92 b5 02 	sts	0x02B5, r1
     d3c:	80 93 4c 03 	sts	0x034C, r24
     d40:	81 ef       	ldi	r24, 0xF1	; 241
     d42:	80 93 1a 03 	sts	0x031A, r24
	gCaseH[31] = 0b01111000; gCaseL[31] = 0b00000000; gCaseV[31] = 13;
     d46:	88 e7       	ldi	r24, 0x78	; 120
     d48:	80 93 b6 02 	sts	0x02B6, r24
     d4c:	10 92 4d 03 	sts	0x034D, r1
     d50:	e0 93 1b 03 	sts	0x031B, r30
	gCaseH[32] = 0b00000000; gCaseL[32] = 0b00011110; gCaseV[32] = -13;
     d54:	10 92 b7 02 	sts	0x02B7, r1
     d58:	8e e1       	ldi	r24, 0x1E	; 30
     d5a:	80 93 4e 03 	sts	0x034E, r24
     d5e:	20 93 1c 03 	sts	0x031C, r18
	//~ gCaseH[17] = 0b00000000; gCaseL[17] = 0b00000000; gCaseV[17] = 00;
	//~ gCaseH[18] = 0b00000000; gCaseL[18] = 0b00000000; gCaseV[18] = 00;
	//~ gCaseH[19] = 0b00000000; gCaseL[19] = 0b00000000; gCaseV[19] = 00;
	//~ gCaseH[20] = 0b00000000; gCaseL[20] = 0b00000000; gCaseV[20] = 00;
	//~ gCaseH[21] = 0b00000000; gCaseL[21] = 0b00000000; gCaseV[21] = 00;
}
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	ff 90       	pop	r15
     d68:	ef 90       	pop	r14
     d6a:	08 95       	ret

00000d6c <Init>:
		//~ _delay_ms(100);
	}
}

void Init()
{
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
	counter=0;
     d74:	10 92 8d 02 	sts	0x028D, r1
     d78:	10 92 8e 02 	sts	0x028E, r1
     d7c:	10 92 8f 02 	sts	0x028F, r1
     d80:	10 92 90 02 	sts	0x0290, r1
	SetDefault();
     d84:	0e 94 bb 05 	call	0xb76	; 0xb76 <SetDefault>
	LCDinit();
     d88:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <LCDinit>
	LCDclr();
     d8c:	0e 94 29 17 	call	0x2e52	; 0x2e52 <LCDclr>
	LCDGotoXY(0,0);
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
	LCDclr();
     d98:	0e 94 29 17 	call	0x2e52	; 0x2e52 <LCDclr>
	LCDGotoXY(0,0);
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
	initpwm();
     da4:	0e 94 8f 00 	call	0x11e	; 0x11e <initpwm>
	DDRD |= 0b00111100;
     da8:	81 b3       	in	r24, 0x11	; 17
     daa:	8c 63       	ori	r24, 0x3C	; 60
     dac:	81 bb       	out	0x11, r24	; 17
	DDRC=0b11100000;
     dae:	80 ee       	ldi	r24, 0xE0	; 224
     db0:	84 bb       	out	0x14, r24	; 20
	PORTC=0b00001111;
     db2:	8f e0       	ldi	r24, 0x0F	; 15
     db4:	85 bb       	out	0x15, r24	; 21
	DDRA=0b00111000;
     db6:	88 e3       	ldi	r24, 0x38	; 56
     db8:	8a bb       	out	0x1a, r24	; 26
	initadc();
     dba:	0e 94 94 00 	call	0x128	; 0x128 <initadc>
	gScrollNum = 1;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	80 93 d0 02 	sts	0x02D0, r24
	gDriveLastError=0;
     dc4:	10 92 93 02 	sts	0x0293, r1
	//~ gDriveLimit = 120;
	//~ gDriveSpeed = 60;
	//~ gDriveKP = 6;
	//~ gDriveKD = 9;
	
	gDriveLimit = 120;
     dc8:	88 e7       	ldi	r24, 0x78	; 120
     dca:	80 93 cc 02 	sts	0x02CC, r24
	gDriveSpeed = EepromRead(ADDRESS_BLOCK_DRIVE_SPEED);
     dce:	8b e2       	ldi	r24, 0x2B	; 43
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
     dd6:	80 93 92 02 	sts	0x0292, r24
	gDriveKP = EepromRead(ADDRESS_BLOCK_DRIVE_KP);
     dda:	8c e2       	ldi	r24, 0x2C	; 44
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
     de2:	80 93 cd 02 	sts	0x02CD, r24
     de6:	10 92 ce 02 	sts	0x02CE, r1
	gDriveKD = EepromRead(ADDRESS_BLOCK_DRIVE_KD);
     dea:	8d e2       	ldi	r24, 0x2D	; 45
     dec:	92 e0       	ldi	r25, 0x02	; 2
     dee:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
     df2:	80 93 d2 02 	sts	0x02D2, r24
     df6:	10 92 d3 02 	sts	0x02D3, r1
     dfa:	01 e6       	ldi	r16, 0x61	; 97
     dfc:	13 e0       	ldi	r17, 0x03	; 3
     dfe:	c7 e1       	ldi	r28, 0x17	; 23
     e00:	d2 e0       	ldi	r29, 0x02	; 2
	
	for (int i = 0; i < 19; i++)
	{
		gSensRef[i] = 4*EepromRead(ADDRESS_BLOCK_SENSOR_REF+i);
     e02:	ce 01       	movw	r24, r28
     e04:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	f8 01       	movw	r30, r16
     e14:	81 93       	st	Z+, r24
     e16:	91 93       	st	Z+, r25
     e18:	8f 01       	movw	r16, r30
     e1a:	21 96       	adiw	r28, 0x01	; 1
	gDriveLimit = 120;
	gDriveSpeed = EepromRead(ADDRESS_BLOCK_DRIVE_SPEED);
	gDriveKP = EepromRead(ADDRESS_BLOCK_DRIVE_KP);
	gDriveKD = EepromRead(ADDRESS_BLOCK_DRIVE_KD);
	
	for (int i = 0; i < 19; i++)
     e1c:	f2 e0       	ldi	r31, 0x02	; 2
     e1e:	ca 32       	cpi	r28, 0x2A	; 42
     e20:	df 07       	cpc	r29, r31
     e22:	79 f7       	brne	.-34     	; 0xe02 <Init+0x96>
	{
		gSensRef[i] = 4*EepromRead(ADDRESS_BLOCK_SENSOR_REF+i);
	}
}
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	08 95       	ret

00000e2e <SetMinim>:
	//~ gCaseH[21] = 0b00000000; gCaseL[21] = 0b00000000; gCaseV[21] = 00;
}
void SetMinim()
{
	
	gCaseN = 16;
     e2e:	80 e1       	ldi	r24, 0x10	; 16
     e30:	80 93 91 02 	sts	0x0291, r24
	gCaseH[ 0] = 0b10000000; gCaseL[ 0] = 0b00000000; gCaseV[ 0] = 15;
     e34:	e0 e8       	ldi	r30, 0x80	; 128
     e36:	e0 93 97 02 	sts	0x0297, r30
     e3a:	10 92 2e 03 	sts	0x032E, r1
     e3e:	8f e0       	ldi	r24, 0x0F	; 15
     e40:	80 93 fc 02 	sts	0x02FC, r24
	gCaseH[ 1] = 0b11000000; gCaseL[ 1] = 0b00000000; gCaseV[ 1] = 14;
     e44:	70 ec       	ldi	r23, 0xC0	; 192
     e46:	70 93 98 02 	sts	0x0298, r23
     e4a:	10 92 2f 03 	sts	0x032F, r1
     e4e:	8e e0       	ldi	r24, 0x0E	; 14
     e50:	80 93 fd 02 	sts	0x02FD, r24
	gCaseH[ 2] = 0b01100000; gCaseL[ 2] = 0b00000000; gCaseV[ 2] = 12;
     e54:	60 e6       	ldi	r22, 0x60	; 96
     e56:	60 93 99 02 	sts	0x0299, r22
     e5a:	10 92 30 03 	sts	0x0330, r1
     e5e:	9c e0       	ldi	r25, 0x0C	; 12
     e60:	90 93 fe 02 	sts	0x02FE, r25
	gCaseH[ 3] = 0b00110000; gCaseL[ 3] = 0b00000000; gCaseV[ 3] = 10;
     e64:	50 e3       	ldi	r21, 0x30	; 48
     e66:	50 93 9a 02 	sts	0x029A, r21
     e6a:	10 92 31 03 	sts	0x0331, r1
     e6e:	8a e0       	ldi	r24, 0x0A	; 10
     e70:	80 93 ff 02 	sts	0x02FF, r24
	gCaseH[ 4] = 0b00011000; gCaseL[ 4] = 0b00000000; gCaseV[ 4] = 8;
     e74:	48 e1       	ldi	r20, 0x18	; 24
     e76:	40 93 9b 02 	sts	0x029B, r20
     e7a:	10 92 32 03 	sts	0x0332, r1
     e7e:	88 e0       	ldi	r24, 0x08	; 8
     e80:	80 93 00 03 	sts	0x0300, r24
	gCaseH[ 5] = 0b00001100; gCaseL[ 5] = 0b00000000; gCaseV[ 5] = 6;
     e84:	90 93 9c 02 	sts	0x029C, r25
     e88:	10 92 33 03 	sts	0x0333, r1
     e8c:	86 e0       	ldi	r24, 0x06	; 6
     e8e:	80 93 01 03 	sts	0x0301, r24
	gCaseH[ 6] = 0b00000110; gCaseL[ 6] = 0b00000000; gCaseV[ 6] = 4;
     e92:	80 93 9d 02 	sts	0x029D, r24
     e96:	10 92 34 03 	sts	0x0334, r1
     e9a:	24 e0       	ldi	r18, 0x04	; 4
     e9c:	20 93 02 03 	sts	0x0302, r18
	gCaseH[ 7] = 0b00000011; gCaseL[ 7] = 0b00000000; gCaseV[ 7] = 2;
     ea0:	33 e0       	ldi	r19, 0x03	; 3
     ea2:	30 93 9e 02 	sts	0x029E, r19
     ea6:	10 92 35 03 	sts	0x0335, r1
     eaa:	22 e0       	ldi	r18, 0x02	; 2
     eac:	20 93 03 03 	sts	0x0303, r18
	gCaseH[ 8] = 0b00000001; gCaseL[ 8] = 0b10000000; gCaseV[ 8] = 0;
     eb0:	21 e0       	ldi	r18, 0x01	; 1
     eb2:	20 93 9f 02 	sts	0x029F, r18
     eb6:	e0 93 36 03 	sts	0x0336, r30
     eba:	10 92 04 03 	sts	0x0304, r1
	gCaseH[ 9] = 0b00000000; gCaseL[ 9] = 0b11000000; gCaseV[ 9] = -2;
     ebe:	10 92 a0 02 	sts	0x02A0, r1
     ec2:	70 93 37 03 	sts	0x0337, r23
     ec6:	7e ef       	ldi	r23, 0xFE	; 254
     ec8:	70 93 05 03 	sts	0x0305, r23
	gCaseH[10] = 0b00000000; gCaseL[10] = 0b01100000; gCaseV[10] = -4;
     ecc:	10 92 a1 02 	sts	0x02A1, r1
     ed0:	60 93 38 03 	sts	0x0338, r22
     ed4:	6c ef       	ldi	r22, 0xFC	; 252
     ed6:	60 93 06 03 	sts	0x0306, r22
	gCaseH[11] = 0b00000000; gCaseL[11] = 0b00110000; gCaseV[11] = -6;
     eda:	10 92 a2 02 	sts	0x02A2, r1
     ede:	50 93 39 03 	sts	0x0339, r21
     ee2:	5a ef       	ldi	r21, 0xFA	; 250
     ee4:	50 93 07 03 	sts	0x0307, r21
	gCaseH[12] = 0b00000000; gCaseL[12] = 0b00011000; gCaseV[12] = -8;
     ee8:	10 92 a3 02 	sts	0x02A3, r1
     eec:	40 93 3a 03 	sts	0x033A, r20
     ef0:	48 ef       	ldi	r20, 0xF8	; 248
     ef2:	40 93 08 03 	sts	0x0308, r20
	gCaseH[13] = 0b00000000; gCaseL[13] = 0b00001100; gCaseV[13] = -10;
     ef6:	10 92 a4 02 	sts	0x02A4, r1
     efa:	90 93 3b 03 	sts	0x033B, r25
     efe:	96 ef       	ldi	r25, 0xF6	; 246
     f00:	90 93 09 03 	sts	0x0309, r25
	gCaseH[14] = 0b00000000; gCaseL[14] = 0b00000110; gCaseV[14] = -12;
     f04:	10 92 a5 02 	sts	0x02A5, r1
     f08:	80 93 3c 03 	sts	0x033C, r24
     f0c:	84 ef       	ldi	r24, 0xF4	; 244
     f0e:	80 93 0a 03 	sts	0x030A, r24
	gCaseH[15] = 0b00000000; gCaseL[15] = 0b00000011; gCaseV[15] = -14;
     f12:	10 92 a6 02 	sts	0x02A6, r1
     f16:	30 93 3d 03 	sts	0x033D, r19
     f1a:	82 ef       	ldi	r24, 0xF2	; 242
     f1c:	80 93 0b 03 	sts	0x030B, r24
	gCaseH[16] = 0b00000000; gCaseL[16] = 0b00000001; gCaseV[16] = -15;
     f20:	10 92 a7 02 	sts	0x02A7, r1
     f24:	20 93 3e 03 	sts	0x033E, r18
     f28:	81 ef       	ldi	r24, 0xF1	; 241
     f2a:	80 93 0c 03 	sts	0x030C, r24
}
     f2e:	08 95       	ret

00000f30 <PIDGetError>:


uint8_t PIDGetError()
{
	///GET gError
	SensorReadDigital();
     f30:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
	for (uint8_t n = 0; n<=gCaseN; n++)
     f34:	50 91 91 02 	lds	r21, 0x0291
	{
		if (gSensH==gCaseH[n] && gSensL==gCaseL[n])
     f38:	40 91 d1 02 	lds	r20, 0x02D1
     f3c:	30 91 cf 02 	lds	r19, 0x02CF

uint8_t PIDGetError()
{
	///GET gError
	SensorReadDigital();
	for (uint8_t n = 0; n<=gCaseN; n++)
     f40:	20 e0       	ldi	r18, 0x00	; 0
	{
		if (gSensH==gCaseH[n] && gSensL==gCaseL[n])
     f42:	82 2f       	mov	r24, r18
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	fc 01       	movw	r30, r24
     f48:	e9 56       	subi	r30, 0x69	; 105
     f4a:	fd 4f       	sbci	r31, 0xFD	; 253
     f4c:	60 81       	ld	r22, Z
     f4e:	46 17       	cp	r20, r22
     f50:	71 f4       	brne	.+28     	; 0xf6e <PIDGetError+0x3e>
     f52:	fc 01       	movw	r30, r24
     f54:	e2 5d       	subi	r30, 0xD2	; 210
     f56:	fc 4f       	sbci	r31, 0xFC	; 252
     f58:	60 81       	ld	r22, Z
     f5a:	36 17       	cp	r19, r22
     f5c:	41 f4       	brne	.+16     	; 0xf6e <PIDGetError+0x3e>
		{
			gDriveError = gCaseV[n];
     f5e:	84 50       	subi	r24, 0x04	; 4
     f60:	9d 4f       	sbci	r25, 0xFD	; 253
     f62:	fc 01       	movw	r30, r24
     f64:	80 81       	ld	r24, Z
     f66:	80 93 60 03 	sts	0x0360, r24
			return 1;
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	08 95       	ret

uint8_t PIDGetError()
{
	///GET gError
	SensorReadDigital();
	for (uint8_t n = 0; n<=gCaseN; n++)
     f6e:	2f 5f       	subi	r18, 0xFF	; 255
     f70:	52 17       	cp	r21, r18
     f72:	38 f7       	brcc	.-50     	; 0xf42 <PIDGetError+0x12>
		{
			gDriveError = gCaseV[n];
			return 1;
		}
	}
	return 0;
     f74:	80 e0       	ldi	r24, 0x00	; 0
}
     f76:	08 95       	ret

00000f78 <DirForward>:
}

 //10 maju, 00 kanan, 01 mundur, 11 kiri
void DirForward()
{
	PORTD = (PORTD & 0b11110011) | 0b00000100;
     f78:	82 b3       	in	r24, 0x12	; 18
     f7a:	83 7f       	andi	r24, 0xF3	; 243
     f7c:	84 60       	ori	r24, 0x04	; 4
     f7e:	82 bb       	out	0x12, r24	; 18
	//~ LCDGotoXY(0,0);
	//~ LCDstring("maju",4);
}
     f80:	08 95       	ret

00000f82 <DirBackward>:
void DirBackward()
{
	PORTD = (PORTD & 0b11110011) | 0b00001000;
     f82:	82 b3       	in	r24, 0x12	; 18
     f84:	83 7f       	andi	r24, 0xF3	; 243
     f86:	88 60       	ori	r24, 0x08	; 8
     f88:	82 bb       	out	0x12, r24	; 18
	//~ LCDGotoXY(0,0);
	//~ LCDstring("mundur",6);
}
     f8a:	08 95       	ret

00000f8c <DirTurnLeft>:
void DirTurnLeft()
{
	PORTD = (PORTD & 0b11110011) | 0b00001100;
     f8c:	82 b3       	in	r24, 0x12	; 18
     f8e:	8c 60       	ori	r24, 0x0C	; 12
     f90:	82 bb       	out	0x12, r24	; 18
	//~ LCDGotoXY(0,0);
	//~ LCDstring("kiri",4);
}
     f92:	08 95       	ret

00000f94 <DirTurnRight>:
void DirTurnRight()
{
	PORTD = (PORTD & 0b11110011) | 0b00000000;
     f94:	82 b3       	in	r24, 0x12	; 18
     f96:	83 7f       	andi	r24, 0xF3	; 243
     f98:	82 bb       	out	0x12, r24	; 18
	//~ LCDGotoXY(0,0);
	//~ LCDstring("kanan",5);
}
     f9a:	08 95       	ret

00000f9c <PIDCalculateExecuteCustom>:
   OCR_RIGHT = pwm_ka;
   OCR_LEFT = pwm_ki;

}
void PIDCalculateExecuteCustom(uint8_t speed, uint8_t kp, uint8_t kd)
{
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
	int p,d;
	uint8_t varka,varki,pwm_ka,pwm_ki;
	p = kp * gDriveError;
     fa4:	a0 91 60 03 	lds	r26, 0x0360
     fa8:	2a 2f       	mov	r18, r26
     faa:	33 27       	eor	r19, r19
     fac:	27 fd       	sbrc	r18, 7
     fae:	30 95       	com	r19
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	62 9f       	mul	r22, r18
     fb4:	f0 01       	movw	r30, r0
     fb6:	63 9f       	mul	r22, r19
     fb8:	f0 0d       	add	r31, r0
     fba:	72 9f       	mul	r23, r18
     fbc:	f0 0d       	add	r31, r0
     fbe:	11 24       	eor	r1, r1
	d = kd * (gDriveError - gDriveLastError);
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	60 91 93 02 	lds	r22, 0x0293
     fc6:	77 27       	eor	r23, r23
     fc8:	67 fd       	sbrc	r22, 7
     fca:	70 95       	com	r23
     fcc:	e9 01       	movw	r28, r18
     fce:	c6 1b       	sub	r28, r22
     fd0:	d7 0b       	sbc	r29, r23
     fd2:	4c 9f       	mul	r20, r28
     fd4:	90 01       	movw	r18, r0
     fd6:	4d 9f       	mul	r20, r29
     fd8:	30 0d       	add	r19, r0
     fda:	5c 9f       	mul	r21, r28
     fdc:	30 0d       	add	r19, r0
     fde:	11 24       	eor	r1, r1
	gDriveSpeedLeft = speed - p - d;
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	ac 01       	movw	r20, r24
     fe4:	4e 1b       	sub	r20, r30
     fe6:	5f 0b       	sbc	r21, r31
     fe8:	42 1b       	sub	r20, r18
     fea:	53 0b       	sbc	r21, r19
     fec:	50 93 ca 02 	sts	0x02CA, r21
     ff0:	40 93 c9 02 	sts	0x02C9, r20
	gDriveSpeedRight = speed + p + d;
     ff4:	e8 0f       	add	r30, r24
     ff6:	f9 1f       	adc	r31, r25
     ff8:	e2 0f       	add	r30, r18
     ffa:	f3 1f       	adc	r31, r19
     ffc:	f0 93 d5 02 	sts	0x02D5, r31
    1000:	e0 93 d4 02 	sts	0x02D4, r30
	
	if (gDriveSpeedRight>gDriveLimit)
    1004:	20 91 cc 02 	lds	r18, 0x02CC
    1008:	82 2f       	mov	r24, r18
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	8e 17       	cp	r24, r30
    100e:	9f 07       	cpc	r25, r31
    1010:	14 f4       	brge	.+4      	; 0x1016 <PIDCalculateExecuteCustom+0x7a>
	{
		varka = gDriveSpeedRight - gDriveLimit;
		varka = gDriveLimit;
    1012:	32 2f       	mov	r19, r18
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <PIDCalculateExecuteCustom+0x7c>
	}
	else
	{
		varka = 0;
    1016:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	if (gDriveSpeedLeft>gDriveLimit)
    1018:	84 17       	cp	r24, r20
    101a:	95 07       	cpc	r25, r21
    101c:	0c f0       	brlt	.+2      	; 0x1020 <PIDCalculateExecuteCustom+0x84>
		varki = gDriveSpeedLeft - gDriveLimit;
		varki = gDriveLimit;
	}
	else
	{
		varki = 0;
    101e:	20 e0       	ldi	r18, 0x00	; 0
	}
	
   pwm_ka = gDriveSpeedRight - varki;
    1020:	0e 2f       	mov	r16, r30
    1022:	02 1b       	sub	r16, r18
   pwm_ki = gDriveSpeedLeft  - varka;                           
    1024:	14 2f       	mov	r17, r20
    1026:	13 1b       	sub	r17, r19
   //~ pwm_ka = gDriveSpeedRight;// - varki;
   //~ pwm_ki = gDriveSpeedLeft ;// - varka;                           

   gDriveLastError = gDriveError; 
    1028:	a0 93 93 02 	sts	0x0293, r26
   /// FOLLOWING LINE VARIABLES IS TO BE RECONSIDERED 
   if ((gDriveSpeedLeft>=0)&&(gDriveSpeedRight>=0))	
    102c:	57 fd       	sbrc	r21, 7
    102e:	04 c0       	rjmp	.+8      	; 0x1038 <PIDCalculateExecuteCustom+0x9c>
    1030:	f7 fd       	sbrc	r31, 7
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <PIDCalculateExecuteCustom+0x9c>
   {
	   DirForward();
    1034:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
   }
   if ((gDriveSpeedLeft>=0)&&(gDriveSpeedRight<0 ))	
    1038:	40 91 c9 02 	lds	r20, 0x02C9
    103c:	50 91 ca 02 	lds	r21, 0x02CA
    1040:	57 fd       	sbrc	r21, 7
    1042:	08 c0       	rjmp	.+16     	; 0x1054 <PIDCalculateExecuteCustom+0xb8>
    1044:	40 91 d4 02 	lds	r20, 0x02D4
    1048:	50 91 d5 02 	lds	r21, 0x02D5
    104c:	57 ff       	sbrs	r21, 7
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <PIDCalculateExecuteCustom+0xb8>
   {
	   DirTurnRight();
    1050:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	   //~ pwm_ka = varki - gDriveSpeedRight;
   }
   if ((gDriveSpeedLeft<0)&&(gDriveSpeedRight>=0 ))	
    1054:	40 91 c9 02 	lds	r20, 0x02C9
    1058:	50 91 ca 02 	lds	r21, 0x02CA
    105c:	57 ff       	sbrs	r21, 7
    105e:	08 c0       	rjmp	.+16     	; 0x1070 <PIDCalculateExecuteCustom+0xd4>
    1060:	40 91 d4 02 	lds	r20, 0x02D4
    1064:	50 91 d5 02 	lds	r21, 0x02D5
    1068:	57 fd       	sbrc	r21, 7
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <PIDCalculateExecuteCustom+0xd4>
   {
	   DirTurnLeft();
    106c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	   //~ pwm_ki = varka - gDriveSpeedLeft;
   }
   if (pwm_ka>gDriveLimit)
    1070:	90 91 cc 02 	lds	r25, 0x02CC
   }
   if (pwm_ki>gDriveLimit)
   {
	   pwm_ki = gDriveLimit;
   }
   OCR_RIGHT = pwm_ka;
    1074:	90 17       	cp	r25, r16
    1076:	08 f4       	brcc	.+2      	; 0x107a <PIDCalculateExecuteCustom+0xde>
    1078:	09 2f       	mov	r16, r25
    107a:	20 2f       	mov	r18, r16
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	39 bd       	out	0x29, r19	; 41
    1080:	28 bd       	out	0x28, r18	; 40
   OCR_LEFT = pwm_ki;
    1082:	91 17       	cp	r25, r17
    1084:	08 f4       	brcc	.+2      	; 0x1088 <PIDCalculateExecuteCustom+0xec>
    1086:	19 2f       	mov	r17, r25
    1088:	81 2f       	mov	r24, r17
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	9b bd       	out	0x2b, r25	; 43
    108e:	8a bd       	out	0x2a, r24	; 42

}
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	08 95       	ret

0000109a <PIDCalculateExecute>:
	}
	return 0;
}

void PIDCalculateExecute()
{
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
	int p,d;
	uint8_t varka,varki,pwm_ka,pwm_ki;
	p = gDriveKP * gDriveError;
    109e:	e0 91 60 03 	lds	r30, 0x0360
    10a2:	8e 2f       	mov	r24, r30
    10a4:	99 27       	eor	r25, r25
    10a6:	87 fd       	sbrc	r24, 7
    10a8:	90 95       	com	r25
    10aa:	20 91 cd 02 	lds	r18, 0x02CD
    10ae:	30 91 ce 02 	lds	r19, 0x02CE
    10b2:	82 9f       	mul	r24, r18
    10b4:	b0 01       	movw	r22, r0
    10b6:	83 9f       	mul	r24, r19
    10b8:	70 0d       	add	r23, r0
    10ba:	92 9f       	mul	r25, r18
    10bc:	70 0d       	add	r23, r0
    10be:	11 24       	eor	r1, r1
	d = gDriveKD * (gDriveError - gDriveLastError);
    10c0:	20 91 93 02 	lds	r18, 0x0293
    10c4:	33 27       	eor	r19, r19
    10c6:	27 fd       	sbrc	r18, 7
    10c8:	30 95       	com	r19
    10ca:	82 1b       	sub	r24, r18
    10cc:	93 0b       	sbc	r25, r19
    10ce:	20 91 d2 02 	lds	r18, 0x02D2
    10d2:	30 91 d3 02 	lds	r19, 0x02D3
    10d6:	82 9f       	mul	r24, r18
    10d8:	a0 01       	movw	r20, r0
    10da:	83 9f       	mul	r24, r19
    10dc:	50 0d       	add	r21, r0
    10de:	92 9f       	mul	r25, r18
    10e0:	50 0d       	add	r21, r0
    10e2:	11 24       	eor	r1, r1
	gDriveSpeedLeft = gDriveSpeed - p - d;
    10e4:	80 91 92 02 	lds	r24, 0x0292
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	9c 01       	movw	r18, r24
    10ec:	26 1b       	sub	r18, r22
    10ee:	37 0b       	sbc	r19, r23
    10f0:	24 1b       	sub	r18, r20
    10f2:	35 0b       	sbc	r19, r21
    10f4:	30 93 ca 02 	sts	0x02CA, r19
    10f8:	20 93 c9 02 	sts	0x02C9, r18
	gDriveSpeedRight = gDriveSpeed + p + d;
    10fc:	86 0f       	add	r24, r22
    10fe:	97 1f       	adc	r25, r23
    1100:	84 0f       	add	r24, r20
    1102:	95 1f       	adc	r25, r21
    1104:	90 93 d5 02 	sts	0x02D5, r25
    1108:	80 93 d4 02 	sts	0x02D4, r24
	
	if (gDriveSpeedRight>gDriveLimit)
    110c:	60 91 cc 02 	lds	r22, 0x02CC
    1110:	46 2f       	mov	r20, r22
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	48 17       	cp	r20, r24
    1116:	59 07       	cpc	r21, r25
    1118:	14 f4       	brge	.+4      	; 0x111e <PIDCalculateExecute+0x84>
	{
		varka = gDriveSpeedRight - gDriveLimit;
		varka = gDriveLimit;
    111a:	76 2f       	mov	r23, r22
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <PIDCalculateExecute+0x86>
	}
	else
	{
		varka = 0;
    111e:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	if (gDriveSpeedLeft>gDriveLimit)
    1120:	42 17       	cp	r20, r18
    1122:	53 07       	cpc	r21, r19
    1124:	0c f0       	brlt	.+2      	; 0x1128 <PIDCalculateExecute+0x8e>
		varki = gDriveSpeedLeft - gDriveLimit;
		varki = gDriveLimit;
	}
	else
	{
		varki = 0;
    1126:	60 e0       	ldi	r22, 0x00	; 0
	}
	
   pwm_ka = gDriveSpeedRight - varki;
    1128:	08 2f       	mov	r16, r24
    112a:	06 1b       	sub	r16, r22
   pwm_ki = gDriveSpeedLeft  - varka;                           
    112c:	12 2f       	mov	r17, r18
    112e:	17 1b       	sub	r17, r23
   //~ pwm_ka = gDriveSpeedRight;// - varki;
   //~ pwm_ki = gDriveSpeedLeft ;// - varka;                           

   gDriveLastError = gDriveError; 
    1130:	e0 93 93 02 	sts	0x0293, r30
   if ((gDriveSpeedLeft<0)&&(gDriveSpeedRight>=0 ))	
   {
	   DirTurnLeft();
	   //~ gDriveSpeedLeft = abs(gDriveSpeedLeft); 	//? courtesy joe
   }*/
   if ((gDriveSpeedLeft>=0)&&(gDriveSpeedRight>=0))	
    1134:	37 fd       	sbrc	r19, 7
    1136:	04 c0       	rjmp	.+8      	; 0x1140 <PIDCalculateExecute+0xa6>
    1138:	97 fd       	sbrc	r25, 7
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <PIDCalculateExecute+0xa6>
   {
	   DirForward();
    113c:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
   }
   if ((gDriveSpeedLeft>=0)&&(gDriveSpeedRight<0 ))	
    1140:	40 91 c9 02 	lds	r20, 0x02C9
    1144:	50 91 ca 02 	lds	r21, 0x02CA
    1148:	57 fd       	sbrc	r21, 7
    114a:	08 c0       	rjmp	.+16     	; 0x115c <PIDCalculateExecute+0xc2>
    114c:	40 91 d4 02 	lds	r20, 0x02D4
    1150:	50 91 d5 02 	lds	r21, 0x02D5
    1154:	57 ff       	sbrs	r21, 7
    1156:	02 c0       	rjmp	.+4      	; 0x115c <PIDCalculateExecute+0xc2>
   {
	   DirTurnRight();
    1158:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	   //~ pwm_ka = varki - gDriveSpeedRight;
   }
   if ((gDriveSpeedLeft<0)&&(gDriveSpeedRight>=0 ))	
    115c:	40 91 c9 02 	lds	r20, 0x02C9
    1160:	50 91 ca 02 	lds	r21, 0x02CA
    1164:	57 ff       	sbrs	r21, 7
    1166:	08 c0       	rjmp	.+16     	; 0x1178 <PIDCalculateExecute+0xde>
    1168:	40 91 d4 02 	lds	r20, 0x02D4
    116c:	50 91 d5 02 	lds	r21, 0x02D5
    1170:	57 fd       	sbrc	r21, 7
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <PIDCalculateExecute+0xde>
   {
	   DirTurnLeft();
    1174:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	   //~ pwm_ki = varka - gDriveSpeedLeft;
   }
   if (pwm_ka>gDriveLimit)
    1178:	90 91 cc 02 	lds	r25, 0x02CC
   }
   if (pwm_ki>gDriveLimit)
   {
	   pwm_ki = gDriveLimit;
   }
   OCR_RIGHT = pwm_ka;
    117c:	90 17       	cp	r25, r16
    117e:	08 f4       	brcc	.+2      	; 0x1182 <PIDCalculateExecute+0xe8>
    1180:	09 2f       	mov	r16, r25
    1182:	20 2f       	mov	r18, r16
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	39 bd       	out	0x29, r19	; 41
    1188:	28 bd       	out	0x28, r18	; 40
   OCR_LEFT = pwm_ki;
    118a:	91 17       	cp	r25, r17
    118c:	08 f4       	brcc	.+2      	; 0x1190 <PIDCalculateExecute+0xf6>
    118e:	19 2f       	mov	r17, r25
    1190:	81 2f       	mov	r24, r17
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9b bd       	out	0x2b, r25	; 43
    1196:	8a bd       	out	0x2a, r24	; 42

}
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	08 95       	ret

0000119e <RunOnce>:
	OCR1B=0;
	gState = STATE_MENU;
}

void RunOnce(uint8_t speed, uint8_t kp, uint8_t kd)
{
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	08 2f       	mov	r16, r24
    11aa:	16 2f       	mov	r17, r22
    11ac:	f4 2e       	mov	r15, r20
	counter++;
    11ae:	20 91 8d 02 	lds	r18, 0x028D
    11b2:	30 91 8e 02 	lds	r19, 0x028E
    11b6:	40 91 8f 02 	lds	r20, 0x028F
    11ba:	50 91 90 02 	lds	r21, 0x0290
    11be:	2f 5f       	subi	r18, 0xFF	; 255
    11c0:	3f 4f       	sbci	r19, 0xFF	; 255
    11c2:	4f 4f       	sbci	r20, 0xFF	; 255
    11c4:	5f 4f       	sbci	r21, 0xFF	; 255
    11c6:	20 93 8d 02 	sts	0x028D, r18
    11ca:	30 93 8e 02 	sts	0x028E, r19
    11ce:	40 93 8f 02 	sts	0x028F, r20
    11d2:	50 93 90 02 	sts	0x0290, r21
	if ((gSensH==0)&&(gSensL==0))
    11d6:	80 91 d1 02 	lds	r24, 0x02D1
    11da:	88 23       	and	r24, r24
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <RunOnce+0x42>
    11de:	4a c0       	rjmp	.+148    	; 0x1274 <RunOnce+0xd6>
    11e0:	80 91 cf 02 	lds	r24, 0x02CF
    11e4:	88 23       	and	r24, r24
    11e6:	09 f0       	breq	.+2      	; 0x11ea <RunOnce+0x4c>
    11e8:	45 c0       	rjmp	.+138    	; 0x1274 <RunOnce+0xd6>
	{
		if (isset(gSensA,SENS_A_LEFT_BIT) && isclear(gSensA,SENS_A_RIGHT_BIT))
    11ea:	80 91 87 03 	lds	r24, 0x0387
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    11f4:	88 23       	and	r24, r24
    11f6:	e1 f0       	breq	.+56     	; 0x1230 <RunOnce+0x92>
    11f8:	80 91 87 03 	lds	r24, 0x0387
    11fc:	61 e0       	ldi	r22, 0x01	; 1
    11fe:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
    1202:	88 23       	and	r24, r24
    1204:	51 f4       	brne	.+20     	; 0x121a <RunOnce+0x7c>
    1206:	14 c0       	rjmp	.+40     	; 0x1230 <RunOnce+0x92>
		{
			while ((gSensL==0)&&(gSensH==0))
			{
				SensorReadDigital();
    1208:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
				DirTurnLeft();
    120c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1210:	d9 bd       	out	0x29, r29	; 41
    1212:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1214:	db bd       	out	0x2b, r29	; 43
    1216:	ca bd       	out	0x2a, r28	; 42
    1218:	02 c0       	rjmp	.+4      	; 0x121e <RunOnce+0x80>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    121a:	ce e1       	ldi	r28, 0x1E	; 30
    121c:	d0 e0       	ldi	r29, 0x00	; 0
	counter++;
	if ((gSensH==0)&&(gSensL==0))
	{
		if (isset(gSensA,SENS_A_LEFT_BIT) && isclear(gSensA,SENS_A_RIGHT_BIT))
		{
			while ((gSensL==0)&&(gSensH==0))
    121e:	80 91 cf 02 	lds	r24, 0x02CF
    1222:	88 23       	and	r24, r24
    1224:	39 f5       	brne	.+78     	; 0x1274 <RunOnce+0xd6>
    1226:	80 91 d1 02 	lds	r24, 0x02D1
    122a:	88 23       	and	r24, r24
    122c:	69 f3       	breq	.-38     	; 0x1208 <RunOnce+0x6a>
    122e:	22 c0       	rjmp	.+68     	; 0x1274 <RunOnce+0xd6>
				SensorReadDigital();
				DirTurnLeft();
				DriveMove(30,30);
			}
		}
		else if (isset(gSensA,SENS_A_RIGHT_BIT) && isclear(gSensA,SENS_A_LEFT_BIT))
    1230:	80 91 87 03 	lds	r24, 0x0387
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    123a:	88 23       	and	r24, r24
    123c:	d9 f0       	breq	.+54     	; 0x1274 <RunOnce+0xd6>
    123e:	80 91 87 03 	lds	r24, 0x0387
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
    1248:	88 23       	and	r24, r24
    124a:	51 f4       	brne	.+20     	; 0x1260 <RunOnce+0xc2>
    124c:	13 c0       	rjmp	.+38     	; 0x1274 <RunOnce+0xd6>
		{
			while ((gSensL==0)&&(gSensH==0))
			{
				SensorReadDigital();
    124e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
				DirTurnRight();
    1252:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1256:	d9 bd       	out	0x29, r29	; 41
    1258:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    125a:	db bd       	out	0x2b, r29	; 43
    125c:	ca bd       	out	0x2a, r28	; 42
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <RunOnce+0xc6>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1260:	ce e1       	ldi	r28, 0x1E	; 30
    1262:	d0 e0       	ldi	r29, 0x00	; 0
				DriveMove(30,30);
			}
		}
		else if (isset(gSensA,SENS_A_RIGHT_BIT) && isclear(gSensA,SENS_A_LEFT_BIT))
		{
			while ((gSensL==0)&&(gSensH==0))
    1264:	80 91 cf 02 	lds	r24, 0x02CF
    1268:	88 23       	and	r24, r24
    126a:	21 f4       	brne	.+8      	; 0x1274 <RunOnce+0xd6>
    126c:	80 91 d1 02 	lds	r24, 0x02D1
    1270:	88 23       	and	r24, r24
    1272:	69 f3       	breq	.-38     	; 0x124e <RunOnce+0xb0>
				DirTurnRight();
				DriveMove(30,30);
			}
		}
	}
	if (PIDGetError())	PIDCalculateExecuteCustom(speed,kp,kd);
    1274:	0e 94 98 07 	call	0xf30	; 0xf30 <PIDGetError>
    1278:	88 23       	and	r24, r24
    127a:	31 f0       	breq	.+12     	; 0x1288 <RunOnce+0xea>
    127c:	80 2f       	mov	r24, r16
    127e:	61 2f       	mov	r22, r17
    1280:	4f 2d       	mov	r20, r15
    1282:	0e 94 ce 07 	call	0xf9c	; 0xf9c <PIDCalculateExecuteCustom>
    1286:	08 c0       	rjmp	.+16     	; 0x1298 <RunOnce+0xfa>
	else //if ((gSensH==0) && (gSensL==0))
	{
		DirForward();
    1288:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
		OCR1A=40;
    128c:	88 e2       	ldi	r24, 0x28	; 40
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	9b bd       	out	0x2b, r25	; 43
    1292:	8a bd       	out	0x2a, r24	; 42
		OCR1B=40;
    1294:	99 bd       	out	0x29, r25	; 41
    1296:	88 bd       	out	0x28, r24	; 40
	}
}
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	08 95       	ret

000012a4 <RunC02ke03>:
	}
	gCaseN = cnum;
	counter=0;
}
void RunC02ke03()
{
    12a4:	1f 93       	push	r17
	uint8_t cnum;
	cnum = gCaseN;
    12a6:	10 91 91 02 	lds	r17, 0x0291
	gCaseN = 30;
    12aa:	8e e1       	ldi	r24, 0x1E	; 30
    12ac:	80 93 91 02 	sts	0x0291, r24
	counter=0;
    12b0:	10 92 8d 02 	sts	0x028D, r1
    12b4:	10 92 8e 02 	sts	0x028E, r1
    12b8:	10 92 8f 02 	sts	0x028F, r1
    12bc:	10 92 90 02 	sts	0x0290, r1
	SensorReadDigital();
    12c0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
	while(counter<=800)
    12c4:	08 c0       	rjmp	.+16     	; 0x12d6 <RunC02ke03+0x32>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
    12c6:	80 91 92 02 	lds	r24, 0x0292
    12ca:	60 91 cd 02 	lds	r22, 0x02CD
    12ce:	40 91 d2 02 	lds	r20, 0x02D2
    12d2:	0e 94 cf 08 	call	0x119e	; 0x119e <RunOnce>
	uint8_t cnum;
	cnum = gCaseN;
	gCaseN = 30;
	counter=0;
	SensorReadDigital();
	while(counter<=800)
    12d6:	80 91 8d 02 	lds	r24, 0x028D
    12da:	90 91 8e 02 	lds	r25, 0x028E
    12de:	a0 91 8f 02 	lds	r26, 0x028F
    12e2:	b0 91 90 02 	lds	r27, 0x0290
    12e6:	81 32       	cpi	r24, 0x21	; 33
    12e8:	23 e0       	ldi	r18, 0x03	; 3
    12ea:	92 07       	cpc	r25, r18
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	a2 07       	cpc	r26, r18
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	b2 07       	cpc	r27, r18
    12f4:	40 f3       	brcs	.-48     	; 0x12c6 <RunC02ke03+0x22>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
	}
	gCaseN = cnum;
    12f6:	10 93 91 02 	sts	0x0291, r17
	counter=0;
    12fa:	10 92 8d 02 	sts	0x028D, r1
    12fe:	10 92 8e 02 	sts	0x028E, r1
    1302:	10 92 8f 02 	sts	0x028F, r1
    1306:	10 92 90 02 	sts	0x0290, r1
}
    130a:	1f 91       	pop	r17
    130c:	08 95       	ret

0000130e <RunC01ke02>:
	
	DriveMove(0,0);while(ButtonIsNotPressed());
	
}
void RunC01ke02()
{
    130e:	1f 93       	push	r17
	uint8_t cnum;
	cnum = gCaseN;
    1310:	10 91 91 02 	lds	r17, 0x0291
	gCaseN = 36;
    1314:	84 e2       	ldi	r24, 0x24	; 36
    1316:	80 93 91 02 	sts	0x0291, r24
	counter=0;
    131a:	10 92 8d 02 	sts	0x028D, r1
    131e:	10 92 8e 02 	sts	0x028E, r1
    1322:	10 92 8f 02 	sts	0x028F, r1
    1326:	10 92 90 02 	sts	0x0290, r1
	SensorReadDigital();
    132a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
	while(counter<=3200)
    132e:	08 c0       	rjmp	.+16     	; 0x1340 <RunC01ke02+0x32>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
    1330:	80 91 92 02 	lds	r24, 0x0292
    1334:	60 91 cd 02 	lds	r22, 0x02CD
    1338:	40 91 d2 02 	lds	r20, 0x02D2
    133c:	0e 94 cf 08 	call	0x119e	; 0x119e <RunOnce>
	uint8_t cnum;
	cnum = gCaseN;
	gCaseN = 36;
	counter=0;
	SensorReadDigital();
	while(counter<=3200)
    1340:	80 91 8d 02 	lds	r24, 0x028D
    1344:	90 91 8e 02 	lds	r25, 0x028E
    1348:	a0 91 8f 02 	lds	r26, 0x028F
    134c:	b0 91 90 02 	lds	r27, 0x0290
    1350:	81 38       	cpi	r24, 0x81	; 129
    1352:	2c e0       	ldi	r18, 0x0C	; 12
    1354:	92 07       	cpc	r25, r18
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	a2 07       	cpc	r26, r18
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	b2 07       	cpc	r27, r18
    135e:	40 f3       	brcs	.-48     	; 0x1330 <RunC01ke02+0x22>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
	}
	gCaseN = cnum;
    1360:	10 93 91 02 	sts	0x0291, r17
	counter=0;
    1364:	10 92 8d 02 	sts	0x028D, r1
    1368:	10 92 8e 02 	sts	0x028E, r1
    136c:	10 92 8f 02 	sts	0x028F, r1
    1370:	10 92 90 02 	sts	0x0290, r1
}
    1374:	1f 91       	pop	r17
    1376:	08 95       	ret

00001378 <RunProgram>:
		RunOnce(30,3,gDriveKD);
	}
}
void RunProgram()
{
	counter=0;
    1378:	10 92 8d 02 	sts	0x028D, r1
    137c:	10 92 8e 02 	sts	0x028E, r1
    1380:	10 92 8f 02 	sts	0x028F, r1
    1384:	10 92 90 02 	sts	0x0290, r1
	SensorReadDigital();
    1388:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
	while (PIDGetError() && (counter<50))
    138c:	1f c0       	rjmp	.+62     	; 0x13cc <RunProgram+0x54>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
    138e:	80 91 92 02 	lds	r24, 0x0292
    1392:	60 91 cd 02 	lds	r22, 0x02CD
    1396:	40 91 d2 02 	lds	r20, 0x02D2
    139a:	0e 94 cf 08 	call	0x119e	; 0x119e <RunOnce>
		if (!(PIDGetError()))
    139e:	0e 94 98 07 	call	0xf30	; 0xf30 <PIDGetError>
    13a2:	88 23       	and	r24, r24
    13a4:	99 f4       	brne	.+38     	; 0x13cc <RunProgram+0x54>
			counter++;
    13a6:	80 91 8d 02 	lds	r24, 0x028D
    13aa:	90 91 8e 02 	lds	r25, 0x028E
    13ae:	a0 91 8f 02 	lds	r26, 0x028F
    13b2:	b0 91 90 02 	lds	r27, 0x0290
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	a1 1d       	adc	r26, r1
    13ba:	b1 1d       	adc	r27, r1
    13bc:	80 93 8d 02 	sts	0x028D, r24
    13c0:	90 93 8e 02 	sts	0x028E, r25
    13c4:	a0 93 8f 02 	sts	0x028F, r26
    13c8:	b0 93 90 02 	sts	0x0290, r27
}
void RunProgram()
{
	counter=0;
	SensorReadDigital();
	while (PIDGetError() && (counter<50))
    13cc:	0e 94 98 07 	call	0xf30	; 0xf30 <PIDGetError>
    13d0:	88 23       	and	r24, r24
    13d2:	69 f0       	breq	.+26     	; 0x13ee <RunProgram+0x76>
    13d4:	80 91 8d 02 	lds	r24, 0x028D
    13d8:	90 91 8e 02 	lds	r25, 0x028E
    13dc:	a0 91 8f 02 	lds	r26, 0x028F
    13e0:	b0 91 90 02 	lds	r27, 0x0290
    13e4:	82 33       	cpi	r24, 0x32	; 50
    13e6:	91 05       	cpc	r25, r1
    13e8:	a1 05       	cpc	r26, r1
    13ea:	b1 05       	cpc	r27, r1
    13ec:	80 f2       	brcs	.-96     	; 0x138e <RunProgram+0x16>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    13ee:	19 bc       	out	0x29, r1	; 41
    13f0:	18 bc       	out	0x28, r1	; 40
	OCR_LEFT = pwm_ki;
    13f2:	1b bc       	out	0x2b, r1	; 43
    13f4:	1a bc       	out	0x2a, r1	; 42
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
		if (!(PIDGetError()))
			counter++;
	}
	DriveMove(0,0);
	while(ButtonIsNotPressed());
    13f6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ButtonIsNotPressed>
    13fa:	88 23       	and	r24, r24
    13fc:	e1 f7       	brne	.-8      	; 0x13f6 <RunProgram+0x7e>
}
    13fe:	08 95       	ret

00001400 <RunWhileNormal>:
void RunWhileNormal(uint8_t sampling_limit)
{
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	c8 2e       	mov	r12, r24
	}
	DriveMove(0,0);
	counter=0;
	
	SettingDebugPrintlog("LOG RUNWHILE ERR",log);
}
    141a:	ad b6       	in	r10, 0x3d	; 61
    141c:	be b6       	in	r11, 0x3e	; 62
	DriveMove(0,0);
	while(ButtonIsNotPressed());
}
void RunWhileNormal(uint8_t sampling_limit)
{
	counter=0;
    141e:	10 92 8d 02 	sts	0x028D, r1
    1422:	10 92 8e 02 	sts	0x028E, r1
    1426:	10 92 8f 02 	sts	0x028F, r1
    142a:	10 92 90 02 	sts	0x0290, r1
	SensorReadDigital();
    142e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
	
	int8_t log[sampling_limit*2+2][2];
    1432:	2c 2d       	mov	r18, r12
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	2f 5f       	subi	r18, 0xFF	; 255
    1438:	3f 4f       	sbci	r19, 0xFF	; 255
    143a:	22 0f       	add	r18, r18
    143c:	33 1f       	adc	r19, r19
    143e:	22 0f       	add	r18, r18
    1440:	33 1f       	adc	r19, r19
    1442:	8d b7       	in	r24, 0x3d	; 61
    1444:	9e b7       	in	r25, 0x3e	; 62
    1446:	82 1b       	sub	r24, r18
    1448:	93 0b       	sbc	r25, r19
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	9e bf       	out	0x3e, r25	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	8d bf       	out	0x3d, r24	; 61
    1454:	0d b7       	in	r16, 0x3d	; 61
    1456:	1e b7       	in	r17, 0x3e	; 62
    1458:	0f 5f       	subi	r16, 0xFF	; 255
    145a:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t i=0;
	while (counter<sampling_limit)
    145c:	dd 24       	eor	r13, r13
    145e:	ee 24       	eor	r14, r14
    1460:	ff 24       	eor	r15, r15
    1462:	33 c0       	rjmp	.+102    	; 0x14ca <RunWhileNormal+0xca>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
    1464:	80 91 92 02 	lds	r24, 0x0292
    1468:	60 91 cd 02 	lds	r22, 0x02CD
    146c:	40 91 d2 02 	lds	r20, 0x02D2
    1470:	0e 94 cf 08 	call	0x119e	; 0x119e <RunOnce>
		
		if ((!PIDGetError()) && gSensH!=0 && gSensL!=0)
    1474:	0e 94 98 07 	call	0xf30	; 0xf30 <PIDGetError>
    1478:	88 23       	and	r24, r24
    147a:	f9 f4       	brne	.+62     	; 0x14ba <RunWhileNormal+0xba>
    147c:	20 91 d1 02 	lds	r18, 0x02D1
    1480:	22 23       	and	r18, r18
    1482:	d9 f0       	breq	.+54     	; 0x14ba <RunWhileNormal+0xba>
    1484:	30 91 cf 02 	lds	r19, 0x02CF
    1488:	33 23       	and	r19, r19
    148a:	b9 f0       	breq	.+46     	; 0x14ba <RunWhileNormal+0xba>
		{
			counter++;
    148c:	80 91 8d 02 	lds	r24, 0x028D
    1490:	90 91 8e 02 	lds	r25, 0x028E
    1494:	a0 91 8f 02 	lds	r26, 0x028F
    1498:	b0 91 90 02 	lds	r27, 0x0290
    149c:	01 96       	adiw	r24, 0x01	; 1
    149e:	a1 1d       	adc	r26, r1
    14a0:	b1 1d       	adc	r27, r1
    14a2:	80 93 8d 02 	sts	0x028D, r24
    14a6:	90 93 8e 02 	sts	0x028E, r25
    14aa:	a0 93 8f 02 	sts	0x028F, r26
    14ae:	b0 93 90 02 	sts	0x0290, r27
			log[i][0] = gSensL;///Tampil di LCD
    14b2:	f8 01       	movw	r30, r16
    14b4:	30 83       	st	Z, r19
			log[i][1] = gSensH;///Tampil di LCD
    14b6:	21 83       	std	Z+1, r18	; 0x01
    14b8:	08 c0       	rjmp	.+16     	; 0x14ca <RunWhileNormal+0xca>
		}
		else
		{
			counter=0;
    14ba:	10 92 8d 02 	sts	0x028D, r1
    14be:	10 92 8e 02 	sts	0x028E, r1
    14c2:	10 92 8f 02 	sts	0x028F, r1
    14c6:	10 92 90 02 	sts	0x0290, r1
	counter=0;
	SensorReadDigital();
	
	int8_t log[sampling_limit*2+2][2];
	uint8_t i=0;
	while (counter<sampling_limit)
    14ca:	80 91 8d 02 	lds	r24, 0x028D
    14ce:	90 91 8e 02 	lds	r25, 0x028E
    14d2:	a0 91 8f 02 	lds	r26, 0x028F
    14d6:	b0 91 90 02 	lds	r27, 0x0290
    14da:	8c 15       	cp	r24, r12
    14dc:	9d 05       	cpc	r25, r13
    14de:	ae 05       	cpc	r26, r14
    14e0:	bf 05       	cpc	r27, r15
    14e2:	08 f4       	brcc	.+2      	; 0x14e6 <RunWhileNormal+0xe6>
    14e4:	bf cf       	rjmp	.-130    	; 0x1464 <RunWhileNormal+0x64>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    14e6:	19 bc       	out	0x29, r1	; 41
    14e8:	18 bc       	out	0x28, r1	; 40
	OCR_LEFT = pwm_ki;
    14ea:	1b bc       	out	0x2b, r1	; 43
    14ec:	1a bc       	out	0x2a, r1	; 42
		{
			counter=0;
		}
	}
	DriveMove(0,0);
	counter=0;
    14ee:	10 92 8d 02 	sts	0x028D, r1
    14f2:	10 92 8e 02 	sts	0x028E, r1
    14f6:	10 92 8f 02 	sts	0x028F, r1
    14fa:	10 92 90 02 	sts	0x0290, r1
	
	SettingDebugPrintlog("LOG RUNWHILE ERR",log);
    14fe:	87 e8       	ldi	r24, 0x87	; 135
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	b8 01       	movw	r22, r16
    1504:	0e 94 90 02 	call	0x520	; 0x520 <SettingDebugPrintlog>
}
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	be be       	out	0x3e, r11	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	ad be       	out	0x3d, r10	; 61
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	df 90       	pop	r13
    1520:	cf 90       	pop	r12
    1522:	bf 90       	pop	r11
    1524:	af 90       	pop	r10
    1526:	08 95       	ret

00001528 <RunLearn>:
	//~ while(1);
}

void RunLearn()
{
	RunWhileNormal(5);
    1528:	85 e0       	ldi	r24, 0x05	; 5
    152a:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
}
    152e:	08 95       	ret

00001530 <Run>:
	OCR1B=0;
	gState = STATE_MENU;
}

void Run()
{
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	8f eb       	ldi	r24, 0xBF	; 191
    153a:	97 e2       	ldi	r25, 0x27	; 39
    153c:	a9 e0       	ldi	r26, 0x09	; 9
    153e:	81 50       	subi	r24, 0x01	; 1
    1540:	90 40       	sbci	r25, 0x00	; 0
    1542:	a0 40       	sbci	r26, 0x00	; 0
    1544:	e1 f7       	brne	.-8      	; 0x153e <Run+0xe>
    1546:	00 c0       	rjmp	.+0      	; 0x1548 <Run+0x18>
    1548:	00 00       	nop
	_delay_ms(250);
	SensorReadDigital();
    154a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    154e:	ce e1       	ldi	r28, 0x1E	; 30
    1550:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (PIDGetError())	PIDCalculateExecute();
		else if ((gSensH==0) && (gSensL==0))
		{
			DirForward();
			OCR1A=40;
    1552:	08 e2       	ldi	r16, 0x28	; 40
    1554:	10 e0       	ldi	r17, 0x00	; 0

void Run()
{
	_delay_ms(250);
	SensorReadDigital();
	while (ButtonIsNotPressed())
    1556:	5e c0       	rjmp	.+188    	; 0x1614 <Run+0xe4>
		//~ {
			//~ LCDclr();
			//~ LCDGotoXY(0,1);
			//~ LCDstring("KOTAK",5);
		//~ }
		if ((gSensH==0)&&(gSensL==0))
    1558:	80 91 d1 02 	lds	r24, 0x02D1
    155c:	88 23       	and	r24, r24
    155e:	09 f0       	breq	.+2      	; 0x1562 <Run+0x32>
    1560:	44 c0       	rjmp	.+136    	; 0x15ea <Run+0xba>
    1562:	80 91 cf 02 	lds	r24, 0x02CF
    1566:	88 23       	and	r24, r24
    1568:	09 f0       	breq	.+2      	; 0x156c <Run+0x3c>
    156a:	3f c0       	rjmp	.+126    	; 0x15ea <Run+0xba>
		{
			if (isset(gSensA,SENS_A_LEFT_BIT) && isclear(gSensA,SENS_A_RIGHT_BIT))
    156c:	80 91 87 03 	lds	r24, 0x0387
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    1576:	88 23       	and	r24, r24
    1578:	c9 f0       	breq	.+50     	; 0x15ac <Run+0x7c>
    157a:	80 91 87 03 	lds	r24, 0x0387
    157e:	61 e0       	ldi	r22, 0x01	; 1
    1580:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
    1584:	88 23       	and	r24, r24
    1586:	49 f4       	brne	.+18     	; 0x159a <Run+0x6a>
    1588:	11 c0       	rjmp	.+34     	; 0x15ac <Run+0x7c>
				//~ DirTurnLeft();
				//~ DriveMove(30,30);
				//~ _delay_ms(250);
				while ((gSensL==0)&&(gSensH==0))
				{
					SensorReadDigital();
    158a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
					DirTurnLeft();
    158e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1592:	d9 bd       	out	0x29, r29	; 41
    1594:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1596:	db bd       	out	0x2b, r29	; 43
    1598:	ca bd       	out	0x2a, r28	; 42
			{
				//~ SensorReadDigital();
				//~ DirTurnLeft();
				//~ DriveMove(30,30);
				//~ _delay_ms(250);
				while ((gSensL==0)&&(gSensH==0))
    159a:	80 91 cf 02 	lds	r24, 0x02CF
    159e:	88 23       	and	r24, r24
    15a0:	21 f5       	brne	.+72     	; 0x15ea <Run+0xba>
    15a2:	80 91 d1 02 	lds	r24, 0x02D1
    15a6:	88 23       	and	r24, r24
    15a8:	81 f3       	breq	.-32     	; 0x158a <Run+0x5a>
    15aa:	1f c0       	rjmp	.+62     	; 0x15ea <Run+0xba>
					SensorReadDigital();
					DirTurnLeft();
					DriveMove(30,30);
				}
			}
			else if (isset(gSensA,SENS_A_RIGHT_BIT) && isclear(gSensA,SENS_A_LEFT_BIT))
    15ac:	80 91 87 03 	lds	r24, 0x0387
    15b0:	61 e0       	ldi	r22, 0x01	; 1
    15b2:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    15b6:	88 23       	and	r24, r24
    15b8:	c1 f0       	breq	.+48     	; 0x15ea <Run+0xba>
    15ba:	80 91 87 03 	lds	r24, 0x0387
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
    15c4:	88 23       	and	r24, r24
    15c6:	49 f4       	brne	.+18     	; 0x15da <Run+0xaa>
    15c8:	10 c0       	rjmp	.+32     	; 0x15ea <Run+0xba>
				//~ DirTurnRight();
				//~ DriveMove(30,30);
				//~ _delay_ms(250);
				while ((gSensL==0)&&(gSensH==0))
				{
					SensorReadDigital();
    15ca:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
					DirTurnRight();
    15ce:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    15d2:	d9 bd       	out	0x29, r29	; 41
    15d4:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    15d6:	db bd       	out	0x2b, r29	; 43
    15d8:	ca bd       	out	0x2a, r28	; 42
			{
				//~ SensorReadDigital();
				//~ DirTurnRight();
				//~ DriveMove(30,30);
				//~ _delay_ms(250);
				while ((gSensL==0)&&(gSensH==0))
    15da:	80 91 cf 02 	lds	r24, 0x02CF
    15de:	88 23       	and	r24, r24
    15e0:	21 f4       	brne	.+8      	; 0x15ea <Run+0xba>
    15e2:	80 91 d1 02 	lds	r24, 0x02D1
    15e6:	88 23       	and	r24, r24
    15e8:	81 f3       	breq	.-32     	; 0x15ca <Run+0x9a>
					DirTurnRight();
					DriveMove(30,30);
				}
			}
		}
		if (PIDGetError())	PIDCalculateExecute();
    15ea:	0e 94 98 07 	call	0xf30	; 0xf30 <PIDGetError>
    15ee:	88 23       	and	r24, r24
    15f0:	19 f0       	breq	.+6      	; 0x15f8 <Run+0xc8>
    15f2:	0e 94 4d 08 	call	0x109a	; 0x109a <PIDCalculateExecute>
    15f6:	0e c0       	rjmp	.+28     	; 0x1614 <Run+0xe4>
		else if ((gSensH==0) && (gSensL==0))
    15f8:	80 91 d1 02 	lds	r24, 0x02D1
    15fc:	88 23       	and	r24, r24
    15fe:	51 f4       	brne	.+20     	; 0x1614 <Run+0xe4>
    1600:	80 91 cf 02 	lds	r24, 0x02CF
    1604:	88 23       	and	r24, r24
    1606:	31 f4       	brne	.+12     	; 0x1614 <Run+0xe4>
		{
			DirForward();
    1608:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
			OCR1A=40;
    160c:	1b bd       	out	0x2b, r17	; 43
    160e:	0a bd       	out	0x2a, r16	; 42
			OCR1B=40;
    1610:	19 bd       	out	0x29, r17	; 41
    1612:	08 bd       	out	0x28, r16	; 40

void Run()
{
	_delay_ms(250);
	SensorReadDigital();
	while (ButtonIsNotPressed())
    1614:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ButtonIsNotPressed>
    1618:	88 23       	and	r24, r24
    161a:	09 f0       	breq	.+2      	; 0x161e <Run+0xee>
    161c:	9d cf       	rjmp	.-198    	; 0x1558 <Run+0x28>
			//~ OCR1B=0;
		//~ }
		
		
	}
	OCR1A=0;
    161e:	1b bc       	out	0x2b, r1	; 43
    1620:	1a bc       	out	0x2a, r1	; 42
	OCR1B=0;
    1622:	19 bc       	out	0x29, r1	; 41
    1624:	18 bc       	out	0x28, r1	; 40
	gState = STATE_MENU;
    1626:	10 92 95 02 	sts	0x0295, r1
    162a:	10 92 94 02 	sts	0x0294, r1
}
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	08 95       	ret

00001638 <RunTestCounter>:
	while (ButtonIsNotPressed());
	
}*/

void RunTestCounter()
{
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	8f eb       	ldi	r24, 0xBF	; 191
    1642:	97 e2       	ldi	r25, 0x27	; 39
    1644:	a9 e0       	ldi	r26, 0x09	; 9
    1646:	81 50       	subi	r24, 0x01	; 1
    1648:	90 40       	sbci	r25, 0x00	; 0
    164a:	a0 40       	sbci	r26, 0x00	; 0
    164c:	e1 f7       	brne	.-8      	; 0x1646 <RunTestCounter+0xe>
    164e:	00 c0       	rjmp	.+0      	; 0x1650 <RunTestCounter+0x18>
    1650:	00 00       	nop
    1652:	37 c0       	rjmp	.+110    	; 0x16c2 <RunTestCounter+0x8a>
	_delay_ms(250);
	while (!(ButtonEnter()))
	{
		cetak_bil(countermax,0,0,4);
    1654:	80 91 87 02 	lds	r24, 0x0287
    1658:	90 91 88 02 	lds	r25, 0x0288
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	24 e0       	ldi	r18, 0x04	; 4
    1662:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
		if (ButtonNext())	countermax+=10;
    1666:	0e 94 a6 01 	call	0x34c	; 0x34c <ButtonNext>
    166a:	88 23       	and	r24, r24
    166c:	99 f0       	breq	.+38     	; 0x1694 <RunTestCounter+0x5c>
    166e:	80 91 87 02 	lds	r24, 0x0287
    1672:	90 91 88 02 	lds	r25, 0x0288
    1676:	a0 91 89 02 	lds	r26, 0x0289
    167a:	b0 91 8a 02 	lds	r27, 0x028A
    167e:	0a 96       	adiw	r24, 0x0a	; 10
    1680:	a1 1d       	adc	r26, r1
    1682:	b1 1d       	adc	r27, r1
    1684:	80 93 87 02 	sts	0x0287, r24
    1688:	90 93 88 02 	sts	0x0288, r25
    168c:	a0 93 89 02 	sts	0x0289, r26
    1690:	b0 93 8a 02 	sts	0x028A, r27
		if (ButtonPrev())	countermax-=10;
    1694:	0e 94 ab 01 	call	0x356	; 0x356 <ButtonPrev>
    1698:	88 23       	and	r24, r24
    169a:	99 f0       	breq	.+38     	; 0x16c2 <RunTestCounter+0x8a>
    169c:	80 91 87 02 	lds	r24, 0x0287
    16a0:	90 91 88 02 	lds	r25, 0x0288
    16a4:	a0 91 89 02 	lds	r26, 0x0289
    16a8:	b0 91 8a 02 	lds	r27, 0x028A
    16ac:	0a 97       	sbiw	r24, 0x0a	; 10
    16ae:	a1 09       	sbc	r26, r1
    16b0:	b1 09       	sbc	r27, r1
    16b2:	80 93 87 02 	sts	0x0287, r24
    16b6:	90 93 88 02 	sts	0x0288, r25
    16ba:	a0 93 89 02 	sts	0x0289, r26
    16be:	b0 93 8a 02 	sts	0x028A, r27
}*/

void RunTestCounter()
{
	_delay_ms(250);
	while (!(ButtonEnter()))
    16c2:	0e 94 9c 01 	call	0x338	; 0x338 <ButtonEnter>
    16c6:	88 23       	and	r24, r24
    16c8:	29 f2       	breq	.-118    	; 0x1654 <RunTestCounter+0x1c>
    16ca:	8f eb       	ldi	r24, 0xBF	; 191
    16cc:	97 e2       	ldi	r25, 0x27	; 39
    16ce:	a9 e0       	ldi	r26, 0x09	; 9
    16d0:	81 50       	subi	r24, 0x01	; 1
    16d2:	90 40       	sbci	r25, 0x00	; 0
    16d4:	a0 40       	sbci	r26, 0x00	; 0
    16d6:	e1 f7       	brne	.-8      	; 0x16d0 <RunTestCounter+0x98>
    16d8:	00 c0       	rjmp	.+0      	; 0x16da <RunTestCounter+0xa2>
    16da:	00 00       	nop
		cetak_bil(countermax,0,0,4);
		if (ButtonNext())	countermax+=10;
		if (ButtonPrev())	countermax-=10;
	}
	_delay_ms(250);
	SensorReadDigital();
    16dc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    16e0:	ce e1       	ldi	r28, 0x1E	; 30
    16e2:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if (PIDGetError())	PIDCalculateExecute();
		else if ((gSensH==0) && (gSensL==0))
		{
			DirForward();
			OCR1A=40;
    16e4:	08 e2       	ldi	r16, 0x28	; 40
    16e6:	10 e0       	ldi	r17, 0x00	; 0
		if (ButtonNext())	countermax+=10;
		if (ButtonPrev())	countermax-=10;
	}
	_delay_ms(250);
	SensorReadDigital();
	while (ButtonIsNotPressed() && (counter<countermax))
    16e8:	69 c0       	rjmp	.+210    	; 0x17bc <RunTestCounter+0x184>
	{
		counter++;
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	a1 1d       	adc	r26, r1
    16ee:	b1 1d       	adc	r27, r1
    16f0:	80 93 8d 02 	sts	0x028D, r24
    16f4:	90 93 8e 02 	sts	0x028E, r25
    16f8:	a0 93 8f 02 	sts	0x028F, r26
    16fc:	b0 93 90 02 	sts	0x0290, r27
		if ((gSensH==0)&&(gSensL==0))
    1700:	80 91 d1 02 	lds	r24, 0x02D1
    1704:	88 23       	and	r24, r24
    1706:	09 f0       	breq	.+2      	; 0x170a <RunTestCounter+0xd2>
    1708:	44 c0       	rjmp	.+136    	; 0x1792 <RunTestCounter+0x15a>
    170a:	80 91 cf 02 	lds	r24, 0x02CF
    170e:	88 23       	and	r24, r24
    1710:	09 f0       	breq	.+2      	; 0x1714 <RunTestCounter+0xdc>
    1712:	3f c0       	rjmp	.+126    	; 0x1792 <RunTestCounter+0x15a>
		{
			if (isset(gSensA,SENS_A_LEFT_BIT) && isclear(gSensA,SENS_A_RIGHT_BIT))
    1714:	80 91 87 03 	lds	r24, 0x0387
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    171e:	88 23       	and	r24, r24
    1720:	c9 f0       	breq	.+50     	; 0x1754 <RunTestCounter+0x11c>
    1722:	80 91 87 03 	lds	r24, 0x0387
    1726:	61 e0       	ldi	r22, 0x01	; 1
    1728:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
    172c:	88 23       	and	r24, r24
    172e:	49 f4       	brne	.+18     	; 0x1742 <RunTestCounter+0x10a>
    1730:	11 c0       	rjmp	.+34     	; 0x1754 <RunTestCounter+0x11c>
			{
				while ((gSensL==0)&&(gSensH==0))
				{
					SensorReadDigital();
    1732:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
					DirTurnLeft();
    1736:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    173a:	d9 bd       	out	0x29, r29	; 41
    173c:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    173e:	db bd       	out	0x2b, r29	; 43
    1740:	ca bd       	out	0x2a, r28	; 42
		counter++;
		if ((gSensH==0)&&(gSensL==0))
		{
			if (isset(gSensA,SENS_A_LEFT_BIT) && isclear(gSensA,SENS_A_RIGHT_BIT))
			{
				while ((gSensL==0)&&(gSensH==0))
    1742:	80 91 cf 02 	lds	r24, 0x02CF
    1746:	88 23       	and	r24, r24
    1748:	21 f5       	brne	.+72     	; 0x1792 <RunTestCounter+0x15a>
    174a:	80 91 d1 02 	lds	r24, 0x02D1
    174e:	88 23       	and	r24, r24
    1750:	81 f3       	breq	.-32     	; 0x1732 <RunTestCounter+0xfa>
    1752:	1f c0       	rjmp	.+62     	; 0x1792 <RunTestCounter+0x15a>
					SensorReadDigital();
					DirTurnLeft();
					DriveMove(30,30);
				}
			}
			else if (isset(gSensA,SENS_A_RIGHT_BIT) && isclear(gSensA,SENS_A_LEFT_BIT))
    1754:	80 91 87 03 	lds	r24, 0x0387
    1758:	61 e0       	ldi	r22, 0x01	; 1
    175a:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    175e:	88 23       	and	r24, r24
    1760:	c1 f0       	breq	.+48     	; 0x1792 <RunTestCounter+0x15a>
    1762:	80 91 87 03 	lds	r24, 0x0387
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
    176c:	88 23       	and	r24, r24
    176e:	49 f4       	brne	.+18     	; 0x1782 <RunTestCounter+0x14a>
    1770:	10 c0       	rjmp	.+32     	; 0x1792 <RunTestCounter+0x15a>
			{
				while ((gSensL==0)&&(gSensH==0))
				{
					SensorReadDigital();
    1772:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
					DirTurnRight();
    1776:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    177a:	d9 bd       	out	0x29, r29	; 41
    177c:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    177e:	db bd       	out	0x2b, r29	; 43
    1780:	ca bd       	out	0x2a, r28	; 42
					DriveMove(30,30);
				}
			}
			else if (isset(gSensA,SENS_A_RIGHT_BIT) && isclear(gSensA,SENS_A_LEFT_BIT))
			{
				while ((gSensL==0)&&(gSensH==0))
    1782:	80 91 cf 02 	lds	r24, 0x02CF
    1786:	88 23       	and	r24, r24
    1788:	21 f4       	brne	.+8      	; 0x1792 <RunTestCounter+0x15a>
    178a:	80 91 d1 02 	lds	r24, 0x02D1
    178e:	88 23       	and	r24, r24
    1790:	81 f3       	breq	.-32     	; 0x1772 <RunTestCounter+0x13a>
					DirTurnRight();
					DriveMove(30,30);
				}
			}
		}
		if (PIDGetError())	PIDCalculateExecute();
    1792:	0e 94 98 07 	call	0xf30	; 0xf30 <PIDGetError>
    1796:	88 23       	and	r24, r24
    1798:	19 f0       	breq	.+6      	; 0x17a0 <RunTestCounter+0x168>
    179a:	0e 94 4d 08 	call	0x109a	; 0x109a <PIDCalculateExecute>
    179e:	0e c0       	rjmp	.+28     	; 0x17bc <RunTestCounter+0x184>
		else if ((gSensH==0) && (gSensL==0))
    17a0:	80 91 d1 02 	lds	r24, 0x02D1
    17a4:	88 23       	and	r24, r24
    17a6:	51 f4       	brne	.+20     	; 0x17bc <RunTestCounter+0x184>
    17a8:	80 91 cf 02 	lds	r24, 0x02CF
    17ac:	88 23       	and	r24, r24
    17ae:	31 f4       	brne	.+12     	; 0x17bc <RunTestCounter+0x184>
		{
			DirForward();
    17b0:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
			OCR1A=40;
    17b4:	1b bd       	out	0x2b, r17	; 43
    17b6:	0a bd       	out	0x2a, r16	; 42
			OCR1B=40;
    17b8:	19 bd       	out	0x29, r17	; 41
    17ba:	08 bd       	out	0x28, r16	; 40
		if (ButtonNext())	countermax+=10;
		if (ButtonPrev())	countermax-=10;
	}
	_delay_ms(250);
	SensorReadDigital();
	while (ButtonIsNotPressed() && (counter<countermax))
    17bc:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ButtonIsNotPressed>
    17c0:	88 23       	and	r24, r24
    17c2:	b1 f0       	breq	.+44     	; 0x17f0 <RunTestCounter+0x1b8>
    17c4:	80 91 8d 02 	lds	r24, 0x028D
    17c8:	90 91 8e 02 	lds	r25, 0x028E
    17cc:	a0 91 8f 02 	lds	r26, 0x028F
    17d0:	b0 91 90 02 	lds	r27, 0x0290
    17d4:	20 91 87 02 	lds	r18, 0x0287
    17d8:	30 91 88 02 	lds	r19, 0x0288
    17dc:	40 91 89 02 	lds	r20, 0x0289
    17e0:	50 91 8a 02 	lds	r21, 0x028A
    17e4:	82 17       	cp	r24, r18
    17e6:	93 07       	cpc	r25, r19
    17e8:	a4 07       	cpc	r26, r20
    17ea:	b5 07       	cpc	r27, r21
    17ec:	08 f4       	brcc	.+2      	; 0x17f0 <RunTestCounter+0x1b8>
    17ee:	7d cf       	rjmp	.-262    	; 0x16ea <RunTestCounter+0xb2>
			OCR1A=40;
			OCR1B=40;
		}
		
	}
	OCR1A=0;
    17f0:	1b bc       	out	0x2b, r1	; 43
    17f2:	1a bc       	out	0x2a, r1	; 42
	OCR1B=0;
    17f4:	19 bc       	out	0x29, r1	; 41
    17f6:	18 bc       	out	0x28, r1	; 40
	gState = STATE_MENU;
    17f8:	10 92 95 02 	sts	0x0295, r1
    17fc:	10 92 94 02 	sts	0x0294, r1
}
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	08 95       	ret

0000180a <RunC03ke04>:
	counter=0;
}
void RunC03ke04()
{
	uint8_t cnum;
	while (!((gSensH==0b00011111)&&(gSensL==0b11111000))	&&	!(	isset(gSensA,SENS_A_LEFT_BIT)&&isset(gSensA,SENS_A_RIGHT_BIT)	)		)
    180a:	08 c0       	rjmp	.+16     	; 0x181c <RunC03ke04+0x12>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
    180c:	80 91 92 02 	lds	r24, 0x0292
    1810:	60 91 cd 02 	lds	r22, 0x02CD
    1814:	40 91 d2 02 	lds	r20, 0x02D2
    1818:	0e 94 cf 08 	call	0x119e	; 0x119e <RunOnce>
	counter=0;
}
void RunC03ke04()
{
	uint8_t cnum;
	while (!((gSensH==0b00011111)&&(gSensL==0b11111000))	&&	!(	isset(gSensA,SENS_A_LEFT_BIT)&&isset(gSensA,SENS_A_RIGHT_BIT)	)		)
    181c:	80 91 d1 02 	lds	r24, 0x02D1
    1820:	8f 31       	cpi	r24, 0x1F	; 31
    1822:	21 f4       	brne	.+8      	; 0x182c <RunC03ke04+0x22>
    1824:	80 91 cf 02 	lds	r24, 0x02CF
    1828:	88 3f       	cpi	r24, 0xF8	; 248
    182a:	71 f0       	breq	.+28     	; 0x1848 <RunC03ke04+0x3e>
    182c:	80 91 87 03 	lds	r24, 0x0387
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    1836:	88 23       	and	r24, r24
    1838:	49 f3       	breq	.-46     	; 0x180c <RunC03ke04+0x2>
    183a:	80 91 87 03 	lds	r24, 0x0387
    183e:	61 e0       	ldi	r22, 0x01	; 1
    1840:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    1844:	88 23       	and	r24, r24
    1846:	11 f3       	breq	.-60     	; 0x180c <RunC03ke04+0x2>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
	}
	DirTurnLeft();
    1848:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    184c:	8e e1       	ldi	r24, 0x1E	; 30
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	99 bd       	out	0x29, r25	; 41
    1852:	88 bd       	out	0x28, r24	; 40
	OCR_LEFT = pwm_ki;
    1854:	9b bd       	out	0x2b, r25	; 43
    1856:	8a bd       	out	0x2a, r24	; 42
    1858:	8f e7       	ldi	r24, 0x7F	; 127
    185a:	9c ef       	ldi	r25, 0xFC	; 252
    185c:	aa e0       	ldi	r26, 0x0A	; 10
    185e:	81 50       	subi	r24, 0x01	; 1
    1860:	90 40       	sbci	r25, 0x00	; 0
    1862:	a0 40       	sbci	r26, 0x00	; 0
    1864:	e1 f7       	brne	.-8      	; 0x185e <RunC03ke04+0x54>
    1866:	00 c0       	rjmp	.+0      	; 0x1868 <RunC03ke04+0x5e>
    1868:	00 00       	nop
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
	}
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(300);
	counter=0;
    186a:	10 92 8d 02 	sts	0x028D, r1
    186e:	10 92 8e 02 	sts	0x028E, r1
    1872:	10 92 8f 02 	sts	0x028F, r1
    1876:	10 92 90 02 	sts	0x0290, r1
	SetMinim();
    187a:	0e 94 17 07 	call	0xe2e	; 0xe2e <SetMinim>
	while (counter<=700)
    187e:	06 c0       	rjmp	.+12     	; 0x188c <RunC03ke04+0x82>
	{
		RunOnce(60,6,gDriveKD);
    1880:	8c e3       	ldi	r24, 0x3C	; 60
    1882:	66 e0       	ldi	r22, 0x06	; 6
    1884:	40 91 d2 02 	lds	r20, 0x02D2
    1888:	0e 94 cf 08 	call	0x119e	; 0x119e <RunOnce>
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(300);
	counter=0;
	SetMinim();
	while (counter<=700)
    188c:	80 91 8d 02 	lds	r24, 0x028D
    1890:	90 91 8e 02 	lds	r25, 0x028E
    1894:	a0 91 8f 02 	lds	r26, 0x028F
    1898:	b0 91 90 02 	lds	r27, 0x0290
    189c:	8d 3b       	cpi	r24, 0xBD	; 189
    189e:	22 e0       	ldi	r18, 0x02	; 2
    18a0:	92 07       	cpc	r25, r18
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	a2 07       	cpc	r26, r18
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	b2 07       	cpc	r27, r18
    18aa:	50 f3       	brcs	.-44     	; 0x1880 <RunC03ke04+0x76>
    18ac:	06 c0       	rjmp	.+12     	; 0x18ba <RunC03ke04+0xb0>
	}
	//~ DriveMove(0,0);
	//~ _delay_ms(500);
	while (!(isset(gSensA,SENS_A_LEFT_BIT)&&isset(gSensA,SENS_A_RIGHT_BIT)))
	{
		RunOnce(20,3,gDriveKD);
    18ae:	84 e1       	ldi	r24, 0x14	; 20
    18b0:	63 e0       	ldi	r22, 0x03	; 3
    18b2:	40 91 d2 02 	lds	r20, 0x02D2
    18b6:	0e 94 cf 08 	call	0x119e	; 0x119e <RunOnce>
	{
		RunOnce(60,6,gDriveKD);
	}
	//~ DriveMove(0,0);
	//~ _delay_ms(500);
	while (!(isset(gSensA,SENS_A_LEFT_BIT)&&isset(gSensA,SENS_A_RIGHT_BIT)))
    18ba:	80 91 87 03 	lds	r24, 0x0387
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    18c4:	88 23       	and	r24, r24
    18c6:	99 f3       	breq	.-26     	; 0x18ae <RunC03ke04+0xa4>
    18c8:	80 91 87 03 	lds	r24, 0x0387
    18cc:	61 e0       	ldi	r22, 0x01	; 1
    18ce:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    18d2:	88 23       	and	r24, r24
    18d4:	61 f3       	breq	.-40     	; 0x18ae <RunC03ke04+0xa4>
	{
		RunOnce(20,3,gDriveKD);
	}
	DirTurnLeft();
    18d6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    18da:	8e e1       	ldi	r24, 0x1E	; 30
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	99 bd       	out	0x29, r25	; 41
    18e0:	88 bd       	out	0x28, r24	; 40
	OCR_LEFT = pwm_ki;
    18e2:	9b bd       	out	0x2b, r25	; 43
    18e4:	8a bd       	out	0x2a, r24	; 42
    18e6:	8f e7       	ldi	r24, 0x7F	; 127
    18e8:	9c ef       	ldi	r25, 0xFC	; 252
    18ea:	aa e0       	ldi	r26, 0x0A	; 10
    18ec:	81 50       	subi	r24, 0x01	; 1
    18ee:	90 40       	sbci	r25, 0x00	; 0
    18f0:	a0 40       	sbci	r26, 0x00	; 0
    18f2:	e1 f7       	brne	.-8      	; 0x18ec <RunC03ke04+0xe2>
    18f4:	00 c0       	rjmp	.+0      	; 0x18f6 <RunC03ke04+0xec>
    18f6:	00 00       	nop
		RunOnce(20,3,gDriveKD);
	}
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(300);
	DirForward();
    18f8:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
	counter=0;
    18fc:	10 92 8d 02 	sts	0x028D, r1
    1900:	10 92 8e 02 	sts	0x028E, r1
    1904:	10 92 8f 02 	sts	0x028F, r1
    1908:	10 92 90 02 	sts	0x0290, r1
	while (isclear(gSensA,SENS_A_RIGHT_BIT))
    190c:	06 c0       	rjmp	.+12     	; 0x191a <RunC03ke04+0x110>
	{
		RunOnce(50,5,gDriveKD);
    190e:	82 e3       	ldi	r24, 0x32	; 50
    1910:	65 e0       	ldi	r22, 0x05	; 5
    1912:	40 91 d2 02 	lds	r20, 0x02D2
    1916:	0e 94 cf 08 	call	0x119e	; 0x119e <RunOnce>
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(300);
	DirForward();
	counter=0;
	while (isclear(gSensA,SENS_A_RIGHT_BIT))
    191a:	80 91 87 03 	lds	r24, 0x0387
    191e:	61 e0       	ldi	r22, 0x01	; 1
    1920:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
    1924:	88 23       	and	r24, r24
    1926:	99 f7       	brne	.-26     	; 0x190e <RunC03ke04+0x104>
	{
		RunOnce(50,5,gDriveKD);
	}
	DirTurnRight();
    1928:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    192c:	8e e1       	ldi	r24, 0x1E	; 30
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	99 bd       	out	0x29, r25	; 41
    1932:	88 bd       	out	0x28, r24	; 40
	OCR_LEFT = pwm_ki;
    1934:	9b bd       	out	0x2b, r25	; 43
    1936:	8a bd       	out	0x2a, r24	; 42
    1938:	8f e7       	ldi	r24, 0x7F	; 127
    193a:	9c ef       	ldi	r25, 0xFC	; 252
    193c:	aa e0       	ldi	r26, 0x0A	; 10
    193e:	81 50       	subi	r24, 0x01	; 1
    1940:	90 40       	sbci	r25, 0x00	; 0
    1942:	a0 40       	sbci	r26, 0x00	; 0
    1944:	e1 f7       	brne	.-8      	; 0x193e <RunC03ke04+0x134>
    1946:	00 c0       	rjmp	.+0      	; 0x1948 <RunC03ke04+0x13e>
    1948:	00 00       	nop
		RunOnce(50,5,gDriveKD);
	}
	DirTurnRight();
	DriveMove(30,30);
	_delay_ms(300);
	DirForward();
    194a:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
	counter=0;
    194e:	10 92 8d 02 	sts	0x028D, r1
    1952:	10 92 8e 02 	sts	0x028E, r1
    1956:	10 92 8f 02 	sts	0x028F, r1
    195a:	10 92 90 02 	sts	0x0290, r1
	SetDefault();
    195e:	0e 94 bb 05 	call	0xb76	; 0xb76 <SetDefault>
	while (isclear(gSensA,SENS_A_RIGHT_BIT))
    1962:	06 c0       	rjmp	.+12     	; 0x1970 <RunC03ke04+0x166>
	{
		RunOnce(30,3,gDriveKD);
    1964:	8e e1       	ldi	r24, 0x1E	; 30
    1966:	63 e0       	ldi	r22, 0x03	; 3
    1968:	40 91 d2 02 	lds	r20, 0x02D2
    196c:	0e 94 cf 08 	call	0x119e	; 0x119e <RunOnce>
	DriveMove(30,30);
	_delay_ms(300);
	DirForward();
	counter=0;
	SetDefault();
	while (isclear(gSensA,SENS_A_RIGHT_BIT))
    1970:	80 91 87 03 	lds	r24, 0x0387
    1974:	61 e0       	ldi	r22, 0x01	; 1
    1976:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
    197a:	88 23       	and	r24, r24
    197c:	99 f7       	brne	.-26     	; 0x1964 <RunC03ke04+0x15a>
	{
		RunOnce(30,3,gDriveKD);
	}
}
    197e:	08 95       	ret

00001980 <RunC00ke01>:
{
	RunWhileNormal(5);
}

void RunC00ke01()
{
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
	DirForward();
    1984:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1988:	8e e1       	ldi	r24, 0x1E	; 30
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	99 bd       	out	0x29, r25	; 41
    198e:	88 bd       	out	0x28, r24	; 40
	OCR_LEFT = pwm_ki;
    1990:	9b bd       	out	0x2b, r25	; 43
    1992:	8a bd       	out	0x2a, r24	; 42
    1994:	8f e7       	ldi	r24, 0x7F	; 127
    1996:	9c ef       	ldi	r25, 0xFC	; 252
    1998:	aa e0       	ldi	r26, 0x0A	; 10
    199a:	81 50       	subi	r24, 0x01	; 1
    199c:	90 40       	sbci	r25, 0x00	; 0
    199e:	a0 40       	sbci	r26, 0x00	; 0
    19a0:	e1 f7       	brne	.-8      	; 0x199a <RunC00ke01+0x1a>
    19a2:	00 c0       	rjmp	.+0      	; 0x19a4 <RunC00ke01+0x24>
    19a4:	00 00       	nop
{
	DirForward();
	DriveMove(30,30);
	_delay_ms(300);
	
	counter=0;
    19a6:	10 92 8d 02 	sts	0x028D, r1
    19aa:	10 92 8e 02 	sts	0x028E, r1
    19ae:	10 92 8f 02 	sts	0x028F, r1
    19b2:	10 92 90 02 	sts	0x0290, r1
	SensorReadDigital();
    19b6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
	while (counter<=50)
    19ba:	08 c0       	rjmp	.+16     	; 0x19cc <RunC00ke01+0x4c>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
    19bc:	80 91 92 02 	lds	r24, 0x0292
    19c0:	60 91 cd 02 	lds	r22, 0x02CD
    19c4:	40 91 d2 02 	lds	r20, 0x02D2
    19c8:	0e 94 cf 08 	call	0x119e	; 0x119e <RunOnce>
	DriveMove(30,30);
	_delay_ms(300);
	
	counter=0;
	SensorReadDigital();
	while (counter<=50)
    19cc:	80 91 8d 02 	lds	r24, 0x028D
    19d0:	90 91 8e 02 	lds	r25, 0x028E
    19d4:	a0 91 8f 02 	lds	r26, 0x028F
    19d8:	b0 91 90 02 	lds	r27, 0x0290
    19dc:	83 33       	cpi	r24, 0x33	; 51
    19de:	91 05       	cpc	r25, r1
    19e0:	a1 05       	cpc	r26, r1
    19e2:	b1 05       	cpc	r27, r1
    19e4:	58 f3       	brcs	.-42     	; 0x19bc <RunC00ke01+0x3c>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
	}
	DirTurnRight();
    19e6:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    19ea:	8e e1       	ldi	r24, 0x1E	; 30
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	99 bd       	out	0x29, r25	; 41
    19f0:	88 bd       	out	0x28, r24	; 40
	OCR_LEFT = pwm_ki;
    19f2:	9b bd       	out	0x2b, r25	; 43
    19f4:	8a bd       	out	0x2a, r24	; 42
    19f6:	8f eb       	ldi	r24, 0xBF	; 191
    19f8:	97 e2       	ldi	r25, 0x27	; 39
    19fa:	a9 e0       	ldi	r26, 0x09	; 9
    19fc:	81 50       	subi	r24, 0x01	; 1
    19fe:	90 40       	sbci	r25, 0x00	; 0
    1a00:	a0 40       	sbci	r26, 0x00	; 0
    1a02:	e1 f7       	brne	.-8      	; 0x19fc <RunC00ke01+0x7c>
    1a04:	00 c0       	rjmp	.+0      	; 0x1a06 <RunC00ke01+0x86>
    1a06:	00 00       	nop
	}
	DirTurnRight();
	DriveMove(30,30);
	_delay_ms(250);
	
	counter=0;
    1a08:	10 92 8d 02 	sts	0x028D, r1
    1a0c:	10 92 8e 02 	sts	0x028E, r1
    1a10:	10 92 8f 02 	sts	0x028F, r1
    1a14:	10 92 90 02 	sts	0x0290, r1
	SensorReadDigital();
    1a18:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
	while (counter<=50)
    1a1c:	08 c0       	rjmp	.+16     	; 0x1a2e <RunC00ke01+0xae>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
    1a1e:	80 91 92 02 	lds	r24, 0x0292
    1a22:	60 91 cd 02 	lds	r22, 0x02CD
    1a26:	40 91 d2 02 	lds	r20, 0x02D2
    1a2a:	0e 94 cf 08 	call	0x119e	; 0x119e <RunOnce>
	DriveMove(30,30);
	_delay_ms(250);
	
	counter=0;
	SensorReadDigital();
	while (counter<=50)
    1a2e:	80 91 8d 02 	lds	r24, 0x028D
    1a32:	90 91 8e 02 	lds	r25, 0x028E
    1a36:	a0 91 8f 02 	lds	r26, 0x028F
    1a3a:	b0 91 90 02 	lds	r27, 0x0290
    1a3e:	83 33       	cpi	r24, 0x33	; 51
    1a40:	91 05       	cpc	r25, r1
    1a42:	a1 05       	cpc	r26, r1
    1a44:	b1 05       	cpc	r27, r1
    1a46:	58 f3       	brcs	.-42     	; 0x1a1e <RunC00ke01+0x9e>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
	}
	
	DirForward();
    1a48:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1a4c:	8e e1       	ldi	r24, 0x1E	; 30
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	99 bd       	out	0x29, r25	; 41
    1a52:	88 bd       	out	0x28, r24	; 40
	OCR_LEFT = pwm_ki;
    1a54:	9b bd       	out	0x2b, r25	; 43
    1a56:	8a bd       	out	0x2a, r24	; 42
    1a58:	8f eb       	ldi	r24, 0xBF	; 191
    1a5a:	97 e2       	ldi	r25, 0x27	; 39
    1a5c:	a9 e0       	ldi	r26, 0x09	; 9
    1a5e:	81 50       	subi	r24, 0x01	; 1
    1a60:	90 40       	sbci	r25, 0x00	; 0
    1a62:	a0 40       	sbci	r26, 0x00	; 0
    1a64:	e1 f7       	brne	.-8      	; 0x1a5e <RunC00ke01+0xde>
    1a66:	00 c0       	rjmp	.+0      	; 0x1a68 <RunC00ke01+0xe8>
    1a68:	00 00       	nop
	
	DirForward();
	DriveMove(30,30);
	_delay_ms(250);
	
	counter = 0;
    1a6a:	10 92 8d 02 	sts	0x028D, r1
    1a6e:	10 92 8e 02 	sts	0x028E, r1
    1a72:	10 92 8f 02 	sts	0x028F, r1
    1a76:	10 92 90 02 	sts	0x0290, r1
	while (counter<=50)
    1a7a:	08 c0       	rjmp	.+16     	; 0x1a8c <RunC00ke01+0x10c>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
    1a7c:	80 91 92 02 	lds	r24, 0x0292
    1a80:	60 91 cd 02 	lds	r22, 0x02CD
    1a84:	40 91 d2 02 	lds	r20, 0x02D2
    1a88:	0e 94 cf 08 	call	0x119e	; 0x119e <RunOnce>
	DirForward();
	DriveMove(30,30);
	_delay_ms(250);
	
	counter = 0;
	while (counter<=50)
    1a8c:	80 91 8d 02 	lds	r24, 0x028D
    1a90:	90 91 8e 02 	lds	r25, 0x028E
    1a94:	a0 91 8f 02 	lds	r26, 0x028F
    1a98:	b0 91 90 02 	lds	r27, 0x0290
    1a9c:	83 33       	cpi	r24, 0x33	; 51
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	a1 05       	cpc	r26, r1
    1aa2:	b1 05       	cpc	r27, r1
    1aa4:	58 f3       	brcs	.-42     	; 0x1a7c <RunC00ke01+0xfc>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
	}
	
	DirTurnRight();
    1aa6:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1aaa:	8e e1       	ldi	r24, 0x1E	; 30
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	99 bd       	out	0x29, r25	; 41
    1ab0:	88 bd       	out	0x28, r24	; 40
	OCR_LEFT = pwm_ki;
    1ab2:	9b bd       	out	0x2b, r25	; 43
    1ab4:	8a bd       	out	0x2a, r24	; 42
    1ab6:	8f eb       	ldi	r24, 0xBF	; 191
    1ab8:	97 e2       	ldi	r25, 0x27	; 39
    1aba:	a9 e0       	ldi	r26, 0x09	; 9
    1abc:	81 50       	subi	r24, 0x01	; 1
    1abe:	90 40       	sbci	r25, 0x00	; 0
    1ac0:	a0 40       	sbci	r26, 0x00	; 0
    1ac2:	e1 f7       	brne	.-8      	; 0x1abc <RunC00ke01+0x13c>
    1ac4:	00 c0       	rjmp	.+0      	; 0x1ac6 <RunC00ke01+0x146>
    1ac6:	00 00       	nop
	
	DirTurnRight();
	DriveMove(30,30);
	_delay_ms(250);
	
	counter = 0;
    1ac8:	10 92 8d 02 	sts	0x028D, r1
    1acc:	10 92 8e 02 	sts	0x028E, r1
    1ad0:	10 92 8f 02 	sts	0x028F, r1
    1ad4:	10 92 90 02 	sts	0x0290, r1
	while (counter<=400 && isclear(gSensA,SENS_A_LEFT_BIT))
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea <RunC00ke01+0x16a>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
    1ada:	80 91 92 02 	lds	r24, 0x0292
    1ade:	60 91 cd 02 	lds	r22, 0x02CD
    1ae2:	40 91 d2 02 	lds	r20, 0x02D2
    1ae6:	0e 94 cf 08 	call	0x119e	; 0x119e <RunOnce>
	DirTurnRight();
	DriveMove(30,30);
	_delay_ms(250);
	
	counter = 0;
	while (counter<=400 && isclear(gSensA,SENS_A_LEFT_BIT))
    1aea:	80 91 8d 02 	lds	r24, 0x028D
    1aee:	90 91 8e 02 	lds	r25, 0x028E
    1af2:	a0 91 8f 02 	lds	r26, 0x028F
    1af6:	b0 91 90 02 	lds	r27, 0x0290
    1afa:	81 39       	cpi	r24, 0x91	; 145
    1afc:	21 e0       	ldi	r18, 0x01	; 1
    1afe:	92 07       	cpc	r25, r18
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	a2 07       	cpc	r26, r18
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	b2 07       	cpc	r27, r18
    1b08:	38 f4       	brcc	.+14     	; 0x1b18 <RunC00ke01+0x198>
    1b0a:	80 91 87 03 	lds	r24, 0x0387
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
    1b14:	88 23       	and	r24, r24
    1b16:	09 f7       	brne	.-62     	; 0x1ada <RunC00ke01+0x15a>
	{
		RunOnce(gDriveSpeed,gDriveKP,gDriveKD);
	}
	
	DirTurnLeft();
    1b18:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1b1c:	ce e1       	ldi	r28, 0x1E	; 30
    1b1e:	d0 e0       	ldi	r29, 0x00	; 0
    1b20:	d9 bd       	out	0x29, r29	; 41
    1b22:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1b24:	db bd       	out	0x2b, r29	; 43
    1b26:	ca bd       	out	0x2a, r28	; 42
    1b28:	8f eb       	ldi	r24, 0xBF	; 191
    1b2a:	97 e2       	ldi	r25, 0x27	; 39
    1b2c:	a9 e0       	ldi	r26, 0x09	; 9
    1b2e:	81 50       	subi	r24, 0x01	; 1
    1b30:	90 40       	sbci	r25, 0x00	; 0
    1b32:	a0 40       	sbci	r26, 0x00	; 0
    1b34:	e1 f7       	brne	.-8      	; 0x1b2e <RunC00ke01+0x1ae>
    1b36:	00 c0       	rjmp	.+0      	; 0x1b38 <RunC00ke01+0x1b8>
    1b38:	00 00       	nop
	
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(250);
	
	DirForward();
    1b3a:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1b3e:	d9 bd       	out	0x29, r29	; 41
    1b40:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1b42:	db bd       	out	0x2b, r29	; 43
    1b44:	ca bd       	out	0x2a, r28	; 42
    1b46:	8f e7       	ldi	r24, 0x7F	; 127
    1b48:	99 ea       	ldi	r25, 0xA9	; 169
    1b4a:	a3 e0       	ldi	r26, 0x03	; 3
    1b4c:	81 50       	subi	r24, 0x01	; 1
    1b4e:	90 40       	sbci	r25, 0x00	; 0
    1b50:	a0 40       	sbci	r26, 0x00	; 0
    1b52:	e1 f7       	brne	.-8      	; 0x1b4c <RunC00ke01+0x1cc>
    1b54:	00 c0       	rjmp	.+0      	; 0x1b56 <RunC00ke01+0x1d6>
    1b56:	00 00       	nop
	
	DirForward();
	DriveMove(30,30);
	_delay_ms(100);
	
	DirTurnLeft();
    1b58:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1b5c:	d9 bd       	out	0x29, r29	; 41
    1b5e:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1b60:	db bd       	out	0x2b, r29	; 43
    1b62:	ca bd       	out	0x2a, r28	; 42
    1b64:	8f eb       	ldi	r24, 0xBF	; 191
    1b66:	97 e2       	ldi	r25, 0x27	; 39
    1b68:	a9 e0       	ldi	r26, 0x09	; 9
    1b6a:	81 50       	subi	r24, 0x01	; 1
    1b6c:	90 40       	sbci	r25, 0x00	; 0
    1b6e:	a0 40       	sbci	r26, 0x00	; 0
    1b70:	e1 f7       	brne	.-8      	; 0x1b6a <RunC00ke01+0x1ea>
    1b72:	00 c0       	rjmp	.+0      	; 0x1b74 <RunC00ke01+0x1f4>
    1b74:	00 00       	nop
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1b76:	19 bc       	out	0x29, r1	; 41
    1b78:	18 bc       	out	0x28, r1	; 40
	OCR_LEFT = pwm_ki;
    1b7a:	1b bc       	out	0x2b, r1	; 43
    1b7c:	1a bc       	out	0x2a, r1	; 42
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(250);
	
	
	DriveMove(0,0);while(ButtonIsNotPressed());
    1b7e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ButtonIsNotPressed>
    1b82:	88 23       	and	r24, r24
    1b84:	e1 f7       	brne	.-8      	; 0x1b7e <RunC00ke01+0x1fe>
	
}
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	08 95       	ret

00001b8c <RunEb01ke02>:
	
	RunWhileNormal(10);
	
}
void RunEb01ke02()
{
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
	///CP 2
	
	DirTurnRight();
    1b90:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1b94:	ce e1       	ldi	r28, 0x1E	; 30
    1b96:	d0 e0       	ldi	r29, 0x00	; 0
    1b98:	d9 bd       	out	0x29, r29	; 41
    1b9a:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1b9c:	db bd       	out	0x2b, r29	; 43
    1b9e:	ca bd       	out	0x2a, r28	; 42
    1ba0:	8f eb       	ldi	r24, 0xBF	; 191
    1ba2:	97 e2       	ldi	r25, 0x27	; 39
    1ba4:	a9 e0       	ldi	r26, 0x09	; 9
    1ba6:	81 50       	subi	r24, 0x01	; 1
    1ba8:	90 40       	sbci	r25, 0x00	; 0
    1baa:	a0 40       	sbci	r26, 0x00	; 0
    1bac:	e1 f7       	brne	.-8      	; 0x1ba6 <RunEb01ke02+0x1a>
    1bae:	00 c0       	rjmp	.+0      	; 0x1bb0 <RunEb01ke02+0x24>
    1bb0:	00 00       	nop
	///CP 2
	
	DirTurnRight();
	DriveMove(30,30);
	_delay_ms(250);
	RunWhileNormal(10);
    1bb2:	8a e0       	ldi	r24, 0x0A	; 10
    1bb4:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	
	DirTurnLeft();
    1bb8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1bbc:	d9 bd       	out	0x29, r29	; 41
    1bbe:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1bc0:	db bd       	out	0x2b, r29	; 43
    1bc2:	ca bd       	out	0x2a, r28	; 42
    1bc4:	8f eb       	ldi	r24, 0xBF	; 191
    1bc6:	97 e2       	ldi	r25, 0x27	; 39
    1bc8:	a9 e0       	ldi	r26, 0x09	; 9
    1bca:	81 50       	subi	r24, 0x01	; 1
    1bcc:	90 40       	sbci	r25, 0x00	; 0
    1bce:	a0 40       	sbci	r26, 0x00	; 0
    1bd0:	e1 f7       	brne	.-8      	; 0x1bca <RunEb01ke02+0x3e>
    1bd2:	00 c0       	rjmp	.+0      	; 0x1bd4 <RunEb01ke02+0x48>
    1bd4:	00 00       	nop
	RunWhileNormal(10);
	
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(250);
	RunWhileNormal(10);
    1bd6:	8a e0       	ldi	r24, 0x0A	; 10
    1bd8:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	
	DirForward();
    1bdc:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1be0:	d9 bd       	out	0x29, r29	; 41
    1be2:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1be4:	db bd       	out	0x2b, r29	; 43
    1be6:	ca bd       	out	0x2a, r28	; 42
    1be8:	8f ef       	ldi	r24, 0xFF	; 255
    1bea:	92 e5       	ldi	r25, 0x52	; 82
    1bec:	a7 e0       	ldi	r26, 0x07	; 7
    1bee:	81 50       	subi	r24, 0x01	; 1
    1bf0:	90 40       	sbci	r25, 0x00	; 0
    1bf2:	a0 40       	sbci	r26, 0x00	; 0
    1bf4:	e1 f7       	brne	.-8      	; 0x1bee <RunEb01ke02+0x62>
    1bf6:	00 c0       	rjmp	.+0      	; 0x1bf8 <RunEb01ke02+0x6c>
    1bf8:	00 00       	nop
	
	DirForward();
	DriveMove(30,30);
	_delay_ms(200);
	
	RunWhileNormal(5);
    1bfa:	85 e0       	ldi	r24, 0x05	; 5
    1bfc:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	
	DirTurnLeft();
    1c00:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1c04:	d9 bd       	out	0x29, r29	; 41
    1c06:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1c08:	db bd       	out	0x2b, r29	; 43
    1c0a:	ca bd       	out	0x2a, r28	; 42
    1c0c:	8f eb       	ldi	r24, 0xBF	; 191
    1c0e:	97 e2       	ldi	r25, 0x27	; 39
    1c10:	a9 e0       	ldi	r26, 0x09	; 9
    1c12:	81 50       	subi	r24, 0x01	; 1
    1c14:	90 40       	sbci	r25, 0x00	; 0
    1c16:	a0 40       	sbci	r26, 0x00	; 0
    1c18:	e1 f7       	brne	.-8      	; 0x1c12 <RunEb01ke02+0x86>
    1c1a:	00 c0       	rjmp	.+0      	; 0x1c1c <RunEb01ke02+0x90>
    1c1c:	00 00       	nop
	
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(250);
	
	RunWhileNormal(10);
    1c1e:	8a e0       	ldi	r24, 0x0A	; 10
    1c20:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	
	DirTurnLeft();
    1c24:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1c28:	d9 bd       	out	0x29, r29	; 41
    1c2a:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1c2c:	db bd       	out	0x2b, r29	; 43
    1c2e:	ca bd       	out	0x2a, r28	; 42
    1c30:	8f eb       	ldi	r24, 0xBF	; 191
    1c32:	97 e2       	ldi	r25, 0x27	; 39
    1c34:	a9 e0       	ldi	r26, 0x09	; 9
    1c36:	81 50       	subi	r24, 0x01	; 1
    1c38:	90 40       	sbci	r25, 0x00	; 0
    1c3a:	a0 40       	sbci	r26, 0x00	; 0
    1c3c:	e1 f7       	brne	.-8      	; 0x1c36 <RunEb01ke02+0xaa>
    1c3e:	00 c0       	rjmp	.+0      	; 0x1c40 <RunEb01ke02+0xb4>
    1c40:	00 00       	nop
	
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(250);
	
	RunWhileNormal(10);
    1c42:	8a e0       	ldi	r24, 0x0A	; 10
    1c44:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	
	DirForward();
    1c48:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1c4c:	d9 bd       	out	0x29, r29	; 41
    1c4e:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1c50:	db bd       	out	0x2b, r29	; 43
    1c52:	ca bd       	out	0x2a, r28	; 42
    1c54:	8f ef       	ldi	r24, 0xFF	; 255
    1c56:	92 e5       	ldi	r25, 0x52	; 82
    1c58:	a7 e0       	ldi	r26, 0x07	; 7
    1c5a:	81 50       	subi	r24, 0x01	; 1
    1c5c:	90 40       	sbci	r25, 0x00	; 0
    1c5e:	a0 40       	sbci	r26, 0x00	; 0
    1c60:	e1 f7       	brne	.-8      	; 0x1c5a <RunEb01ke02+0xce>
    1c62:	00 c0       	rjmp	.+0      	; 0x1c64 <RunEb01ke02+0xd8>
    1c64:	00 00       	nop
	
	DirForward();
	DriveMove(30,30);
	_delay_ms(200);
	
	RunWhileNormal(5);
    1c66:	85 e0       	ldi	r24, 0x05	; 5
    1c68:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	
	DirTurnLeft();
    1c6c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1c70:	d9 bd       	out	0x29, r29	; 41
    1c72:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1c74:	db bd       	out	0x2b, r29	; 43
    1c76:	ca bd       	out	0x2a, r28	; 42
    1c78:	8f eb       	ldi	r24, 0xBF	; 191
    1c7a:	97 e2       	ldi	r25, 0x27	; 39
    1c7c:	a9 e0       	ldi	r26, 0x09	; 9
    1c7e:	81 50       	subi	r24, 0x01	; 1
    1c80:	90 40       	sbci	r25, 0x00	; 0
    1c82:	a0 40       	sbci	r26, 0x00	; 0
    1c84:	e1 f7       	brne	.-8      	; 0x1c7e <RunEb01ke02+0xf2>
    1c86:	00 c0       	rjmp	.+0      	; 0x1c88 <RunEb01ke02+0xfc>
    1c88:	00 00       	nop
	
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(250);
	
	RunWhileNormal(15);
    1c8a:	8f e0       	ldi	r24, 0x0F	; 15
    1c8c:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1c90:	19 bc       	out	0x29, r1	; 41
    1c92:	18 bc       	out	0x28, r1	; 40
	OCR_LEFT = pwm_ki;
    1c94:	1b bc       	out	0x2b, r1	; 43
    1c96:	1a bc       	out	0x2a, r1	; 42
	DriveMove(30,30);
	_delay_ms(250);
	
	RunWhileNormal(15);
	
	DriveMove(0,0);while(ButtonIsNotPressed());
    1c98:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ButtonIsNotPressed>
    1c9c:	88 23       	and	r24, r24
    1c9e:	e1 f7       	brne	.-8      	; 0x1c98 <RunEb01ke02+0x10c>
	
	while(ButtonIsNotPressed());
    1ca0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <ButtonIsNotPressed>
    1ca4:	88 23       	and	r24, r24
    1ca6:	e1 f7       	brne	.-8      	; 0x1ca0 <RunEb01ke02+0x114>
}
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <RunEb00ke01>:
	}
	
}

void RunEb00ke01()
{
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
	DirForward();
    1cb2:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1cb6:	ce e1       	ldi	r28, 0x1E	; 30
    1cb8:	d0 e0       	ldi	r29, 0x00	; 0
    1cba:	d9 bd       	out	0x29, r29	; 41
    1cbc:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1cbe:	db bd       	out	0x2b, r29	; 43
    1cc0:	ca bd       	out	0x2a, r28	; 42
    1cc2:	8f e7       	ldi	r24, 0x7F	; 127
    1cc4:	9c ef       	ldi	r25, 0xFC	; 252
    1cc6:	aa e0       	ldi	r26, 0x0A	; 10
    1cc8:	81 50       	subi	r24, 0x01	; 1
    1cca:	90 40       	sbci	r25, 0x00	; 0
    1ccc:	a0 40       	sbci	r26, 0x00	; 0
    1cce:	e1 f7       	brne	.-8      	; 0x1cc8 <RunEb00ke01+0x1a>
    1cd0:	00 c0       	rjmp	.+0      	; 0x1cd2 <RunEb00ke01+0x24>
    1cd2:	00 00       	nop
{
	DirForward();
	DriveMove(30,30);
	_delay_ms(300);
	
	RunWhileNormal(5);
    1cd4:	85 e0       	ldi	r24, 0x05	; 5
    1cd6:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	DirTurnRight();
    1cda:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1cde:	d9 bd       	out	0x29, r29	; 41
    1ce0:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1ce2:	db bd       	out	0x2b, r29	; 43
    1ce4:	ca bd       	out	0x2a, r28	; 42
    1ce6:	8f ef       	ldi	r24, 0xFF	; 255
    1ce8:	92 e5       	ldi	r25, 0x52	; 82
    1cea:	a7 e0       	ldi	r26, 0x07	; 7
    1cec:	81 50       	subi	r24, 0x01	; 1
    1cee:	90 40       	sbci	r25, 0x00	; 0
    1cf0:	a0 40       	sbci	r26, 0x00	; 0
    1cf2:	e1 f7       	brne	.-8      	; 0x1cec <RunEb00ke01+0x3e>
    1cf4:	00 c0       	rjmp	.+0      	; 0x1cf6 <RunEb00ke01+0x48>
    1cf6:	00 00       	nop
	DirTurnRight();
	DriveMove(30,30);
	_delay_ms(200);
	
	
	RunWhileNormal(5);
    1cf8:	85 e0       	ldi	r24, 0x05	; 5
    1cfa:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	DirForward();
    1cfe:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1d02:	88 e2       	ldi	r24, 0x28	; 40
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	99 bd       	out	0x29, r25	; 41
    1d08:	88 bd       	out	0x28, r24	; 40
	OCR_LEFT = pwm_ki;
    1d0a:	9b bd       	out	0x2b, r25	; 43
    1d0c:	8a bd       	out	0x2a, r24	; 42
    1d0e:	8f e7       	ldi	r24, 0x7F	; 127
    1d10:	9c ef       	ldi	r25, 0xFC	; 252
    1d12:	aa e0       	ldi	r26, 0x0A	; 10
    1d14:	81 50       	subi	r24, 0x01	; 1
    1d16:	90 40       	sbci	r25, 0x00	; 0
    1d18:	a0 40       	sbci	r26, 0x00	; 0
    1d1a:	e1 f7       	brne	.-8      	; 0x1d14 <RunEb00ke01+0x66>
    1d1c:	00 c0       	rjmp	.+0      	; 0x1d1e <RunEb00ke01+0x70>
    1d1e:	00 00       	nop
	RunWhileNormal(5);
	DirForward();
	DriveMove(40,40);
	_delay_ms(300);
	
	RunWhileNormal(5);
    1d20:	85 e0       	ldi	r24, 0x05	; 5
    1d22:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	
	DirTurnRight();
    1d26:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1d2a:	d9 bd       	out	0x29, r29	; 41
    1d2c:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1d2e:	db bd       	out	0x2b, r29	; 43
    1d30:	ca bd       	out	0x2a, r28	; 42
    1d32:	8f eb       	ldi	r24, 0xBF	; 191
    1d34:	97 e2       	ldi	r25, 0x27	; 39
    1d36:	a9 e0       	ldi	r26, 0x09	; 9
    1d38:	81 50       	subi	r24, 0x01	; 1
    1d3a:	90 40       	sbci	r25, 0x00	; 0
    1d3c:	a0 40       	sbci	r26, 0x00	; 0
    1d3e:	e1 f7       	brne	.-8      	; 0x1d38 <RunEb00ke01+0x8a>
    1d40:	00 c0       	rjmp	.+0      	; 0x1d42 <RunEb00ke01+0x94>
    1d42:	00 00       	nop
	DirTurnRight();
	DriveMove(30,30);
	_delay_ms(250);
	
	
	RunWhileNormal(10);
    1d44:	8a e0       	ldi	r24, 0x0A	; 10
    1d46:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	DirTurnLeft();
    1d4a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1d4e:	d9 bd       	out	0x29, r29	; 41
    1d50:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1d52:	db bd       	out	0x2b, r29	; 43
    1d54:	ca bd       	out	0x2a, r28	; 42
    1d56:	8f eb       	ldi	r24, 0xBF	; 191
    1d58:	97 e2       	ldi	r25, 0x27	; 39
    1d5a:	a9 e0       	ldi	r26, 0x09	; 9
    1d5c:	81 50       	subi	r24, 0x01	; 1
    1d5e:	90 40       	sbci	r25, 0x00	; 0
    1d60:	a0 40       	sbci	r26, 0x00	; 0
    1d62:	e1 f7       	brne	.-8      	; 0x1d5c <RunEb00ke01+0xae>
    1d64:	00 c0       	rjmp	.+0      	; 0x1d66 <RunEb00ke01+0xb8>
    1d66:	00 00       	nop
	
	RunWhileNormal(10);
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(250);
	DirForward();
    1d68:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1d6c:	d9 bd       	out	0x29, r29	; 41
    1d6e:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1d70:	db bd       	out	0x2b, r29	; 43
    1d72:	ca bd       	out	0x2a, r28	; 42
    1d74:	8f e3       	ldi	r24, 0x3F	; 63
    1d76:	9e e7       	ldi	r25, 0x7E	; 126
    1d78:	a5 e0       	ldi	r26, 0x05	; 5
    1d7a:	81 50       	subi	r24, 0x01	; 1
    1d7c:	90 40       	sbci	r25, 0x00	; 0
    1d7e:	a0 40       	sbci	r26, 0x00	; 0
    1d80:	e1 f7       	brne	.-8      	; 0x1d7a <RunEb00ke01+0xcc>
    1d82:	00 c0       	rjmp	.+0      	; 0x1d84 <RunEb00ke01+0xd6>
    1d84:	00 00       	nop
	DriveMove(30,30);
	_delay_ms(250);
	DirForward();
	DriveMove(30,30);
	_delay_ms(150);
	DirTurnLeft();
    1d86:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1d8a:	d9 bd       	out	0x29, r29	; 41
    1d8c:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1d8e:	db bd       	out	0x2b, r29	; 43
    1d90:	ca bd       	out	0x2a, r28	; 42
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
    1d94:	92 e5       	ldi	r25, 0x52	; 82
    1d96:	a7 e0       	ldi	r26, 0x07	; 7
    1d98:	81 50       	subi	r24, 0x01	; 1
    1d9a:	90 40       	sbci	r25, 0x00	; 0
    1d9c:	a0 40       	sbci	r26, 0x00	; 0
    1d9e:	e1 f7       	brne	.-8      	; 0x1d98 <RunEb00ke01+0xea>
    1da0:	00 c0       	rjmp	.+0      	; 0x1da2 <RunEb00ke01+0xf4>
    1da2:	00 00       	nop
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(200);
	
	
	RunWhileNormal(10);
    1da4:	8a e0       	ldi	r24, 0x0A	; 10
    1da6:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	
	DirTurnLeft();
    1daa:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1dae:	d9 bd       	out	0x29, r29	; 41
    1db0:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1db2:	db bd       	out	0x2b, r29	; 43
    1db4:	ca bd       	out	0x2a, r28	; 42
    1db6:	8f eb       	ldi	r24, 0xBF	; 191
    1db8:	97 e2       	ldi	r25, 0x27	; 39
    1dba:	a9 e0       	ldi	r26, 0x09	; 9
    1dbc:	81 50       	subi	r24, 0x01	; 1
    1dbe:	90 40       	sbci	r25, 0x00	; 0
    1dc0:	a0 40       	sbci	r26, 0x00	; 0
    1dc2:	e1 f7       	brne	.-8      	; 0x1dbc <RunEb00ke01+0x10e>
    1dc4:	00 c0       	rjmp	.+0      	; 0x1dc6 <RunEb00ke01+0x118>
    1dc6:	00 00       	nop
	
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(250);
	
	RunWhileNormal(10);
    1dc8:	8a e0       	ldi	r24, 0x0A	; 10
    1dca:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	
	DirTurnRight();
    1dce:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1dd2:	d9 bd       	out	0x29, r29	; 41
    1dd4:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1dd6:	db bd       	out	0x2b, r29	; 43
    1dd8:	ca bd       	out	0x2a, r28	; 42
    1dda:	8f eb       	ldi	r24, 0xBF	; 191
    1ddc:	97 e2       	ldi	r25, 0x27	; 39
    1dde:	a9 e0       	ldi	r26, 0x09	; 9
    1de0:	81 50       	subi	r24, 0x01	; 1
    1de2:	90 40       	sbci	r25, 0x00	; 0
    1de4:	a0 40       	sbci	r26, 0x00	; 0
    1de6:	e1 f7       	brne	.-8      	; 0x1de0 <RunEb00ke01+0x132>
    1de8:	00 c0       	rjmp	.+0      	; 0x1dea <RunEb00ke01+0x13c>
    1dea:	00 00       	nop
	
	DirTurnRight();
	DriveMove(30,30);
	_delay_ms(250);
	
	RunWhileNormal(5);
    1dec:	85 e0       	ldi	r24, 0x05	; 5
    1dee:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	
	DirForward();
    1df2:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1df6:	d9 bd       	out	0x29, r29	; 41
    1df8:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1dfa:	db bd       	out	0x2b, r29	; 43
    1dfc:	ca bd       	out	0x2a, r28	; 42
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	92 e5       	ldi	r25, 0x52	; 82
    1e02:	a7 e0       	ldi	r26, 0x07	; 7
    1e04:	81 50       	subi	r24, 0x01	; 1
    1e06:	90 40       	sbci	r25, 0x00	; 0
    1e08:	a0 40       	sbci	r26, 0x00	; 0
    1e0a:	e1 f7       	brne	.-8      	; 0x1e04 <RunEb00ke01+0x156>
    1e0c:	00 c0       	rjmp	.+0      	; 0x1e0e <RunEb00ke01+0x160>
    1e0e:	00 00       	nop
	
	DirForward();
	DriveMove(30,30);
	_delay_ms(200);
	
	RunWhileNormal(5);
    1e10:	85 e0       	ldi	r24, 0x05	; 5
    1e12:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	DirTurnRight();
    1e16:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1e1a:	d9 bd       	out	0x29, r29	; 41
    1e1c:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1e1e:	db bd       	out	0x2b, r29	; 43
    1e20:	ca bd       	out	0x2a, r28	; 42
    1e22:	8f eb       	ldi	r24, 0xBF	; 191
    1e24:	97 e2       	ldi	r25, 0x27	; 39
    1e26:	a9 e0       	ldi	r26, 0x09	; 9
    1e28:	81 50       	subi	r24, 0x01	; 1
    1e2a:	90 40       	sbci	r25, 0x00	; 0
    1e2c:	a0 40       	sbci	r26, 0x00	; 0
    1e2e:	e1 f7       	brne	.-8      	; 0x1e28 <RunEb00ke01+0x17a>
    1e30:	00 c0       	rjmp	.+0      	; 0x1e32 <RunEb00ke01+0x184>
    1e32:	00 00       	nop
	
	RunWhileNormal(5);
	DirTurnRight();
	DriveMove(30,30);
	_delay_ms(250);
	DirForward();
    1e34:	0e 94 bc 07 	call	0xf78	; 0xf78 <DirForward>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1e38:	d9 bd       	out	0x29, r29	; 41
    1e3a:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1e3c:	db bd       	out	0x2b, r29	; 43
    1e3e:	ca bd       	out	0x2a, r28	; 42
    1e40:	8f e7       	ldi	r24, 0x7F	; 127
    1e42:	9c ef       	ldi	r25, 0xFC	; 252
    1e44:	aa e0       	ldi	r26, 0x0A	; 10
    1e46:	81 50       	subi	r24, 0x01	; 1
    1e48:	90 40       	sbci	r25, 0x00	; 0
    1e4a:	a0 40       	sbci	r26, 0x00	; 0
    1e4c:	e1 f7       	brne	.-8      	; 0x1e46 <RunEb00ke01+0x198>
    1e4e:	00 c0       	rjmp	.+0      	; 0x1e50 <RunEb00ke01+0x1a2>
    1e50:	00 00       	nop
	_delay_ms(250);
	DirForward();
	DriveMove(30,30);
	_delay_ms(300);
	
	DirTurnLeft();
    1e52:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1e56:	d9 bd       	out	0x29, r29	; 41
    1e58:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1e5a:	db bd       	out	0x2b, r29	; 43
    1e5c:	ca bd       	out	0x2a, r28	; 42
    1e5e:	8f eb       	ldi	r24, 0xBF	; 191
    1e60:	97 e2       	ldi	r25, 0x27	; 39
    1e62:	a9 e0       	ldi	r26, 0x09	; 9
    1e64:	81 50       	subi	r24, 0x01	; 1
    1e66:	90 40       	sbci	r25, 0x00	; 0
    1e68:	a0 40       	sbci	r26, 0x00	; 0
    1e6a:	e1 f7       	brne	.-8      	; 0x1e64 <RunEb00ke01+0x1b6>
    1e6c:	00 c0       	rjmp	.+0      	; 0x1e6e <RunEb00ke01+0x1c0>
    1e6e:	00 00       	nop
	_delay_ms(300);
	
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(250);
	RunWhileNormal(5);
    1e70:	85 e0       	ldi	r24, 0x05	; 5
    1e72:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	
	DirTurnLeft();
    1e76:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1e7a:	d9 bd       	out	0x29, r29	; 41
    1e7c:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1e7e:	db bd       	out	0x2b, r29	; 43
    1e80:	ca bd       	out	0x2a, r28	; 42
    1e82:	8f eb       	ldi	r24, 0xBF	; 191
    1e84:	97 e2       	ldi	r25, 0x27	; 39
    1e86:	a9 e0       	ldi	r26, 0x09	; 9
    1e88:	81 50       	subi	r24, 0x01	; 1
    1e8a:	90 40       	sbci	r25, 0x00	; 0
    1e8c:	a0 40       	sbci	r26, 0x00	; 0
    1e8e:	e1 f7       	brne	.-8      	; 0x1e88 <RunEb00ke01+0x1da>
    1e90:	00 c0       	rjmp	.+0      	; 0x1e92 <RunEb00ke01+0x1e4>
    1e92:	00 00       	nop
	RunWhileNormal(5);
	
	DirTurnLeft();
	DriveMove(30,30);
	_delay_ms(250);
	RunWhileNormal(5);
    1e94:	85 e0       	ldi	r24, 0x05	; 5
    1e96:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	
	DirTurnRight();
    1e9a:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1e9e:	d9 bd       	out	0x29, r29	; 41
    1ea0:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    1ea2:	db bd       	out	0x2b, r29	; 43
    1ea4:	ca bd       	out	0x2a, r28	; 42
    1ea6:	8f eb       	ldi	r24, 0xBF	; 191
    1ea8:	97 e2       	ldi	r25, 0x27	; 39
    1eaa:	a9 e0       	ldi	r26, 0x09	; 9
    1eac:	81 50       	subi	r24, 0x01	; 1
    1eae:	90 40       	sbci	r25, 0x00	; 0
    1eb0:	a0 40       	sbci	r26, 0x00	; 0
    1eb2:	e1 f7       	brne	.-8      	; 0x1eac <RunEb00ke01+0x1fe>
    1eb4:	00 c0       	rjmp	.+0      	; 0x1eb6 <RunEb00ke01+0x208>
    1eb6:	00 00       	nop
	
	DirTurnRight();
	DriveMove(30,30);
	_delay_ms(250);
	
	RunWhileNormal(10);
    1eb8:	8a e0       	ldi	r24, 0x0A	; 10
    1eba:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
	
}
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	08 95       	ret

00001ec4 <RunMapping>:
    1ec4:	2f eb       	ldi	r18, 0xBF	; 191
    1ec6:	37 e2       	ldi	r19, 0x27	; 39
    1ec8:	49 e0       	ldi	r20, 0x09	; 9
    1eca:	21 50       	subi	r18, 0x01	; 1
    1ecc:	30 40       	sbci	r19, 0x00	; 0
    1ece:	40 40       	sbci	r20, 0x00	; 0
    1ed0:	e1 f7       	brne	.-8      	; 0x1eca <RunMapping+0x6>
    1ed2:	00 c0       	rjmp	.+0      	; 0x1ed4 <RunMapping+0x10>
    1ed4:	00 00       	nop

void RunMapping(uint8_t mulai)
{
	///start 0
	_delay_ms(250);
	if (mulai==0)
    1ed6:	88 23       	and	r24, r24
    1ed8:	19 f4       	brne	.+6      	; 0x1ee0 <RunMapping+0x1c>
	{
		RunProgram();
    1eda:	0e 94 bc 09 	call	0x1378	; 0x1378 <RunProgram>
    1ede:	17 c0       	rjmp	.+46     	; 0x1f0e <RunMapping+0x4a>
	}
	else if (mulai==1)
    1ee0:	81 30       	cpi	r24, 0x01	; 1
    1ee2:	19 f4       	brne	.+6      	; 0x1eea <RunMapping+0x26>
	{
		RunEb00ke01();
    1ee4:	0e 94 57 0e 	call	0x1cae	; 0x1cae <RunEb00ke01>
    1ee8:	05 c0       	rjmp	.+10     	; 0x1ef4 <RunMapping+0x30>
		RunEb01ke02();
		//~ RunC00ke01();
		//~ RunEb02ke03();
	}
	else if (mulai==2)
    1eea:	82 30       	cpi	r24, 0x02	; 2
    1eec:	31 f4       	brne	.+12     	; 0x1efa <RunMapping+0x36>
	{
		RunWhileNormal(10);
    1eee:	8a e0       	ldi	r24, 0x0A	; 10
    1ef0:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
		RunEb01ke02();
    1ef4:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <RunEb01ke02>
    1ef8:	0a c0       	rjmp	.+20     	; 0x1f0e <RunMapping+0x4a>
		//~ RunEb02ke03();
	}
	else if (mulai==3)
    1efa:	83 30       	cpi	r24, 0x03	; 3
    1efc:	21 f4       	brne	.+8      	; 0x1f06 <RunMapping+0x42>
	{
		RunWhileNormal(10);
    1efe:	8a e0       	ldi	r24, 0x0A	; 10
    1f00:	0e 94 00 0a 	call	0x1400	; 0x1400 <RunWhileNormal>
    1f04:	04 c0       	rjmp	.+8      	; 0x1f0e <RunMapping+0x4a>
		//~ RunEb02ke03();
		
	}
	else if (mulai==4)
    1f06:	84 30       	cpi	r24, 0x04	; 4
    1f08:	11 f4       	brne	.+4      	; 0x1f0e <RunMapping+0x4a>
	{
		RunEb00ke01();
    1f0a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <RunEb00ke01>
	}
	//~ Run();
	counter=0;
    1f0e:	10 92 8d 02 	sts	0x028D, r1
    1f12:	10 92 8e 02 	sts	0x028E, r1
    1f16:	10 92 8f 02 	sts	0x028F, r1
    1f1a:	10 92 90 02 	sts	0x0290, r1
	gState=STATE_MENU;
    1f1e:	10 92 95 02 	sts	0x0295, r1
    1f22:	10 92 94 02 	sts	0x0294, r1
	OCR1A=0;
    1f26:	1b bc       	out	0x2b, r1	; 43
    1f28:	1a bc       	out	0x2a, r1	; 42
	OCR1B=0;
    1f2a:	19 bc       	out	0x29, r1	; 41
    1f2c:	18 bc       	out	0x28, r1	; 40
	//~ while(1);
}
    1f2e:	08 95       	ret

00001f30 <DriveMove>:
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	79 bd       	out	0x29, r23	; 41
    1f34:	68 bd       	out	0x28, r22	; 40
	OCR_LEFT = pwm_ki;
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9b bd       	out	0x2b, r25	; 43
    1f3a:	8a bd       	out	0x2a, r24	; 42
}
    1f3c:	08 95       	ret

00001f3e <ProgMapping>:
		//~ }
	//~ }
//~ }

void ProgMapping(void)
{
    1f3e:	df 92       	push	r13
    1f40:	ef 92       	push	r14
    1f42:	ff 92       	push	r15
    1f44:	0f 93       	push	r16
    1f46:	1f 93       	push	r17
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
	uint8_t bA, bB;
	gMazeMapNum=0;
    1f4c:	10 92 8c 02 	sts	0x028C, r1
	gMazeMapTot=0;
    1f50:	10 92 86 02 	sts	0x0286, r1
	uint8_t sempling=0,maxsempling=25;
	LCDclr();
    1f54:	0e 94 29 17 	call	0x2e52	; 0x2e52 <LCDclr>
void ProgMapping(void)
{
	uint8_t bA, bB;
	gMazeMapNum=0;
	gMazeMapTot=0;
	uint8_t sempling=0,maxsempling=25;
    1f58:	09 e1       	ldi	r16, 0x19	; 25
    1f5a:	d0 2e       	mov	r13, r16
		if (ButtonNext())	maxsempling++;
		if (ButtonPrev())	maxsempling--;
		cetak_bil(maxsempling,0,0,3);
		if (ButtonBack())
		{
			gState = STATE_RUN;
    1f5c:	c7 e0       	ldi	r28, 0x07	; 7
    1f5e:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t bA, bB;
	gMazeMapNum=0;
	gMazeMapTot=0;
	uint8_t sempling=0,maxsempling=25;
	LCDclr();
	while(!ButtonEnter())
    1f60:	19 c0       	rjmp	.+50     	; 0x1f94 <ProgMapping+0x56>
	{
		if (ButtonNext())	maxsempling++;
    1f62:	0e 94 a6 01 	call	0x34c	; 0x34c <ButtonNext>
    1f66:	81 11       	cpse	r24, r1
    1f68:	d3 94       	inc	r13
		if (ButtonPrev())	maxsempling--;
    1f6a:	0e 94 ab 01 	call	0x356	; 0x356 <ButtonPrev>
    1f6e:	81 11       	cpse	r24, r1
    1f70:	da 94       	dec	r13
		cetak_bil(maxsempling,0,0,3);
    1f72:	8d 2d       	mov	r24, r13
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	60 e0       	ldi	r22, 0x00	; 0
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	23 e0       	ldi	r18, 0x03	; 3
    1f7c:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
		if (ButtonBack())
    1f80:	0e 94 a1 01 	call	0x342	; 0x342 <ButtonBack>
    1f84:	88 23       	and	r24, r24
    1f86:	31 f0       	breq	.+12     	; 0x1f94 <ProgMapping+0x56>
		{
			gState = STATE_RUN;
    1f88:	d0 93 95 02 	sts	0x0295, r29
    1f8c:	c0 93 94 02 	sts	0x0294, r28
			Run();
    1f90:	0e 94 98 0a 	call	0x1530	; 0x1530 <Run>
	uint8_t bA, bB;
	gMazeMapNum=0;
	gMazeMapTot=0;
	uint8_t sempling=0,maxsempling=25;
	LCDclr();
	while(!ButtonEnter())
    1f94:	0e 94 9c 01 	call	0x338	; 0x338 <ButtonEnter>
    1f98:	88 23       	and	r24, r24
    1f9a:	19 f3       	breq	.-58     	; 0x1f62 <ProgMapping+0x24>
    1f9c:	00 e0       	ldi	r16, 0x00	; 0
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    1f9e:	ce e1       	ldi	r28, 0x1E	; 30
    1fa0:	d0 e0       	ldi	r29, 0x00	; 0
    1fa2:	03 c0       	rjmp	.+6      	; 0x1faa <ProgMapping+0x6c>
			//~ OCR1B=30;
		//~ }
		
		while (PIDGetError() && !((gSensH==0) && (gSensL==0)) && (isclear(gSensA,SENS_A_LEFT_BIT)) && (isclear(gSensA,SENS_A_RIGHT_BIT)))
		{
			PIDCalculateExecute();
    1fa4:	0e 94 4d 08 	call	0x109a	; 0x109a <PIDCalculateExecute>
					SensorReadDigital();
					DirTurnRight();
					DriveMove(30,30);
				}
			}
			sempling = 0;
    1fa8:	00 e0       	ldi	r16, 0x00	; 0
			//~ DirForward();
			//~ OCR1A=30;
			//~ OCR1B=30;
		//~ }
		
		while (PIDGetError() && !((gSensH==0) && (gSensL==0)) && (isclear(gSensA,SENS_A_LEFT_BIT)) && (isclear(gSensA,SENS_A_RIGHT_BIT)))
    1faa:	0e 94 98 07 	call	0xf30	; 0xf30 <PIDGetError>
    1fae:	88 23       	and	r24, r24
    1fb0:	b1 f0       	breq	.+44     	; 0x1fde <ProgMapping+0xa0>
    1fb2:	80 91 d1 02 	lds	r24, 0x02D1
    1fb6:	88 23       	and	r24, r24
    1fb8:	21 f4       	brne	.+8      	; 0x1fc2 <ProgMapping+0x84>
    1fba:	80 91 cf 02 	lds	r24, 0x02CF
    1fbe:	88 23       	and	r24, r24
    1fc0:	71 f0       	breq	.+28     	; 0x1fde <ProgMapping+0xa0>
    1fc2:	80 91 87 03 	lds	r24, 0x0387
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
    1fcc:	88 23       	and	r24, r24
    1fce:	39 f0       	breq	.+14     	; 0x1fde <ProgMapping+0xa0>
    1fd0:	80 91 87 03 	lds	r24, 0x0387
    1fd4:	61 e0       	ldi	r22, 0x01	; 1
    1fd6:	0e 94 7b 00 	call	0xf6	; 0xf6 <isclear>
    1fda:	88 23       	and	r24, r24
    1fdc:	19 f7       	brne	.-58     	; 0x1fa4 <ProgMapping+0x66>
		{
			PIDCalculateExecute();
			sempling=0;
		}
		if ((gSensH==0)&&(gSensL==0)&&(		(isset(gSensA,SENS_A_LEFT_BIT))||(isset(gSensA,SENS_A_RIGHT_BIT))		))
    1fde:	80 91 d1 02 	lds	r24, 0x02D1
    1fe2:	88 23       	and	r24, r24
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <ProgMapping+0xaa>
    1fe6:	47 c0       	rjmp	.+142    	; 0x2076 <ProgMapping+0x138>
    1fe8:	80 91 cf 02 	lds	r24, 0x02CF
    1fec:	88 23       	and	r24, r24
    1fee:	09 f0       	breq	.+2      	; 0x1ff2 <ProgMapping+0xb4>
    1ff0:	42 c0       	rjmp	.+132    	; 0x2076 <ProgMapping+0x138>
    1ff2:	80 91 87 03 	lds	r24, 0x0387
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    1ffc:	88 23       	and	r24, r24
    1ffe:	39 f4       	brne	.+14     	; 0x200e <ProgMapping+0xd0>
    2000:	80 91 87 03 	lds	r24, 0x0387
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    200a:	88 23       	and	r24, r24
    200c:	a1 f1       	breq	.+104    	; 0x2076 <ProgMapping+0x138>
		{
			if (isset(gSensA,SENS_A_LEFT_BIT))
    200e:	80 91 87 03 	lds	r24, 0x0387
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    2018:	88 23       	and	r24, r24
    201a:	49 f4       	brne	.+18     	; 0x202e <ProgMapping+0xf0>
    201c:	12 c0       	rjmp	.+36     	; 0x2042 <ProgMapping+0x104>
			{
				while ((gSensL==0)&&(gSensH==0))
				{
					SensorReadDigital();
    201e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
					DirTurnLeft();
    2022:	0e 94 c6 07 	call	0xf8c	; 0xf8c <DirTurnLeft>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    2026:	d9 bd       	out	0x29, r29	; 41
    2028:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    202a:	db bd       	out	0x2b, r29	; 43
    202c:	ca bd       	out	0x2a, r28	; 42
		}
		if ((gSensH==0)&&(gSensL==0)&&(		(isset(gSensA,SENS_A_LEFT_BIT))||(isset(gSensA,SENS_A_RIGHT_BIT))		))
		{
			if (isset(gSensA,SENS_A_LEFT_BIT))
			{
				while ((gSensL==0)&&(gSensH==0))
    202e:	80 91 cf 02 	lds	r24, 0x02CF
    2032:	88 23       	and	r24, r24
    2034:	09 f0       	breq	.+2      	; 0x2038 <ProgMapping+0xfa>
    2036:	b8 cf       	rjmp	.-144    	; 0x1fa8 <ProgMapping+0x6a>
    2038:	80 91 d1 02 	lds	r24, 0x02D1
    203c:	88 23       	and	r24, r24
    203e:	79 f3       	breq	.-34     	; 0x201e <ProgMapping+0xe0>
    2040:	b3 cf       	rjmp	.-154    	; 0x1fa8 <ProgMapping+0x6a>
					SensorReadDigital();
					DirTurnLeft();
					DriveMove(30,30);
				}
			}
			else if (isset(gSensA,SENS_A_RIGHT_BIT))
    2042:	80 91 87 03 	lds	r24, 0x0387
    2046:	61 e0       	ldi	r22, 0x01	; 1
    2048:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    204c:	88 23       	and	r24, r24
    204e:	49 f4       	brne	.+18     	; 0x2062 <ProgMapping+0x124>
    2050:	ab cf       	rjmp	.-170    	; 0x1fa8 <ProgMapping+0x6a>
			{
				while ((gSensL==0)&&(gSensH==0))
				{
					SensorReadDigital();
    2052:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
					DirTurnRight();
    2056:	0e 94 ca 07 	call	0xf94	; 0xf94 <DirTurnRight>
	//~ LCDstring("kanan",5);
}

void DriveMove(uint8_t pwm_ki, uint8_t pwm_ka)
{
	OCR_RIGHT= pwm_ka;
    205a:	d9 bd       	out	0x29, r29	; 41
    205c:	c8 bd       	out	0x28, r28	; 40
	OCR_LEFT = pwm_ki;
    205e:	db bd       	out	0x2b, r29	; 43
    2060:	ca bd       	out	0x2a, r28	; 42
					DriveMove(30,30);
				}
			}
			else if (isset(gSensA,SENS_A_RIGHT_BIT))
			{
				while ((gSensL==0)&&(gSensH==0))
    2062:	80 91 cf 02 	lds	r24, 0x02CF
    2066:	88 23       	and	r24, r24
    2068:	09 f0       	breq	.+2      	; 0x206c <ProgMapping+0x12e>
    206a:	9e cf       	rjmp	.-196    	; 0x1fa8 <ProgMapping+0x6a>
    206c:	80 91 d1 02 	lds	r24, 0x02D1
    2070:	88 23       	and	r24, r24
    2072:	79 f3       	breq	.-34     	; 0x2052 <ProgMapping+0x114>
    2074:	99 cf       	rjmp	.-206    	; 0x1fa8 <ProgMapping+0x6a>
			}
			sempling = 0;
		}
		else
		{
			sempling++;
    2076:	0f 5f       	subi	r16, 0xFF	; 255
			if (sempling>maxsempling)
    2078:	d0 16       	cp	r13, r16
    207a:	08 f0       	brcs	.+2      	; 0x207e <ProgMapping+0x140>
    207c:	96 cf       	rjmp	.-212    	; 0x1faa <ProgMapping+0x6c>
			{
				cetak_bil(gMazeMapNum,0,0,3);
    207e:	80 91 8c 02 	lds	r24, 0x028C
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	23 e0       	ldi	r18, 0x03	; 3
    208a:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
				cetak_bil(gSensH,0,1,3);
    208e:	80 91 d1 02 	lds	r24, 0x02D1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	23 e0       	ldi	r18, 0x03	; 3
    209a:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
				cetak_bil(gSensL,4,1,3);
    209e:	80 91 cf 02 	lds	r24, 0x02CF
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	64 e0       	ldi	r22, 0x04	; 4
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	23 e0       	ldi	r18, 0x03	; 3
    20aa:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
				cetak_bil(gSensA,8,1,3);
    20ae:	80 91 87 03 	lds	r24, 0x0387
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	68 e0       	ldi	r22, 0x08	; 8
    20b6:	41 e0       	ldi	r20, 0x01	; 1
    20b8:	23 e0       	ldi	r18, 0x03	; 3
    20ba:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
				gMazeMapNum++;
    20be:	80 91 8c 02 	lds	r24, 0x028C
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	80 93 8c 02 	sts	0x028C, r24
				gMazeMapTot++;
    20c8:	80 91 86 02 	lds	r24, 0x0286
    20cc:	8f 5f       	subi	r24, 0xFF	; 255
    20ce:	80 93 86 02 	sts	0x0286, r24
				bA=OCR1A;
    20d2:	ea b4       	in	r14, 0x2a	; 42
    20d4:	fb b4       	in	r15, 0x2b	; 43
				bB=OCR1B;
    20d6:	08 b5       	in	r16, 0x28	; 40
    20d8:	19 b5       	in	r17, 0x29	; 41
				OCR1A=0;
    20da:	1b bc       	out	0x2b, r1	; 43
    20dc:	1a bc       	out	0x2a, r1	; 42
				OCR1B=0;
    20de:	19 bc       	out	0x29, r1	; 41
    20e0:	18 bc       	out	0x28, r1	; 40
				ButtonWait();
    20e2:	0e 94 b0 01 	call	0x360	; 0x360 <ButtonWait>
				OCR1A = bA;
    20e6:	ff 24       	eor	r15, r15
    20e8:	fb bc       	out	0x2b, r15	; 43
    20ea:	ea bc       	out	0x2a, r14	; 42
				OCR1B = bB;
    20ec:	10 e0       	ldi	r17, 0x00	; 0
    20ee:	19 bd       	out	0x29, r17	; 41
    20f0:	08 bd       	out	0x28, r16	; 40
				sempling=0;
				gDriveError = 0;
    20f2:	10 92 60 03 	sts	0x0360, r1
				gDriveLastError = 0;
    20f6:	10 92 93 02 	sts	0x0293, r1
    20fa:	56 cf       	rjmp	.-340    	; 0x1fa8 <ProgMapping+0x6a>

000020fc <MapWriteTurn>:
		}
	}
}

void MapWriteTurn(uint8_t queue_num, uint8_t turn)
{
    20fc:	1f 93       	push	r17
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29
    2102:	16 2f       	mov	r17, r22
	uint8_t tcaua;
	tcaua = EepromRead(ADDRESS_BLOCK_MAP_ACT_TURN_CASE_A_UNTIL_A+queue_num);
    2104:	c8 2f       	mov	r28, r24
    2106:	d0 e0       	ldi	r29, 0x00	; 0
    2108:	c2 58       	subi	r28, 0x82	; 130
    210a:	de 4f       	sbci	r29, 0xFE	; 254
    210c:	ce 01       	movw	r24, r28
    210e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
	tcaua = tcaua & 0b11111100;
    2112:	68 2f       	mov	r22, r24
    2114:	6c 7f       	andi	r22, 0xFC	; 252
	tcaua = tcaua | turn;
    2116:	61 2b       	or	r22, r17
	EepromWrite(ADDRESS_BLOCK_MAP_ACT_TURN_CASE_A_UNTIL_A+queue_num,tcaua);
    2118:	ce 01       	movw	r24, r28
    211a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eeupd_byte_m32>
}
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	08 95       	ret

00002126 <MapReadTurn>:
uint8_t MapReadTurn(uint8_t queue_num)
{
	uint8_t tcaua;
	tcaua = EepromRead(ADDRESS_BLOCK_MAP_ACT_TURN_CASE_A_UNTIL_A+queue_num);
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	82 58       	subi	r24, 0x82	; 130
    212a:	9e 4f       	sbci	r25, 0xFE	; 254
    212c:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
	tcaua = tcaua & 0b00000011;
	return tcaua;
}
    2130:	83 70       	andi	r24, 0x03	; 3
    2132:	08 95       	ret

00002134 <MapWriteCaseA>:
void MapWriteCaseA(uint8_t queue_num, uint8_t casea)
{
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	0f 92       	push	r0
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
	uint8_t tcaua;
	tcaua = EepromRead(ADDRESS_BLOCK_MAP_ACT_TURN_CASE_A_UNTIL_A+queue_num);
    2142:	08 2f       	mov	r16, r24
    2144:	10 e0       	ldi	r17, 0x00	; 0
    2146:	02 58       	subi	r16, 0x82	; 130
    2148:	1e 4f       	sbci	r17, 0xFE	; 254
    214a:	c8 01       	movw	r24, r16
    214c:	69 83       	std	Y+1, r22	; 0x01
    214e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
	tcaua = tcaua & 0b00011111;
    2152:	8f 71       	andi	r24, 0x1F	; 31
	tcaua = tcaua | (casea<<5);
    2154:	69 81       	ldd	r22, Y+1	; 0x01
    2156:	62 95       	swap	r22
    2158:	66 0f       	add	r22, r22
    215a:	60 7e       	andi	r22, 0xE0	; 224
    215c:	68 2b       	or	r22, r24
	EepromWrite(ADDRESS_BLOCK_MAP_ACT_TURN_CASE_A_UNTIL_A+queue_num,tcaua);
    215e:	c8 01       	movw	r24, r16
    2160:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eeupd_byte_m32>
}
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	08 95       	ret

00002170 <MapWriteUntilA>:
void MapWriteUntilA(uint8_t queue_num, uint8_t untila)
{
    2170:	0f 93       	push	r16
    2172:	1f 93       	push	r17
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	0f 92       	push	r0
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
	uint8_t tcaua;
	tcaua = EepromRead(ADDRESS_BLOCK_MAP_ACT_TURN_CASE_A_UNTIL_A+queue_num);
    217e:	08 2f       	mov	r16, r24
    2180:	10 e0       	ldi	r17, 0x00	; 0
    2182:	02 58       	subi	r16, 0x82	; 130
    2184:	1e 4f       	sbci	r17, 0xFE	; 254
    2186:	c8 01       	movw	r24, r16
    2188:	69 83       	std	Y+1, r22	; 0x01
    218a:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
	tcaua = tcaua & 0b11100011;
    218e:	83 7e       	andi	r24, 0xE3	; 227
	tcaua = tcaua | (untila<<2);
    2190:	69 81       	ldd	r22, Y+1	; 0x01
    2192:	66 0f       	add	r22, r22
    2194:	66 0f       	add	r22, r22
    2196:	68 2b       	or	r22, r24
	EepromWrite(ADDRESS_BLOCK_MAP_ACT_TURN_CASE_A_UNTIL_A+queue_num,tcaua);
    2198:	c8 01       	movw	r24, r16
    219a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eeupd_byte_m32>
}
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	08 95       	ret

000021aa <MapReadCaseA>:
uint8_t MapReadCaseA(uint8_t queue_num)
{
	uint8_t tcaua;
	tcaua = EepromRead(ADDRESS_BLOCK_MAP_ACT_TURN_CASE_A_UNTIL_A+queue_num);
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	82 58       	subi	r24, 0x82	; 130
    21ae:	9e 4f       	sbci	r25, 0xFE	; 254
    21b0:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
	tcaua = tcaua & 0b11100000;
	tcaua = (tcaua>>5);
	return tcaua;
}
    21b4:	82 95       	swap	r24
    21b6:	86 95       	lsr	r24
    21b8:	87 70       	andi	r24, 0x07	; 7
    21ba:	08 95       	ret

000021bc <MapReadUntilA>:
uint8_t MapReadUntilA(uint8_t queue_num)
{
	uint8_t tcaua;
	tcaua = EepromRead(ADDRESS_BLOCK_MAP_ACT_TURN_CASE_A_UNTIL_A+queue_num);
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	82 58       	subi	r24, 0x82	; 130
    21c0:	9e 4f       	sbci	r25, 0xFE	; 254
    21c2:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
	tcaua = tcaua & 0b00011100;
    21c6:	8c 71       	andi	r24, 0x1C	; 28
	tcaua = (tcaua>>2);
	return tcaua;
}
    21c8:	86 95       	lsr	r24
    21ca:	86 95       	lsr	r24
    21cc:	08 95       	ret

000021ce <MapWriteTCAUA>:
void MapWriteTCAUA(uint8_t queue_num, uint8_t tcaua)
{
	EepromWrite(ADDRESS_BLOCK_MAP_ACT_TURN_CASE_A_UNTIL_A+queue_num,tcaua);
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	82 58       	subi	r24, 0x82	; 130
    21d2:	9e 4f       	sbci	r25, 0xFE	; 254
    21d4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eeupd_byte_m32>
}
    21d8:	08 95       	ret

000021da <MapReadTCAUA>:
uint8_t MapReadTCAUA(uint8_t queue_num)
{
	return EepromRead(ADDRESS_BLOCK_MAP_ACT_TURN_CASE_A_UNTIL_A+queue_num);
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	82 58       	subi	r24, 0x82	; 130
    21de:	9e 4f       	sbci	r25, 0xFE	; 254
    21e0:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__eerd_byte_m32>
}
    21e4:	08 95       	ret

000021e6 <GetCursor>:

uint8_t GetCursor(uint16_t numstate)
{
	return (numstate%10);
    21e6:	6a e0       	ldi	r22, 0x0A	; 10
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	0e 94 99 18 	call	0x3132	; 0x3132 <__udivmodhi4>
}
    21ee:	08 95       	ret

000021f0 <GetParent>:
uint8_t GetParent(uint16_t numstate)
{
	return (numstate/10);
    21f0:	6a e0       	ldi	r22, 0x0A	; 10
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	0e 94 99 18 	call	0x3132	; 0x3132 <__udivmodhi4>
}
    21f8:	86 2f       	mov	r24, r22
    21fa:	08 95       	ret

000021fc <GetChild>:
uint8_t GetChild(uint8_t parent, uint8_t childid)
{
	return (parent*10)+childid;
    21fc:	98 2f       	mov	r25, r24
    21fe:	99 0f       	add	r25, r25
    2200:	89 2f       	mov	r24, r25
    2202:	88 0f       	add	r24, r24
    2204:	88 0f       	add	r24, r24
    2206:	89 0f       	add	r24, r25
}
    2208:	86 0f       	add	r24, r22
    220a:	08 95       	ret

0000220c <ReStrainScroll>:

void ReStrainScroll()
{
	if (gScrollNum<1)
    220c:	90 91 d0 02 	lds	r25, 0x02D0
    2210:	80 91 cb 02 	lds	r24, 0x02CB
    2214:	99 23       	and	r25, r25
    2216:	19 f4       	brne	.+6      	; 0x221e <ReStrainScroll+0x12>
	{
		gScrollNum = gScrollMax;
    2218:	80 93 d0 02 	sts	0x02D0, r24
    221c:	08 95       	ret
	}
	else if (gScrollNum>gScrollMax)
    221e:	89 17       	cp	r24, r25
    2220:	18 f4       	brcc	.+6      	; 0x2228 <ReStrainScroll+0x1c>
	{
		gScrollNum = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	80 93 d0 02 	sts	0x02D0, r24
    2228:	08 95       	ret

0000222a <PrintScroll>:
	}
}

void PrintScroll(uint8_t sNum, uint8_t sMax)
{
    222a:	ff 92       	push	r15
    222c:	0f 93       	push	r16
    222e:	1f 93       	push	r17
    2230:	08 2f       	mov	r16, r24
    2232:	16 2f       	mov	r17, r22
	uint8_t mulai = 0;
	uint8_t nScroll = 1;
	lcdhapus(0,15,1);
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	6f e0       	ldi	r22, 0x0F	; 15
    2238:	41 e0       	ldi	r20, 0x01	; 1
    223a:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcdhapus>
	mulai = 8-(sMax/2);
    223e:	91 2f       	mov	r25, r17
    2240:	96 95       	lsr	r25
	LCDGotoXY(mulai,1);
    2242:	88 e0       	ldi	r24, 0x08	; 8
    2244:	89 1b       	sub	r24, r25
    2246:	61 e0       	ldi	r22, 0x01	; 1
    2248:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
	for (nScroll = 1; nScroll<=sMax; nScroll++)
    224c:	ff 24       	eor	r15, r15
    224e:	f3 94       	inc	r15
    2250:	0b c0       	rjmp	.+22     	; 0x2268 <PrintScroll+0x3e>
	{
		if (nScroll == sNum)
    2252:	f0 16       	cp	r15, r16
    2254:	19 f4       	brne	.+6      	; 0x225c <PrintScroll+0x32>
		{
			LCDstring("#",1);
    2256:	88 e9       	ldi	r24, 0x98	; 152
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <PrintScroll+0x36>
		}
		else
		{
			LCDstring("-",1);
    225c:	8a e9       	ldi	r24, 0x9A	; 154
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	61 e0       	ldi	r22, 0x01	; 1
    2262:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
	uint8_t mulai = 0;
	uint8_t nScroll = 1;
	lcdhapus(0,15,1);
	mulai = 8-(sMax/2);
	LCDGotoXY(mulai,1);
	for (nScroll = 1; nScroll<=sMax; nScroll++)
    2266:	f3 94       	inc	r15
    2268:	1f 15       	cp	r17, r15
    226a:	98 f7       	brcc	.-26     	; 0x2252 <PrintScroll+0x28>
		else
		{
			LCDstring("-",1);
		}
	}
}
    226c:	1f 91       	pop	r17
    226e:	0f 91       	pop	r16
    2270:	ff 90       	pop	r15
    2272:	08 95       	ret

00002274 <Menu>:

void Menu()
{
    2274:	2f 92       	push	r2
    2276:	3f 92       	push	r3
    2278:	4f 92       	push	r4
    227a:	5f 92       	push	r5
    227c:	6f 92       	push	r6
    227e:	7f 92       	push	r7
    2280:	8f 92       	push	r8
    2282:	9f 92       	push	r9
    2284:	af 92       	push	r10
    2286:	bf 92       	push	r11
    2288:	cf 92       	push	r12
    228a:	df 92       	push	r13
    228c:	ef 92       	push	r14
    228e:	ff 92       	push	r15
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	0f 92       	push	r0
    229a:	cd b7       	in	r28, 0x3d	; 61
    229c:	de b7       	in	r29, 0x3e	; 62
	gScrollMax = MAX_SCROLL_MENU;
    229e:	89 e0       	ldi	r24, 0x09	; 9
    22a0:	80 93 cb 02 	sts	0x02CB, r24
	ReStrainScroll();
    22a4:	0e 94 06 11 	call	0x220c	; 0x220c <ReStrainScroll>
			LCDstring((uint8_t*)("RUN LEARN      B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_RUN_LEARN;
    22a8:	01 e0       	ldi	r16, 0x01	; 1
    22aa:	10 e0       	ldi	r17, 0x00	; 0
			LCDstring((uint8_t*)("SETTING       0B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_MENU;
    22ac:	66 e0       	ldi	r22, 0x06	; 6
    22ae:	e6 2e       	mov	r14, r22
    22b0:	f1 2c       	mov	r15, r1
			LCDstring((uint8_t*)("CALIBRATE     0B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_CALIBRATE;
    22b2:	55 e0       	ldi	r21, 0x05	; 5
    22b4:	c5 2e       	mov	r12, r21
    22b6:	d1 2c       	mov	r13, r1
			LCDstring((uint8_t*)("RUN TEST CTR   B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_RUN_TEST_COUNTER;
    22b8:	48 e0       	ldi	r20, 0x08	; 8
    22ba:	a4 2e       	mov	r10, r20
    22bc:	b1 2c       	mov	r11, r1
			LCDstring((uint8_t*)("MAPPING C3    B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_RUN_MAPPING_C3;
    22be:	33 e0       	ldi	r19, 0x03	; 3
    22c0:	83 2e       	mov	r8, r19
    22c2:	91 2c       	mov	r9, r1
			LCDstring((uint8_t*)("MAPPING C2    B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_RUN_MAPPING_C2;
    22c4:	22 e0       	ldi	r18, 0x02	; 2
    22c6:	62 2e       	mov	r6, r18
    22c8:	71 2c       	mov	r7, r1
			LCDstring((uint8_t*)("MAPPING C1    B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_RUN_MAPPING_C1;
    22ca:	9a e0       	ldi	r25, 0x0A	; 10
    22cc:	49 2e       	mov	r4, r25
    22ce:	51 2c       	mov	r5, r1
			LCDstring((uint8_t*)("RUN MAPPING   0B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_RUN_MAPPING;
    22d0:	89 e0       	ldi	r24, 0x09	; 9
    22d2:	28 2e       	mov	r2, r24
    22d4:	31 2c       	mov	r3, r1

void Menu()
{
	gScrollMax = MAX_SCROLL_MENU;
	ReStrainScroll();
	while (gState == STATE_MENU)
    22d6:	f1 c0       	rjmp	.+482    	; 0x24ba <Menu+0x246>
	{		
		ReStrainScroll();
    22d8:	0e 94 06 11 	call	0x220c	; 0x220c <ReStrainScroll>
		PrintScroll(gScrollNum,gScrollMax);
    22dc:	80 91 d0 02 	lds	r24, 0x02D0
    22e0:	60 91 cb 02 	lds	r22, 0x02CB
    22e4:	0e 94 15 11 	call	0x222a	; 0x222a <PrintScroll>
		if (gScrollNum == GetCursor(STATE_RUN))
    22e8:	20 91 d0 02 	lds	r18, 0x02D0
    22ec:	27 30       	cpi	r18, 0x07	; 7
    22ee:	a9 f4       	brne	.+42     	; 0x231a <Menu+0xa6>
		{
			LCDGotoXY(0,0);
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("RUN           0B"),16);
    22f8:	8c e9       	ldi	r24, 0x9C	; 156
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	60 e1       	ldi	r22, 0x10	; 16
    22fe:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    2302:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    2306:	81 30       	cpi	r24, 0x01	; 1
    2308:	09 f0       	breq	.+2      	; 0x230c <Menu+0x98>
    230a:	ca c0       	rjmp	.+404    	; 0x24a0 <Menu+0x22c>
			{
				gState = STATE_RUN;
    230c:	27 e0       	ldi	r18, 0x07	; 7
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	30 93 95 02 	sts	0x0295, r19
    2314:	20 93 94 02 	sts	0x0294, r18
    2318:	ce c0       	rjmp	.+412    	; 0x24b6 <Menu+0x242>
			else if (act == BUTTON_PREV_DOWN)
			{
				gScrollNum--;
			}
		}
		else if (gScrollNum == GetCursor(STATE_RUN_MAPPING))
    231a:	29 30       	cpi	r18, 0x09	; 9
    231c:	99 f4       	brne	.+38     	; 0x2344 <Menu+0xd0>
		{
			LCDGotoXY(0,0);
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("RUN MAPPING   0B"),16);
    2326:	8d ea       	ldi	r24, 0xAD	; 173
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	60 e1       	ldi	r22, 0x10	; 16
    232c:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    2330:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    2334:	81 30       	cpi	r24, 0x01	; 1
    2336:	09 f0       	breq	.+2      	; 0x233a <Menu+0xc6>
    2338:	b3 c0       	rjmp	.+358    	; 0x24a0 <Menu+0x22c>
			{
				gState = STATE_RUN_MAPPING;
    233a:	30 92 95 02 	sts	0x0295, r3
    233e:	20 92 94 02 	sts	0x0294, r2
    2342:	b9 c0       	rjmp	.+370    	; 0x24b6 <Menu+0x242>
			else if (act == BUTTON_PREV_DOWN)
			{
				gScrollNum--;
			}
		}
		else if (gScrollNum == GetCursor(STATE_RUN_MAPPING_C1))
    2344:	22 23       	and	r18, r18
    2346:	99 f4       	brne	.+38     	; 0x236e <Menu+0xfa>
		{
			LCDGotoXY(0,0);
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("MAPPING C1    B"),16);
    2350:	8e eb       	ldi	r24, 0xBE	; 190
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	60 e1       	ldi	r22, 0x10	; 16
    2356:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    235a:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    235e:	81 30       	cpi	r24, 0x01	; 1
    2360:	09 f0       	breq	.+2      	; 0x2364 <Menu+0xf0>
    2362:	9e c0       	rjmp	.+316    	; 0x24a0 <Menu+0x22c>
			{
				gState = STATE_RUN_MAPPING_C1;
    2364:	50 92 95 02 	sts	0x0295, r5
    2368:	40 92 94 02 	sts	0x0294, r4
    236c:	a4 c0       	rjmp	.+328    	; 0x24b6 <Menu+0x242>
			else if (act == BUTTON_PREV_DOWN)
			{
				gScrollNum--;
			}
		}
		else if (gScrollNum == GetCursor(STATE_RUN_MAPPING_C2))
    236e:	22 30       	cpi	r18, 0x02	; 2
    2370:	99 f4       	brne	.+38     	; 0x2398 <Menu+0x124>
		{
			LCDGotoXY(0,0);
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("MAPPING C2    B"),16);
    237a:	8e ec       	ldi	r24, 0xCE	; 206
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	60 e1       	ldi	r22, 0x10	; 16
    2380:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    2384:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	09 f0       	breq	.+2      	; 0x238e <Menu+0x11a>
    238c:	89 c0       	rjmp	.+274    	; 0x24a0 <Menu+0x22c>
			{
				gState = STATE_RUN_MAPPING_C2;
    238e:	70 92 95 02 	sts	0x0295, r7
    2392:	60 92 94 02 	sts	0x0294, r6
    2396:	8f c0       	rjmp	.+286    	; 0x24b6 <Menu+0x242>
			else if (act == BUTTON_PREV_DOWN)
			{
				gScrollNum--;
			}
		}
		else if (gScrollNum == GetCursor(STATE_RUN_MAPPING_C3))
    2398:	23 30       	cpi	r18, 0x03	; 3
    239a:	99 f4       	brne	.+38     	; 0x23c2 <Menu+0x14e>
		{
			LCDGotoXY(0,0);
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("MAPPING C3    B"),16);
    23a4:	8e ed       	ldi	r24, 0xDE	; 222
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	60 e1       	ldi	r22, 0x10	; 16
    23aa:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    23ae:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    23b2:	81 30       	cpi	r24, 0x01	; 1
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <Menu+0x144>
    23b6:	74 c0       	rjmp	.+232    	; 0x24a0 <Menu+0x22c>
			{
				gState = STATE_RUN_MAPPING_C3;
    23b8:	90 92 95 02 	sts	0x0295, r9
    23bc:	80 92 94 02 	sts	0x0294, r8
    23c0:	7a c0       	rjmp	.+244    	; 0x24b6 <Menu+0x242>
			{
				gScrollNum--;
			}
		}
		
		else if (gScrollNum == GetCursor(STATE_RUN_TEST_COUNTER))
    23c2:	28 30       	cpi	r18, 0x08	; 8
    23c4:	99 f4       	brne	.+38     	; 0x23ec <Menu+0x178>
		{
			LCDGotoXY(0,0);
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("RUN TEST CTR   B"),16);
    23ce:	8e ee       	ldi	r24, 0xEE	; 238
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	60 e1       	ldi	r22, 0x10	; 16
    23d4:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    23d8:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	09 f0       	breq	.+2      	; 0x23e2 <Menu+0x16e>
    23e0:	5f c0       	rjmp	.+190    	; 0x24a0 <Menu+0x22c>
			{
				gState = STATE_RUN_TEST_COUNTER;
    23e2:	b0 92 95 02 	sts	0x0295, r11
    23e6:	a0 92 94 02 	sts	0x0294, r10
    23ea:	65 c0       	rjmp	.+202    	; 0x24b6 <Menu+0x242>
			{
				gScrollNum--;
			}
		}
		
		else if (gScrollNum == GetCursor(STATE_CALIBRATE))
    23ec:	25 30       	cpi	r18, 0x05	; 5
    23ee:	99 f4       	brne	.+38     	; 0x2416 <Menu+0x1a2>
		{
			LCDGotoXY(0,0);
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("CALIBRATE     0B"),16);
    23f8:	8f ef       	ldi	r24, 0xFF	; 255
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	60 e1       	ldi	r22, 0x10	; 16
    23fe:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    2402:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    2406:	81 30       	cpi	r24, 0x01	; 1
    2408:	09 f0       	breq	.+2      	; 0x240c <Menu+0x198>
    240a:	4a c0       	rjmp	.+148    	; 0x24a0 <Menu+0x22c>
			{
				gState = STATE_CALIBRATE;
    240c:	d0 92 95 02 	sts	0x0295, r13
    2410:	c0 92 94 02 	sts	0x0294, r12
    2414:	50 c0       	rjmp	.+160    	; 0x24b6 <Menu+0x242>
			else if (act == BUTTON_PREV_DOWN)
			{
				gScrollNum--;
			}
		}
		else if (gScrollNum == GetCursor(STATE_SETTING_MENU))
    2416:	26 30       	cpi	r18, 0x06	; 6
    2418:	a9 f4       	brne	.+42     	; 0x2444 <Menu+0x1d0>
		{
			LCDGotoXY(0,0);
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("SETTING       0B"),16);
    2422:	80 e1       	ldi	r24, 0x10	; 16
    2424:	91 e0       	ldi	r25, 0x01	; 1
    2426:	60 e1       	ldi	r22, 0x10	; 16
    2428:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    242c:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    2430:	81 30       	cpi	r24, 0x01	; 1
    2432:	b1 f5       	brne	.+108    	; 0x24a0 <Menu+0x22c>
			{
				gState = STATE_SETTING_MENU;
    2434:	f0 92 95 02 	sts	0x0295, r15
    2438:	e0 92 94 02 	sts	0x0294, r14
				gScrollNum = 1;
    243c:	31 e0       	ldi	r19, 0x01	; 1
    243e:	30 93 d0 02 	sts	0x02D0, r19
    2442:	3b c0       	rjmp	.+118    	; 0x24ba <Menu+0x246>
			else if (act == BUTTON_PREV_DOWN)
			{
				gScrollNum--;
			}
		}
		else if (gScrollNum == GetCursor(STATE_RUN_MAPPING_EBOTEC))
    2444:	24 30       	cpi	r18, 0x04	; 4
    2446:	a1 f4       	brne	.+40     	; 0x2470 <Menu+0x1fc>
		{
			LCDGotoXY(0,0);
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("RUN M. EBOTEC 0B"),16);
    2450:	81 e2       	ldi	r24, 0x21	; 33
    2452:	91 e0       	ldi	r25, 0x01	; 1
    2454:	60 e1       	ldi	r22, 0x10	; 16
    2456:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    245a:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    245e:	81 30       	cpi	r24, 0x01	; 1
    2460:	f9 f4       	brne	.+62     	; 0x24a0 <Menu+0x22c>
			{
				gState = STATE_RUN_MAPPING_EBOTEC;
    2462:	e4 e0       	ldi	r30, 0x04	; 4
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	f0 93 95 02 	sts	0x0295, r31
    246a:	e0 93 94 02 	sts	0x0294, r30
    246e:	23 c0       	rjmp	.+70     	; 0x24b6 <Menu+0x242>
			else if (act == BUTTON_PREV_DOWN)
			{
				gScrollNum--;
			}
		}
		else if (gScrollNum == GetCursor(STATE_RUN_LEARN))
    2470:	21 30       	cpi	r18, 0x01	; 1
    2472:	19 f5       	brne	.+70     	; 0x24ba <Menu+0x246>
		{
			LCDGotoXY(0,0);
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	60 e0       	ldi	r22, 0x00	; 0
    2478:	29 83       	std	Y+1, r18	; 0x01
    247a:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("RUN LEARN      B"),16);
    247e:	82 e3       	ldi	r24, 0x32	; 50
    2480:	91 e0       	ldi	r25, 0x01	; 1
    2482:	60 e1       	ldi	r22, 0x10	; 16
    2484:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    2488:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    248c:	29 81       	ldd	r18, Y+1	; 0x01
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	39 f4       	brne	.+14     	; 0x24a0 <Menu+0x22c>
			{
				gState = STATE_RUN_LEARN;
    2492:	10 93 95 02 	sts	0x0295, r17
    2496:	00 93 94 02 	sts	0x0294, r16
				gScrollNum = 1;
    249a:	20 93 d0 02 	sts	0x02D0, r18
    249e:	0d c0       	rjmp	.+26     	; 0x24ba <Menu+0x246>
			}
			else if (act == BUTTON_NEXT_DOWN)
    24a0:	83 30       	cpi	r24, 0x03	; 3
    24a2:	21 f4       	brne	.+8      	; 0x24ac <Menu+0x238>
			{
				gScrollNum++;
    24a4:	80 91 d0 02 	lds	r24, 0x02D0
    24a8:	8f 5f       	subi	r24, 0xFF	; 255
    24aa:	05 c0       	rjmp	.+10     	; 0x24b6 <Menu+0x242>
			}
			else if (act == BUTTON_PREV_DOWN)
    24ac:	88 23       	and	r24, r24
    24ae:	29 f4       	brne	.+10     	; 0x24ba <Menu+0x246>
			{
				gScrollNum--;
    24b0:	80 91 d0 02 	lds	r24, 0x02D0
    24b4:	81 50       	subi	r24, 0x01	; 1
    24b6:	80 93 d0 02 	sts	0x02D0, r24

void Menu()
{
	gScrollMax = MAX_SCROLL_MENU;
	ReStrainScroll();
	while (gState == STATE_MENU)
    24ba:	80 91 94 02 	lds	r24, 0x0294
    24be:	90 91 95 02 	lds	r25, 0x0295
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <Menu+0x254>
    24c6:	08 cf       	rjmp	.-496    	; 0x22d8 <Menu+0x64>
				gScrollNum--;
			}
		}
		
	}
}
    24c8:	0f 90       	pop	r0
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	1f 91       	pop	r17
    24d0:	0f 91       	pop	r16
    24d2:	ff 90       	pop	r15
    24d4:	ef 90       	pop	r14
    24d6:	df 90       	pop	r13
    24d8:	cf 90       	pop	r12
    24da:	bf 90       	pop	r11
    24dc:	af 90       	pop	r10
    24de:	9f 90       	pop	r9
    24e0:	8f 90       	pop	r8
    24e2:	7f 90       	pop	r7
    24e4:	6f 90       	pop	r6
    24e6:	5f 90       	pop	r5
    24e8:	4f 90       	pop	r4
    24ea:	3f 90       	pop	r3
    24ec:	2f 90       	pop	r2
    24ee:	08 95       	ret

000024f0 <SettingMenu>:

void SettingMenu()
{
    24f0:	4f 92       	push	r4
    24f2:	5f 92       	push	r5
    24f4:	7f 92       	push	r7
    24f6:	8f 92       	push	r8
    24f8:	9f 92       	push	r9
    24fa:	af 92       	push	r10
    24fc:	bf 92       	push	r11
    24fe:	cf 92       	push	r12
    2500:	df 92       	push	r13
    2502:	ef 92       	push	r14
    2504:	ff 92       	push	r15
    2506:	0f 93       	push	r16
    2508:	1f 93       	push	r17
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	0f 92       	push	r0
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
	gScrollMax = MAX_SCROLL_SETTING_MENU;
    2514:	86 e0       	ldi	r24, 0x06	; 6
    2516:	80 93 cb 02 	sts	0x02CB, r24
				gScrollNum--;
			}
			else if (act == BUTTON_BACK_DOWN)
			{
				gState = STATE_MENU;
				gScrollNum = GetCursor(STATE_SETTING_MENU);
    251a:	16 e0       	ldi	r17, 0x06	; 6
    251c:	71 2e       	mov	r7, r17
			LCDstring((uint8_t*)("SENSOR-SET    1B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_SENSOR_MENU;
    251e:	00 e4       	ldi	r16, 0x40	; 64
    2520:	10 e0       	ldi	r17, 0x00	; 0
			LCDstring((uint8_t*)("SAMPLING      1B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_SAMPLING;
    2522:	b1 e4       	ldi	r27, 0x41	; 65
    2524:	4b 2e       	mov	r4, r27
    2526:	51 2c       	mov	r5, r1
			LCDstring((uint8_t*)("ERROR/BOBOT   1B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_ERROR;
    2528:	a2 e4       	ldi	r26, 0x42	; 66
    252a:	ea 2e       	mov	r14, r26
    252c:	f1 2c       	mov	r15, r1
			LCDstring((uint8_t*)("SAVES         1B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_SAVE_MENU;
    252e:	ff e3       	ldi	r31, 0x3F	; 63
    2530:	cf 2e       	mov	r12, r31
    2532:	d1 2c       	mov	r13, r1
			LCDstring((uint8_t*)("PID&SPEED     1B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_SET_PID_SPEED_MENU;
    2534:	ee e3       	ldi	r30, 0x3E	; 62
    2536:	ae 2e       	mov	r10, r30
    2538:	b1 2c       	mov	r11, r1
			LCDstring((uint8_t*)("DEBUG         1B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_DEBUG_MENU;
    253a:	7d e3       	ldi	r23, 0x3D	; 61
    253c:	87 2e       	mov	r8, r23
    253e:	91 2c       	mov	r9, r1
}

void SettingMenu()
{
	gScrollMax = MAX_SCROLL_SETTING_MENU;
	while (gState == STATE_SETTING_MENU)
    2540:	ac c0       	rjmp	.+344    	; 0x269a <SettingMenu+0x1aa>
	{
		ReStrainScroll();
    2542:	0e 94 06 11 	call	0x220c	; 0x220c <ReStrainScroll>
		PrintScroll(gScrollNum,gScrollMax);
    2546:	80 91 d0 02 	lds	r24, 0x02D0
    254a:	60 91 cb 02 	lds	r22, 0x02CB
    254e:	0e 94 15 11 	call	0x222a	; 0x222a <PrintScroll>
		if (gScrollNum == GetCursor(STATE_SETTING_DEBUG_MENU))
    2552:	20 91 d0 02 	lds	r18, 0x02D0
    2556:	21 30       	cpi	r18, 0x01	; 1
    2558:	d9 f4       	brne	.+54     	; 0x2590 <SettingMenu+0xa0>
		{
			LCDGotoXY(0,0);
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("DEBUG         1B"),16);
    2562:	83 e4       	ldi	r24, 0x43	; 67
    2564:	91 e0       	ldi	r25, 0x01	; 1
    2566:	60 e1       	ldi	r22, 0x10	; 16
    2568:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    256c:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    2570:	81 30       	cpi	r24, 0x01	; 1
    2572:	29 f4       	brne	.+10     	; 0x257e <SettingMenu+0x8e>
			{
				gState = STATE_SETTING_DEBUG_MENU;
    2574:	90 92 95 02 	sts	0x0295, r9
    2578:	80 92 94 02 	sts	0x0294, r8
    257c:	06 c0       	rjmp	.+12     	; 0x258a <SettingMenu+0x9a>
				gScrollNum = 1;
			}
			else if (act == BUTTON_NEXT_DOWN)
    257e:	83 30       	cpi	r24, 0x03	; 3
    2580:	09 f0       	breq	.+2      	; 0x2584 <SettingMenu+0x94>
    2582:	7d c0       	rjmp	.+250    	; 0x267e <SettingMenu+0x18e>
			{
				gScrollNum++;
    2584:	80 91 d0 02 	lds	r24, 0x02D0
    2588:	8f 5f       	subi	r24, 0xFF	; 255
    258a:	80 93 d0 02 	sts	0x02D0, r24
    258e:	85 c0       	rjmp	.+266    	; 0x269a <SettingMenu+0x1aa>
			{
				gState = STATE_MENU;
				gScrollNum = GetCursor(STATE_SETTING_MENU);
			}
		}
		else if (gScrollNum == GetCursor(STATE_SETTING_SET_PID_SPEED_MENU))
    2590:	22 30       	cpi	r18, 0x02	; 2
    2592:	91 f4       	brne	.+36     	; 0x25b8 <SettingMenu+0xc8>
		{
			LCDGotoXY(0,0);
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	60 e0       	ldi	r22, 0x00	; 0
    2598:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("PID&SPEED     1B"),16);
    259c:	84 e5       	ldi	r24, 0x54	; 84
    259e:	91 e0       	ldi	r25, 0x01	; 1
    25a0:	60 e1       	ldi	r22, 0x10	; 16
    25a2:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    25a6:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    25aa:	81 30       	cpi	r24, 0x01	; 1
    25ac:	41 f7       	brne	.-48     	; 0x257e <SettingMenu+0x8e>
			{
				gState = STATE_SETTING_SET_PID_SPEED_MENU;
    25ae:	b0 92 95 02 	sts	0x0295, r11
    25b2:	a0 92 94 02 	sts	0x0294, r10
    25b6:	e9 cf       	rjmp	.-46     	; 0x258a <SettingMenu+0x9a>
				gState = STATE_MENU;
				gScrollNum = GetCursor(STATE_SETTING_MENU);
			}
		}
		
		else if (gScrollNum == GetCursor(STATE_SETTING_SAVE_MENU))
    25b8:	23 30       	cpi	r18, 0x03	; 3
    25ba:	91 f4       	brne	.+36     	; 0x25e0 <SettingMenu+0xf0>
		{
			LCDGotoXY(0,0);
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("SAVES         1B"),16);
    25c4:	85 e6       	ldi	r24, 0x65	; 101
    25c6:	91 e0       	ldi	r25, 0x01	; 1
    25c8:	60 e1       	ldi	r22, 0x10	; 16
    25ca:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    25ce:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    25d2:	81 30       	cpi	r24, 0x01	; 1
    25d4:	a1 f6       	brne	.-88     	; 0x257e <SettingMenu+0x8e>
			{
				gState = STATE_SETTING_SAVE_MENU;
    25d6:	d0 92 95 02 	sts	0x0295, r13
    25da:	c0 92 94 02 	sts	0x0294, r12
    25de:	d5 cf       	rjmp	.-86     	; 0x258a <SettingMenu+0x9a>
			{
				gState = STATE_MENU;
				gScrollNum = GetCursor(STATE_SETTING_MENU);
			}
		}
		else if (gScrollNum == GetCursor(STATE_SETTING_ERROR))
    25e0:	26 30       	cpi	r18, 0x06	; 6
    25e2:	19 f5       	brne	.+70     	; 0x262a <SettingMenu+0x13a>
		{
			LCDGotoXY(0,0);
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	60 e0       	ldi	r22, 0x00	; 0
    25e8:	29 83       	std	Y+1, r18	; 0x01
    25ea:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("ERROR/BOBOT   1B"),16);
    25ee:	86 e7       	ldi	r24, 0x76	; 118
    25f0:	91 e0       	ldi	r25, 0x01	; 1
    25f2:	60 e1       	ldi	r22, 0x10	; 16
    25f4:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    25f8:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    25fc:	29 81       	ldd	r18, Y+1	; 0x01
    25fe:	81 30       	cpi	r24, 0x01	; 1
    2600:	29 f4       	brne	.+10     	; 0x260c <SettingMenu+0x11c>
			{
				gState = STATE_SETTING_ERROR;
    2602:	f0 92 95 02 	sts	0x0295, r15
    2606:	e0 92 94 02 	sts	0x0294, r14
    260a:	bf cf       	rjmp	.-130    	; 0x258a <SettingMenu+0x9a>
				gScrollNum = 1;
			}
			else if (act == BUTTON_NEXT_DOWN)
    260c:	83 30       	cpi	r24, 0x03	; 3
    260e:	09 f4       	brne	.+2      	; 0x2612 <SettingMenu+0x122>
    2610:	b9 cf       	rjmp	.-142    	; 0x2584 <SettingMenu+0x94>
			{
				gScrollNum++;
			}
			else if (act == BUTTON_PREV_DOWN)
    2612:	88 23       	and	r24, r24
    2614:	b1 f1       	breq	.+108    	; 0x2682 <SettingMenu+0x192>
			{
				gScrollNum--;
			}
			else if (act == BUTTON_BACK_DOWN)
    2616:	82 30       	cpi	r24, 0x02	; 2
    2618:	09 f0       	breq	.+2      	; 0x261c <SettingMenu+0x12c>
    261a:	3f c0       	rjmp	.+126    	; 0x269a <SettingMenu+0x1aa>
			{
				gState = STATE_MENU;
    261c:	10 92 95 02 	sts	0x0295, r1
    2620:	10 92 94 02 	sts	0x0294, r1
				gScrollNum = GetCursor(STATE_SETTING_MENU);
    2624:	20 93 d0 02 	sts	0x02D0, r18
    2628:	38 c0       	rjmp	.+112    	; 0x269a <SettingMenu+0x1aa>
			}
		}
		else if (gScrollNum == GetCursor(STATE_SETTING_SAMPLING))
    262a:	25 30       	cpi	r18, 0x05	; 5
    262c:	99 f4       	brne	.+38     	; 0x2654 <SettingMenu+0x164>
		{
			LCDGotoXY(0,0);
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("SAMPLING      1B"),16);
    2636:	87 e8       	ldi	r24, 0x87	; 135
    2638:	91 e0       	ldi	r25, 0x01	; 1
    263a:	60 e1       	ldi	r22, 0x10	; 16
    263c:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    2640:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    2644:	81 30       	cpi	r24, 0x01	; 1
    2646:	09 f0       	breq	.+2      	; 0x264a <SettingMenu+0x15a>
    2648:	9a cf       	rjmp	.-204    	; 0x257e <SettingMenu+0x8e>
			{
				gState = STATE_SETTING_SAMPLING;
    264a:	50 92 95 02 	sts	0x0295, r5
    264e:	40 92 94 02 	sts	0x0294, r4
    2652:	9b cf       	rjmp	.-202    	; 0x258a <SettingMenu+0x9a>
				gState = STATE_MENU;
				gScrollNum = GetCursor(STATE_SETTING_MENU);
			}
		}
		
		else if (gScrollNum == GetCursor(STATE_SETTING_SENSOR_MENU))
    2654:	24 30       	cpi	r18, 0x04	; 4
    2656:	09 f5       	brne	.+66     	; 0x269a <SettingMenu+0x1aa>
		{
			LCDGotoXY(0,0);
    2658:	80 e0       	ldi	r24, 0x00	; 0
    265a:	60 e0       	ldi	r22, 0x00	; 0
    265c:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("SENSOR-SET    1B"),16);
    2660:	88 e9       	ldi	r24, 0x98	; 152
    2662:	91 e0       	ldi	r25, 0x01	; 1
    2664:	60 e1       	ldi	r22, 0x10	; 16
    2666:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    266a:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    266e:	81 30       	cpi	r24, 0x01	; 1
    2670:	09 f0       	breq	.+2      	; 0x2674 <SettingMenu+0x184>
    2672:	85 cf       	rjmp	.-246    	; 0x257e <SettingMenu+0x8e>
			{
				gState = STATE_SETTING_SENSOR_MENU;
    2674:	10 93 95 02 	sts	0x0295, r17
    2678:	00 93 94 02 	sts	0x0294, r16
    267c:	86 cf       	rjmp	.-244    	; 0x258a <SettingMenu+0x9a>
			}
			else if (act == BUTTON_NEXT_DOWN)
			{
				gScrollNum++;
			}
			else if (act == BUTTON_PREV_DOWN)
    267e:	88 23       	and	r24, r24
    2680:	21 f4       	brne	.+8      	; 0x268a <SettingMenu+0x19a>
			{
				gScrollNum--;
    2682:	80 91 d0 02 	lds	r24, 0x02D0
    2686:	81 50       	subi	r24, 0x01	; 1
    2688:	80 cf       	rjmp	.-256    	; 0x258a <SettingMenu+0x9a>
			}
			else if (act == BUTTON_BACK_DOWN)
    268a:	82 30       	cpi	r24, 0x02	; 2
    268c:	31 f4       	brne	.+12     	; 0x269a <SettingMenu+0x1aa>
			{
				gState = STATE_MENU;
    268e:	10 92 95 02 	sts	0x0295, r1
    2692:	10 92 94 02 	sts	0x0294, r1
				gScrollNum = GetCursor(STATE_SETTING_MENU);
    2696:	70 92 d0 02 	sts	0x02D0, r7
}

void SettingMenu()
{
	gScrollMax = MAX_SCROLL_SETTING_MENU;
	while (gState == STATE_SETTING_MENU)
    269a:	80 91 94 02 	lds	r24, 0x0294
    269e:	90 91 95 02 	lds	r25, 0x0295
    26a2:	86 30       	cpi	r24, 0x06	; 6
    26a4:	91 05       	cpc	r25, r1
    26a6:	09 f4       	brne	.+2      	; 0x26aa <SettingMenu+0x1ba>
    26a8:	4c cf       	rjmp	.-360    	; 0x2542 <SettingMenu+0x52>
				gState = STATE_MENU;
				gScrollNum = GetCursor(STATE_SETTING_MENU);
			}
		}
	}
}
    26aa:	0f 90       	pop	r0
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	ff 90       	pop	r15
    26b6:	ef 90       	pop	r14
    26b8:	df 90       	pop	r13
    26ba:	cf 90       	pop	r12
    26bc:	bf 90       	pop	r11
    26be:	af 90       	pop	r10
    26c0:	9f 90       	pop	r9
    26c2:	8f 90       	pop	r8
    26c4:	7f 90       	pop	r7
    26c6:	5f 90       	pop	r5
    26c8:	4f 90       	pop	r4
    26ca:	08 95       	ret

000026cc <SettingErrorMenu>:

void SettingErrorMenu()
{
	
}
    26cc:	08 95       	ret

000026ce <SettingSetPIDSpeedMenu>:
/**STATE_SETTING_SET_PID_SPEED_MENU**/
void SettingSetPIDSpeedMenu()
{
    26ce:	7f 92       	push	r7
    26d0:	8f 92       	push	r8
    26d2:	9f 92       	push	r9
    26d4:	af 92       	push	r10
    26d6:	bf 92       	push	r11
    26d8:	cf 92       	push	r12
    26da:	df 92       	push	r13
    26dc:	ef 92       	push	r14
    26de:	ff 92       	push	r15
    26e0:	0f 93       	push	r16
    26e2:	1f 93       	push	r17
    26e4:	cf 93       	push	r28
    26e6:	df 93       	push	r29
	gScrollMax = MAX_SCROLL_SET_PID_SPEED_MENU;
    26e8:	85 e0       	ldi	r24, 0x05	; 5
    26ea:	80 93 cb 02 	sts	0x02CB, r24
			{
				gScrollNum--;
			}
			else if (act == BUTTON_BACK_DOWN)
			{
				gState = STATE_SETTING_MENU;
    26ee:	c6 e0       	ldi	r28, 0x06	; 6
    26f0:	d0 e0       	ldi	r29, 0x00	; 0
				gScrollNum = GetCursor(STATE_SETTING_SET_PID_SPEED_MENU);
    26f2:	42 e0       	ldi	r20, 0x02	; 2
    26f4:	74 2e       	mov	r7, r20
			LCDstring((uint8_t*)("MINSPEED      [B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_SET_PID_SPEED_MINSPEED;
    26f6:	00 e7       	ldi	r16, 0x70	; 112
    26f8:	12 e0       	ldi	r17, 0x02	; 2
			LCDstring((uint8_t*)("MAXSPEED      [B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_SET_PID_SPEED_MAXSPEED;
    26fa:	31 e7       	ldi	r19, 0x71	; 113
    26fc:	e3 2e       	mov	r14, r19
    26fe:	32 e0       	ldi	r19, 0x02	; 2
    2700:	f3 2e       	mov	r15, r19
			LCDstring((uint8_t*)("KD            [B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_SET_PID_SPEED_KD;
    2702:	2e e6       	ldi	r18, 0x6E	; 110
    2704:	c2 2e       	mov	r12, r18
    2706:	22 e0       	ldi	r18, 0x02	; 2
    2708:	d2 2e       	mov	r13, r18
			LCDstring((uint8_t*)("KP            [B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_SET_PID_SPEED_KP;
    270a:	9d e6       	ldi	r25, 0x6D	; 109
    270c:	a9 2e       	mov	r10, r25
    270e:	92 e0       	ldi	r25, 0x02	; 2
    2710:	b9 2e       	mov	r11, r25
			LCDstring((uint8_t*)("SPEED         [B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_SET_PID_SPEED_SPEED;
    2712:	8f e6       	ldi	r24, 0x6F	; 111
    2714:	88 2e       	mov	r8, r24
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	98 2e       	mov	r9, r24
}
/**STATE_SETTING_SET_PID_SPEED_MENU**/
void SettingSetPIDSpeedMenu()
{
	gScrollMax = MAX_SCROLL_SET_PID_SPEED_MENU;
	while (gState == STATE_SETTING_SET_PID_SPEED_MENU)
    271a:	92 c0       	rjmp	.+292    	; 0x2840 <SettingSetPIDSpeedMenu+0x172>
	{
		ReStrainScroll();
    271c:	0e 94 06 11 	call	0x220c	; 0x220c <ReStrainScroll>
		PrintScroll(gScrollNum,gScrollMax);
    2720:	80 91 d0 02 	lds	r24, 0x02D0
    2724:	60 91 cb 02 	lds	r22, 0x02CB
    2728:	0e 94 15 11 	call	0x222a	; 0x222a <PrintScroll>
		if (gScrollNum == GetCursor(STATE_SETTING_SET_PID_SPEED_SPEED))
    272c:	80 91 d0 02 	lds	r24, 0x02D0
    2730:	83 30       	cpi	r24, 0x03	; 3
    2732:	d9 f4       	brne	.+54     	; 0x276a <SettingSetPIDSpeedMenu+0x9c>
		{
			LCDGotoXY(0,0);
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	60 e0       	ldi	r22, 0x00	; 0
    2738:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("SPEED         [B"),16);
    273c:	89 ea       	ldi	r24, 0xA9	; 169
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	60 e1       	ldi	r22, 0x10	; 16
    2742:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    2746:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    274a:	81 30       	cpi	r24, 0x01	; 1
    274c:	29 f4       	brne	.+10     	; 0x2758 <SettingSetPIDSpeedMenu+0x8a>
			{
				gState = STATE_SETTING_SET_PID_SPEED_SPEED;
    274e:	90 92 95 02 	sts	0x0295, r9
    2752:	80 92 94 02 	sts	0x0294, r8
    2756:	06 c0       	rjmp	.+12     	; 0x2764 <SettingSetPIDSpeedMenu+0x96>
				gScrollNum = 1;
			}
			else if (act == BUTTON_NEXT_DOWN)
    2758:	83 30       	cpi	r24, 0x03	; 3
    275a:	09 f0       	breq	.+2      	; 0x275e <SettingSetPIDSpeedMenu+0x90>
    275c:	43 c0       	rjmp	.+134    	; 0x27e4 <SettingSetPIDSpeedMenu+0x116>
			{
				gScrollNum++;
    275e:	80 91 d0 02 	lds	r24, 0x02D0
    2762:	8f 5f       	subi	r24, 0xFF	; 255
    2764:	80 93 d0 02 	sts	0x02D0, r24
    2768:	6b c0       	rjmp	.+214    	; 0x2840 <SettingSetPIDSpeedMenu+0x172>
			{
				gState = STATE_SETTING_MENU;
				gScrollNum = GetCursor(STATE_SETTING_SET_PID_SPEED_MENU);
			}
		}
		else if (gScrollNum == GetCursor(STATE_SETTING_SET_PID_SPEED_KP))
    276a:	81 30       	cpi	r24, 0x01	; 1
    276c:	91 f4       	brne	.+36     	; 0x2792 <SettingSetPIDSpeedMenu+0xc4>
		{
			LCDGotoXY(0,0);
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("KP            [B"),16);
    2776:	8a eb       	ldi	r24, 0xBA	; 186
    2778:	91 e0       	ldi	r25, 0x01	; 1
    277a:	60 e1       	ldi	r22, 0x10	; 16
    277c:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    2780:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    2784:	81 30       	cpi	r24, 0x01	; 1
    2786:	41 f7       	brne	.-48     	; 0x2758 <SettingSetPIDSpeedMenu+0x8a>
			{
				gState = STATE_SETTING_SET_PID_SPEED_KP;
    2788:	b0 92 95 02 	sts	0x0295, r11
    278c:	a0 92 94 02 	sts	0x0294, r10
    2790:	e9 cf       	rjmp	.-46     	; 0x2764 <SettingSetPIDSpeedMenu+0x96>
			{
				gState = STATE_SETTING_MENU;
				gScrollNum = GetCursor(STATE_SETTING_SET_PID_SPEED_MENU);
			}
		}
		else if (gScrollNum == GetCursor(STATE_SETTING_SET_PID_SPEED_KD))
    2792:	82 30       	cpi	r24, 0x02	; 2
    2794:	91 f4       	brne	.+36     	; 0x27ba <SettingSetPIDSpeedMenu+0xec>
		{
			LCDGotoXY(0,0);
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	60 e0       	ldi	r22, 0x00	; 0
    279a:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("KD            [B"),16);
    279e:	8b ec       	ldi	r24, 0xCB	; 203
    27a0:	91 e0       	ldi	r25, 0x01	; 1
    27a2:	60 e1       	ldi	r22, 0x10	; 16
    27a4:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    27a8:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    27ac:	81 30       	cpi	r24, 0x01	; 1
    27ae:	a1 f6       	brne	.-88     	; 0x2758 <SettingSetPIDSpeedMenu+0x8a>
			{
				gState = STATE_SETTING_SET_PID_SPEED_KD;
    27b0:	d0 92 95 02 	sts	0x0295, r13
    27b4:	c0 92 94 02 	sts	0x0294, r12
    27b8:	d5 cf       	rjmp	.-86     	; 0x2764 <SettingSetPIDSpeedMenu+0x96>
			{
				gState = STATE_SETTING_MENU;
				gScrollNum = GetCursor(STATE_SETTING_SET_PID_SPEED_MENU);
			}
		}
		else if (gScrollNum == GetCursor(STATE_SETTING_SET_PID_SPEED_MAXSPEED))
    27ba:	85 30       	cpi	r24, 0x05	; 5
    27bc:	e1 f4       	brne	.+56     	; 0x27f6 <SettingSetPIDSpeedMenu+0x128>
		{
			LCDGotoXY(0,0);
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	60 e0       	ldi	r22, 0x00	; 0
    27c2:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("MAXSPEED      [B"),16);
    27c6:	8c ed       	ldi	r24, 0xDC	; 220
    27c8:	91 e0       	ldi	r25, 0x01	; 1
    27ca:	60 e1       	ldi	r22, 0x10	; 16
    27cc:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    27d0:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    27d4:	81 30       	cpi	r24, 0x01	; 1
    27d6:	09 f0       	breq	.+2      	; 0x27da <SettingSetPIDSpeedMenu+0x10c>
    27d8:	bf cf       	rjmp	.-130    	; 0x2758 <SettingSetPIDSpeedMenu+0x8a>
			{
				gState = STATE_SETTING_SET_PID_SPEED_MAXSPEED;
    27da:	f0 92 95 02 	sts	0x0295, r15
    27de:	e0 92 94 02 	sts	0x0294, r14
    27e2:	c0 cf       	rjmp	.-128    	; 0x2764 <SettingSetPIDSpeedMenu+0x96>
			}
			else if (act == BUTTON_NEXT_DOWN)
			{
				gScrollNum++;
			}
			else if (act == BUTTON_PREV_DOWN)
    27e4:	88 23       	and	r24, r24
    27e6:	01 f1       	breq	.+64     	; 0x2828 <SettingSetPIDSpeedMenu+0x15a>
			{
				gScrollNum--;
			}
			else if (act == BUTTON_BACK_DOWN)
    27e8:	82 30       	cpi	r24, 0x02	; 2
    27ea:	51 f5       	brne	.+84     	; 0x2840 <SettingSetPIDSpeedMenu+0x172>
			{
				gState = STATE_SETTING_MENU;
    27ec:	d0 93 95 02 	sts	0x0295, r29
    27f0:	c0 93 94 02 	sts	0x0294, r28
    27f4:	b7 cf       	rjmp	.-146    	; 0x2764 <SettingSetPIDSpeedMenu+0x96>
				gScrollNum = GetCursor(STATE_SETTING_SET_PID_SPEED_MENU);
			}
		}
		else if (gScrollNum == GetCursor(STATE_SETTING_SET_PID_SPEED_MINSPEED))
    27f6:	84 30       	cpi	r24, 0x04	; 4
    27f8:	19 f5       	brne	.+70     	; 0x2840 <SettingSetPIDSpeedMenu+0x172>
		{
			LCDGotoXY(0,0);
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	60 e0       	ldi	r22, 0x00	; 0
    27fe:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("MINSPEED      [B"),16);
    2802:	8d ee       	ldi	r24, 0xED	; 237
    2804:	91 e0       	ldi	r25, 0x01	; 1
    2806:	60 e1       	ldi	r22, 0x10	; 16
    2808:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    280c:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    2810:	81 30       	cpi	r24, 0x01	; 1
    2812:	29 f4       	brne	.+10     	; 0x281e <SettingSetPIDSpeedMenu+0x150>
			{
				gState = STATE_SETTING_SET_PID_SPEED_MINSPEED;
    2814:	10 93 95 02 	sts	0x0295, r17
    2818:	00 93 94 02 	sts	0x0294, r16
    281c:	a3 cf       	rjmp	.-186    	; 0x2764 <SettingSetPIDSpeedMenu+0x96>
				gScrollNum = 1;
			}
			else if (act == BUTTON_NEXT_DOWN)
    281e:	83 30       	cpi	r24, 0x03	; 3
    2820:	09 f4       	brne	.+2      	; 0x2824 <SettingSetPIDSpeedMenu+0x156>
    2822:	9d cf       	rjmp	.-198    	; 0x275e <SettingSetPIDSpeedMenu+0x90>
			{
				gScrollNum++;
			}
			else if (act == BUTTON_PREV_DOWN)
    2824:	88 23       	and	r24, r24
    2826:	21 f4       	brne	.+8      	; 0x2830 <SettingSetPIDSpeedMenu+0x162>
			{
				gScrollNum--;
    2828:	80 91 d0 02 	lds	r24, 0x02D0
    282c:	81 50       	subi	r24, 0x01	; 1
    282e:	9a cf       	rjmp	.-204    	; 0x2764 <SettingSetPIDSpeedMenu+0x96>
			}
			else if (act == BUTTON_BACK_DOWN)
    2830:	82 30       	cpi	r24, 0x02	; 2
    2832:	31 f4       	brne	.+12     	; 0x2840 <SettingSetPIDSpeedMenu+0x172>
			{
				gState = STATE_SETTING_MENU;
    2834:	d0 93 95 02 	sts	0x0295, r29
    2838:	c0 93 94 02 	sts	0x0294, r28
				gScrollNum = GetCursor(STATE_SETTING_SET_PID_SPEED_MENU);
    283c:	70 92 d0 02 	sts	0x02D0, r7
}
/**STATE_SETTING_SET_PID_SPEED_MENU**/
void SettingSetPIDSpeedMenu()
{
	gScrollMax = MAX_SCROLL_SET_PID_SPEED_MENU;
	while (gState == STATE_SETTING_SET_PID_SPEED_MENU)
    2840:	80 91 94 02 	lds	r24, 0x0294
    2844:	90 91 95 02 	lds	r25, 0x0295
    2848:	8e 33       	cpi	r24, 0x3E	; 62
    284a:	91 05       	cpc	r25, r1
    284c:	09 f4       	brne	.+2      	; 0x2850 <SettingSetPIDSpeedMenu+0x182>
    284e:	66 cf       	rjmp	.-308    	; 0x271c <SettingSetPIDSpeedMenu+0x4e>
				gState = STATE_SETTING_MENU;
				gScrollNum = GetCursor(STATE_SETTING_SET_PID_SPEED_MENU);
			}
		}
	}
}
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	1f 91       	pop	r17
    2856:	0f 91       	pop	r16
    2858:	ff 90       	pop	r15
    285a:	ef 90       	pop	r14
    285c:	df 90       	pop	r13
    285e:	cf 90       	pop	r12
    2860:	bf 90       	pop	r11
    2862:	af 90       	pop	r10
    2864:	9f 90       	pop	r9
    2866:	8f 90       	pop	r8
    2868:	7f 90       	pop	r7
    286a:	08 95       	ret

0000286c <SettingSetPIDSpeedSpeed>:
/**STATE_SETTING_SET_PID_SPEED_SPEED**/
void SettingSetPIDSpeedSpeed()
{
    286c:	1f 93       	push	r17
    286e:	cf 93       	push	r28
    2870:	df 93       	push	r29
	uint8_t speed,act;
	speed = gDriveSpeed;
    2872:	10 91 92 02 	lds	r17, 0x0292
		else if (act == BUTTON_BACK_DOWN)	gState = GetParent(STATE_SETTING_SET_PID_SPEED_SPEED);
		else if (act == BUTTON_ENTER_DOWN)
		{
			gDriveSpeed = speed;
			EepromWrite(ADDRESS_BLOCK_DRIVE_SPEED,speed);
			gState = GetParent(STATE_SETTING_SET_PID_SPEED_SPEED);
    2876:	ce e3       	ldi	r28, 0x3E	; 62
    2878:	d0 e0       	ldi	r29, 0x00	; 0
/**STATE_SETTING_SET_PID_SPEED_SPEED**/
void SettingSetPIDSpeedSpeed()
{
	uint8_t speed,act;
	speed = gDriveSpeed;
	while (gState == STATE_SETTING_SET_PID_SPEED_SPEED)
    287a:	32 c0       	rjmp	.+100    	; 0x28e0 <SettingSetPIDSpeedSpeed+0x74>
	{
		LCDGotoXY(0,0);
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	60 e0       	ldi	r22, 0x00	; 0
    2880:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
		LCDstring("OK   {SPEED}  [B",16);
    2884:	8e ef       	ldi	r24, 0xFE	; 254
    2886:	91 e0       	ldi	r25, 0x01	; 1
    2888:	60 e1       	ldi	r22, 0x10	; 16
    288a:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
		LCDGotoXY(0,1);
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	61 e0       	ldi	r22, 0x01	; 1
    2892:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
		LCDstring("<<-    ###   +>>",16);
    2896:	8f e0       	ldi	r24, 0x0F	; 15
    2898:	92 e0       	ldi	r25, 0x02	; 2
    289a:	60 e1       	ldi	r22, 0x10	; 16
    289c:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
		cetak_bil(speed,7,1,3);
    28a0:	81 2f       	mov	r24, r17
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	67 e0       	ldi	r22, 0x07	; 7
    28a6:	41 e0       	ldi	r20, 0x01	; 1
    28a8:	23 e0       	ldi	r18, 0x03	; 3
    28aa:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
		act=ButtonRead();
    28ae:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
		if (act == BUTTON_NEXT_DOWN)		speed++;
    28b2:	83 30       	cpi	r24, 0x03	; 3
    28b4:	11 f4       	brne	.+4      	; 0x28ba <SettingSetPIDSpeedSpeed+0x4e>
    28b6:	1f 5f       	subi	r17, 0xFF	; 255
    28b8:	13 c0       	rjmp	.+38     	; 0x28e0 <SettingSetPIDSpeedSpeed+0x74>
		else if (act == BUTTON_PREV_DOWN)	speed--;
    28ba:	88 23       	and	r24, r24
    28bc:	11 f4       	brne	.+4      	; 0x28c2 <SettingSetPIDSpeedSpeed+0x56>
    28be:	11 50       	subi	r17, 0x01	; 1
    28c0:	0f c0       	rjmp	.+30     	; 0x28e0 <SettingSetPIDSpeedSpeed+0x74>
		else if (act == BUTTON_BACK_DOWN)	gState = GetParent(STATE_SETTING_SET_PID_SPEED_SPEED);
    28c2:	82 30       	cpi	r24, 0x02	; 2
    28c4:	49 f0       	breq	.+18     	; 0x28d8 <SettingSetPIDSpeedSpeed+0x6c>
		else if (act == BUTTON_ENTER_DOWN)
    28c6:	81 30       	cpi	r24, 0x01	; 1
    28c8:	59 f4       	brne	.+22     	; 0x28e0 <SettingSetPIDSpeedSpeed+0x74>
		{
			gDriveSpeed = speed;
    28ca:	10 93 92 02 	sts	0x0292, r17
			EepromWrite(ADDRESS_BLOCK_DRIVE_SPEED,speed);
    28ce:	8b e2       	ldi	r24, 0x2B	; 43
    28d0:	92 e0       	ldi	r25, 0x02	; 2
    28d2:	61 2f       	mov	r22, r17
    28d4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eeupd_byte_m32>
			gState = GetParent(STATE_SETTING_SET_PID_SPEED_SPEED);
    28d8:	d0 93 95 02 	sts	0x0295, r29
    28dc:	c0 93 94 02 	sts	0x0294, r28
/**STATE_SETTING_SET_PID_SPEED_SPEED**/
void SettingSetPIDSpeedSpeed()
{
	uint8_t speed,act;
	speed = gDriveSpeed;
	while (gState == STATE_SETTING_SET_PID_SPEED_SPEED)
    28e0:	20 91 94 02 	lds	r18, 0x0294
    28e4:	30 91 95 02 	lds	r19, 0x0295
    28e8:	82 e0       	ldi	r24, 0x02	; 2
    28ea:	2f 36       	cpi	r18, 0x6F	; 111
    28ec:	38 07       	cpc	r19, r24
    28ee:	31 f2       	breq	.-116    	; 0x287c <SettingSetPIDSpeedSpeed+0x10>
			gDriveSpeed = speed;
			EepromWrite(ADDRESS_BLOCK_DRIVE_SPEED,speed);
			gState = GetParent(STATE_SETTING_SET_PID_SPEED_SPEED);
		}
	}
}
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	1f 91       	pop	r17
    28f6:	08 95       	ret

000028f8 <SettingSetPIDSpeedKP>:
void SettingSetPIDSpeedKP()
{
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
	uint8_t kp,act;
	kp = gDriveKP;
    28fe:	10 91 cd 02 	lds	r17, 0x02CD
		else if (act == BUTTON_BACK_DOWN)	gState = GetParent(STATE_SETTING_SET_PID_SPEED_KP);
		else if (act == BUTTON_ENTER_DOWN)
		{
			gDriveKP = kp;
			EepromWrite(ADDRESS_BLOCK_DRIVE_KP,kp);
			gState = GetParent(STATE_SETTING_SET_PID_SPEED_KP);
    2902:	ce e3       	ldi	r28, 0x3E	; 62
    2904:	d0 e0       	ldi	r29, 0x00	; 0
}
void SettingSetPIDSpeedKP()
{
	uint8_t kp,act;
	kp = gDriveKP;
	while (gState == STATE_SETTING_SET_PID_SPEED_KP)
    2906:	34 c0       	rjmp	.+104    	; 0x2970 <SettingSetPIDSpeedKP+0x78>
	{
		LCDGotoXY(0,0);
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	60 e0       	ldi	r22, 0x00	; 0
    290c:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
		LCDstring("OK   { KP }   [B",16);
    2910:	80 e2       	ldi	r24, 0x20	; 32
    2912:	92 e0       	ldi	r25, 0x02	; 2
    2914:	60 e1       	ldi	r22, 0x10	; 16
    2916:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
		LCDGotoXY(0,1);
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	61 e0       	ldi	r22, 0x01	; 1
    291e:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
		LCDstring("<<-    ##    +>>",16);
    2922:	81 e3       	ldi	r24, 0x31	; 49
    2924:	92 e0       	ldi	r25, 0x02	; 2
    2926:	60 e1       	ldi	r22, 0x10	; 16
    2928:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
		cetak_bil(kp,7,1,2);
    292c:	81 2f       	mov	r24, r17
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	67 e0       	ldi	r22, 0x07	; 7
    2932:	41 e0       	ldi	r20, 0x01	; 1
    2934:	22 e0       	ldi	r18, 0x02	; 2
    2936:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
		act=ButtonRead();
    293a:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
		if (act == BUTTON_NEXT_DOWN)		kp++;
    293e:	83 30       	cpi	r24, 0x03	; 3
    2940:	11 f4       	brne	.+4      	; 0x2946 <SettingSetPIDSpeedKP+0x4e>
    2942:	1f 5f       	subi	r17, 0xFF	; 255
    2944:	15 c0       	rjmp	.+42     	; 0x2970 <SettingSetPIDSpeedKP+0x78>
		else if (act == BUTTON_PREV_DOWN)	kp--;
    2946:	88 23       	and	r24, r24
    2948:	11 f4       	brne	.+4      	; 0x294e <SettingSetPIDSpeedKP+0x56>
    294a:	11 50       	subi	r17, 0x01	; 1
    294c:	11 c0       	rjmp	.+34     	; 0x2970 <SettingSetPIDSpeedKP+0x78>
		else if (act == BUTTON_BACK_DOWN)	gState = GetParent(STATE_SETTING_SET_PID_SPEED_KP);
    294e:	82 30       	cpi	r24, 0x02	; 2
    2950:	59 f0       	breq	.+22     	; 0x2968 <SettingSetPIDSpeedKP+0x70>
		else if (act == BUTTON_ENTER_DOWN)
    2952:	81 30       	cpi	r24, 0x01	; 1
    2954:	69 f4       	brne	.+26     	; 0x2970 <SettingSetPIDSpeedKP+0x78>
		{
			gDriveKP = kp;
    2956:	10 93 cd 02 	sts	0x02CD, r17
    295a:	10 92 ce 02 	sts	0x02CE, r1
			EepromWrite(ADDRESS_BLOCK_DRIVE_KP,kp);
    295e:	8c e2       	ldi	r24, 0x2C	; 44
    2960:	92 e0       	ldi	r25, 0x02	; 2
    2962:	61 2f       	mov	r22, r17
    2964:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eeupd_byte_m32>
			gState = GetParent(STATE_SETTING_SET_PID_SPEED_KP);
    2968:	d0 93 95 02 	sts	0x0295, r29
    296c:	c0 93 94 02 	sts	0x0294, r28
}
void SettingSetPIDSpeedKP()
{
	uint8_t kp,act;
	kp = gDriveKP;
	while (gState == STATE_SETTING_SET_PID_SPEED_KP)
    2970:	20 91 94 02 	lds	r18, 0x0294
    2974:	30 91 95 02 	lds	r19, 0x0295
    2978:	82 e0       	ldi	r24, 0x02	; 2
    297a:	2d 36       	cpi	r18, 0x6D	; 109
    297c:	38 07       	cpc	r19, r24
    297e:	21 f2       	breq	.-120    	; 0x2908 <SettingSetPIDSpeedKP+0x10>
			gDriveKP = kp;
			EepromWrite(ADDRESS_BLOCK_DRIVE_KP,kp);
			gState = GetParent(STATE_SETTING_SET_PID_SPEED_KP);
		}
	}
}
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	1f 91       	pop	r17
    2986:	08 95       	ret

00002988 <SettingSetPIDSpeedKD>:

void SettingSetPIDSpeedKD()
{
    2988:	1f 93       	push	r17
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
	uint8_t kd,act;
	kd = gDriveKD;
    298e:	10 91 d2 02 	lds	r17, 0x02D2
		else if (act == BUTTON_BACK_DOWN)	gState = GetParent(STATE_SETTING_SET_PID_SPEED_KD);
		else if (act == BUTTON_ENTER_DOWN)
		{
			gDriveKD = kd;
			EepromWrite(ADDRESS_BLOCK_DRIVE_KD,kd);
			gState = GetParent(STATE_SETTING_SET_PID_SPEED_KD);
    2992:	ce e3       	ldi	r28, 0x3E	; 62
    2994:	d0 e0       	ldi	r29, 0x00	; 0

void SettingSetPIDSpeedKD()
{
	uint8_t kd,act;
	kd = gDriveKD;
	while (gState == STATE_SETTING_SET_PID_SPEED_KD)
    2996:	34 c0       	rjmp	.+104    	; 0x2a00 <SettingSetPIDSpeedKD+0x78>
	{
		LCDGotoXY(0,0);
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	60 e0       	ldi	r22, 0x00	; 0
    299c:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
		LCDstring("OK   { KD }   [B",16);
    29a0:	82 e4       	ldi	r24, 0x42	; 66
    29a2:	92 e0       	ldi	r25, 0x02	; 2
    29a4:	60 e1       	ldi	r22, 0x10	; 16
    29a6:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
		LCDGotoXY(0,1);
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	61 e0       	ldi	r22, 0x01	; 1
    29ae:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
		LCDstring("<<-    ##    +>>",16);
    29b2:	81 e3       	ldi	r24, 0x31	; 49
    29b4:	92 e0       	ldi	r25, 0x02	; 2
    29b6:	60 e1       	ldi	r22, 0x10	; 16
    29b8:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
		cetak_bil(kd,7,1,2);
    29bc:	81 2f       	mov	r24, r17
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	67 e0       	ldi	r22, 0x07	; 7
    29c2:	41 e0       	ldi	r20, 0x01	; 1
    29c4:	22 e0       	ldi	r18, 0x02	; 2
    29c6:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
		act=ButtonRead();
    29ca:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
		if (act == BUTTON_NEXT_DOWN)		kd++;
    29ce:	83 30       	cpi	r24, 0x03	; 3
    29d0:	11 f4       	brne	.+4      	; 0x29d6 <SettingSetPIDSpeedKD+0x4e>
    29d2:	1f 5f       	subi	r17, 0xFF	; 255
    29d4:	15 c0       	rjmp	.+42     	; 0x2a00 <SettingSetPIDSpeedKD+0x78>
		else if (act == BUTTON_PREV_DOWN)	kd--;
    29d6:	88 23       	and	r24, r24
    29d8:	11 f4       	brne	.+4      	; 0x29de <SettingSetPIDSpeedKD+0x56>
    29da:	11 50       	subi	r17, 0x01	; 1
    29dc:	11 c0       	rjmp	.+34     	; 0x2a00 <SettingSetPIDSpeedKD+0x78>
		else if (act == BUTTON_BACK_DOWN)	gState = GetParent(STATE_SETTING_SET_PID_SPEED_KD);
    29de:	82 30       	cpi	r24, 0x02	; 2
    29e0:	59 f0       	breq	.+22     	; 0x29f8 <SettingSetPIDSpeedKD+0x70>
		else if (act == BUTTON_ENTER_DOWN)
    29e2:	81 30       	cpi	r24, 0x01	; 1
    29e4:	69 f4       	brne	.+26     	; 0x2a00 <SettingSetPIDSpeedKD+0x78>
		{
			gDriveKD = kd;
    29e6:	10 93 d2 02 	sts	0x02D2, r17
    29ea:	10 92 d3 02 	sts	0x02D3, r1
			EepromWrite(ADDRESS_BLOCK_DRIVE_KD,kd);
    29ee:	8d e2       	ldi	r24, 0x2D	; 45
    29f0:	92 e0       	ldi	r25, 0x02	; 2
    29f2:	61 2f       	mov	r22, r17
    29f4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <__eeupd_byte_m32>
			gState = GetParent(STATE_SETTING_SET_PID_SPEED_KD);
    29f8:	d0 93 95 02 	sts	0x0295, r29
    29fc:	c0 93 94 02 	sts	0x0294, r28

void SettingSetPIDSpeedKD()
{
	uint8_t kd,act;
	kd = gDriveKD;
	while (gState == STATE_SETTING_SET_PID_SPEED_KD)
    2a00:	20 91 94 02 	lds	r18, 0x0294
    2a04:	30 91 95 02 	lds	r19, 0x0295
    2a08:	82 e0       	ldi	r24, 0x02	; 2
    2a0a:	2e 36       	cpi	r18, 0x6E	; 110
    2a0c:	38 07       	cpc	r19, r24
    2a0e:	21 f2       	breq	.-120    	; 0x2998 <SettingSetPIDSpeedKD+0x10>
			gDriveKD = kd;
			EepromWrite(ADDRESS_BLOCK_DRIVE_KD,kd);
			gState = GetParent(STATE_SETTING_SET_PID_SPEED_KD);
		}
	}
}
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	1f 91       	pop	r17
    2a16:	08 95       	ret

00002a18 <SettingDebugMenu>:
void SettingDebugMenu()
{
    2a18:	8f 92       	push	r8
    2a1a:	9f 92       	push	r9
    2a1c:	bf 92       	push	r11
    2a1e:	cf 92       	push	r12
    2a20:	df 92       	push	r13
    2a22:	ef 92       	push	r14
    2a24:	ff 92       	push	r15
    2a26:	0f 93       	push	r16
    2a28:	1f 93       	push	r17
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	0f 92       	push	r0
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
	gScrollMax = MAX_SCROLL_SETTING_DEBUG_MENU;
    2a34:	83 e0       	ldi	r24, 0x03	; 3
    2a36:	80 93 cb 02 	sts	0x02CB, r24
			{
				gScrollNum--;
			}
			else if (act == BUTTON_BACK_DOWN)
			{
				gState = STATE_SETTING_MENU;
    2a3a:	76 e0       	ldi	r23, 0x06	; 6
    2a3c:	87 2e       	mov	r8, r23
    2a3e:	91 2c       	mov	r9, r1
				gScrollNum = GetCursor(STATE_SETTING_DEBUG_MENU);
    2a40:	bb 24       	eor	r11, r11
    2a42:	b3 94       	inc	r11
			uint8_t act;
			act = ButtonRead();
			
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_DEBUG_DRIVER;
    2a44:	05 e6       	ldi	r16, 0x65	; 101
    2a46:	12 e0       	ldi	r17, 0x02	; 2
			uint8_t act;
			act = ButtonRead();
			
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_DEBUG_ADC;
    2a48:	64 e6       	ldi	r22, 0x64	; 100
    2a4a:	e6 2e       	mov	r14, r22
    2a4c:	62 e0       	ldi	r22, 0x02	; 2
    2a4e:	f6 2e       	mov	r15, r22
			LCDstring((uint8_t*)("DEBUG-SENSOR  2B"),16);
			uint8_t act;
			act = ButtonRead();
			if (act == BUTTON_ENTER_DOWN)
			{
				gState = STATE_SETTING_DEBUG_SENSOR;
    2a50:	53 e6       	ldi	r21, 0x63	; 99
    2a52:	c5 2e       	mov	r12, r21
    2a54:	52 e0       	ldi	r21, 0x02	; 2
    2a56:	d5 2e       	mov	r13, r21
	}
}
void SettingDebugMenu()
{
	gScrollMax = MAX_SCROLL_SETTING_DEBUG_MENU;
	while (gState == STATE_SETTING_DEBUG_MENU)
    2a58:	6c c0       	rjmp	.+216    	; 0x2b32 <SettingDebugMenu+0x11a>
	{
		ReStrainScroll();
    2a5a:	0e 94 06 11 	call	0x220c	; 0x220c <ReStrainScroll>
		PrintScroll(gScrollNum,gScrollMax);
    2a5e:	80 91 d0 02 	lds	r24, 0x02D0
    2a62:	60 91 cb 02 	lds	r22, 0x02CB
    2a66:	0e 94 15 11 	call	0x222a	; 0x222a <PrintScroll>
		if (gScrollNum == GetCursor(STATE_SETTING_DEBUG_SENSOR))
    2a6a:	20 91 d0 02 	lds	r18, 0x02D0
    2a6e:	21 30       	cpi	r18, 0x01	; 1
    2a70:	41 f5       	brne	.+80     	; 0x2ac2 <SettingDebugMenu+0xaa>
		{
			LCDGotoXY(0,0);
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	60 e0       	ldi	r22, 0x00	; 0
    2a76:	29 83       	std	Y+1, r18	; 0x01
    2a78:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("DEBUG-SENSOR  2B"),16);
    2a7c:	83 e5       	ldi	r24, 0x53	; 83
    2a7e:	92 e0       	ldi	r25, 0x02	; 2
    2a80:	60 e1       	ldi	r22, 0x10	; 16
    2a82:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    2a86:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			if (act == BUTTON_ENTER_DOWN)
    2a8a:	29 81       	ldd	r18, Y+1	; 0x01
    2a8c:	81 30       	cpi	r24, 0x01	; 1
    2a8e:	29 f4       	brne	.+10     	; 0x2a9a <SettingDebugMenu+0x82>
			{
				gState = STATE_SETTING_DEBUG_SENSOR;
    2a90:	d0 92 95 02 	sts	0x0295, r13
    2a94:	c0 92 94 02 	sts	0x0294, r12
    2a98:	05 c0       	rjmp	.+10     	; 0x2aa4 <SettingDebugMenu+0x8c>
				gScrollNum = 1;
			}
			else if (act == BUTTON_NEXT_DOWN)
    2a9a:	83 30       	cpi	r24, 0x03	; 3
    2a9c:	31 f4       	brne	.+12     	; 0x2aaa <SettingDebugMenu+0x92>
			{
				gScrollNum++;
    2a9e:	80 91 d0 02 	lds	r24, 0x02D0
    2aa2:	8f 5f       	subi	r24, 0xFF	; 255
    2aa4:	80 93 d0 02 	sts	0x02D0, r24
    2aa8:	44 c0       	rjmp	.+136    	; 0x2b32 <SettingDebugMenu+0x11a>
			}
			else if (act == BUTTON_PREV_DOWN)
    2aaa:	88 23       	and	r24, r24
    2aac:	b1 f1       	breq	.+108    	; 0x2b1a <SettingDebugMenu+0x102>
			{
				gScrollNum--;
			}
			else if (act == BUTTON_BACK_DOWN)
    2aae:	82 30       	cpi	r24, 0x02	; 2
    2ab0:	09 f0       	breq	.+2      	; 0x2ab4 <SettingDebugMenu+0x9c>
    2ab2:	3f c0       	rjmp	.+126    	; 0x2b32 <SettingDebugMenu+0x11a>
			{
				gState = STATE_SETTING_MENU;
    2ab4:	90 92 95 02 	sts	0x0295, r9
    2ab8:	80 92 94 02 	sts	0x0294, r8
				gScrollNum = GetCursor(STATE_SETTING_DEBUG_MENU);
    2abc:	20 93 d0 02 	sts	0x02D0, r18
    2ac0:	38 c0       	rjmp	.+112    	; 0x2b32 <SettingDebugMenu+0x11a>
			}
		}
		else if (gScrollNum == GetCursor(STATE_SETTING_DEBUG_ADC))
    2ac2:	22 30       	cpi	r18, 0x02	; 2
    2ac4:	91 f4       	brne	.+36     	; 0x2aea <SettingDebugMenu+0xd2>
		{
			LCDGotoXY(0,0);
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	60 e0       	ldi	r22, 0x00	; 0
    2aca:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("DEBUG-ADC     2B"),16);
    2ace:	84 e6       	ldi	r24, 0x64	; 100
    2ad0:	92 e0       	ldi	r25, 0x02	; 2
    2ad2:	60 e1       	ldi	r22, 0x10	; 16
    2ad4:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    2ad8:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			
			if (act == BUTTON_ENTER_DOWN)
    2adc:	81 30       	cpi	r24, 0x01	; 1
    2ade:	c9 f4       	brne	.+50     	; 0x2b12 <SettingDebugMenu+0xfa>
			{
				gState = STATE_SETTING_DEBUG_ADC;
    2ae0:	f0 92 95 02 	sts	0x0295, r15
    2ae4:	e0 92 94 02 	sts	0x0294, r14
    2ae8:	dd cf       	rjmp	.-70     	; 0x2aa4 <SettingDebugMenu+0x8c>
				gState = STATE_SETTING_MENU;
				gScrollNum = GetCursor(STATE_SETTING_DEBUG_MENU);
			}
		}
		
		else if (gScrollNum == GetCursor(STATE_SETTING_DEBUG_DRIVER))
    2aea:	23 30       	cpi	r18, 0x03	; 3
    2aec:	11 f5       	brne	.+68     	; 0x2b32 <SettingDebugMenu+0x11a>
		{
			LCDGotoXY(0,0);
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
			LCDstring((uint8_t*)("DEBUG-DRIVER  2B"),16);
    2af6:	85 e7       	ldi	r24, 0x75	; 117
    2af8:	92 e0       	ldi	r25, 0x02	; 2
    2afa:	60 e1       	ldi	r22, 0x10	; 16
    2afc:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCDstring>
			uint8_t act;
			act = ButtonRead();
    2b00:	0e 94 0e 02 	call	0x41c	; 0x41c <ButtonRead>
			
			if (act == BUTTON_ENTER_DOWN)
    2b04:	81 30       	cpi	r24, 0x01	; 1
    2b06:	29 f4       	brne	.+10     	; 0x2b12 <SettingDebugMenu+0xfa>
			{
				gState = STATE_SETTING_DEBUG_DRIVER;
    2b08:	10 93 95 02 	sts	0x0295, r17
    2b0c:	00 93 94 02 	sts	0x0294, r16
    2b10:	c9 cf       	rjmp	.-110    	; 0x2aa4 <SettingDebugMenu+0x8c>
				gScrollNum = 1;
			}
			else if (act == BUTTON_NEXT_DOWN)
    2b12:	83 30       	cpi	r24, 0x03	; 3
    2b14:	21 f2       	breq	.-120    	; 0x2a9e <SettingDebugMenu+0x86>
			{
				gScrollNum++;
			}
			else if (act == BUTTON_PREV_DOWN)
    2b16:	88 23       	and	r24, r24
    2b18:	21 f4       	brne	.+8      	; 0x2b22 <SettingDebugMenu+0x10a>
			{
				gScrollNum--;
    2b1a:	80 91 d0 02 	lds	r24, 0x02D0
    2b1e:	81 50       	subi	r24, 0x01	; 1
    2b20:	c1 cf       	rjmp	.-126    	; 0x2aa4 <SettingDebugMenu+0x8c>
			}
			else if (act == BUTTON_BACK_DOWN)
    2b22:	82 30       	cpi	r24, 0x02	; 2
    2b24:	31 f4       	brne	.+12     	; 0x2b32 <SettingDebugMenu+0x11a>
			{
				gState = STATE_SETTING_MENU;
    2b26:	90 92 95 02 	sts	0x0295, r9
    2b2a:	80 92 94 02 	sts	0x0294, r8
				gScrollNum = GetCursor(STATE_SETTING_DEBUG_MENU);
    2b2e:	b0 92 d0 02 	sts	0x02D0, r11
	}
}
void SettingDebugMenu()
{
	gScrollMax = MAX_SCROLL_SETTING_DEBUG_MENU;
	while (gState == STATE_SETTING_DEBUG_MENU)
    2b32:	80 91 94 02 	lds	r24, 0x0294
    2b36:	90 91 95 02 	lds	r25, 0x0295
    2b3a:	8d 33       	cpi	r24, 0x3D	; 61
    2b3c:	91 05       	cpc	r25, r1
    2b3e:	09 f4       	brne	.+2      	; 0x2b42 <SettingDebugMenu+0x12a>
    2b40:	8c cf       	rjmp	.-232    	; 0x2a5a <SettingDebugMenu+0x42>
				gState = STATE_SETTING_MENU;
				gScrollNum = GetCursor(STATE_SETTING_DEBUG_MENU);
			}
		}
	}
}
    2b42:	0f 90       	pop	r0
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	ff 90       	pop	r15
    2b4e:	ef 90       	pop	r14
    2b50:	df 90       	pop	r13
    2b52:	cf 90       	pop	r12
    2b54:	bf 90       	pop	r11
    2b56:	9f 90       	pop	r9
    2b58:	8f 90       	pop	r8
    2b5a:	08 95       	ret

00002b5c <SettingDebugSensor>:

void SettingDebugSensor()
{
    2b5c:	ef 92       	push	r14
    2b5e:	ff 92       	push	r15
    2b60:	0f 93       	push	r16
    2b62:	1f 93       	push	r17
	LCDclr();
    2b64:	0e 94 29 17 	call	0x2e52	; 0x2e52 <LCDclr>
	uint8_t l_Num=0;
	//~ uint8_t dip=0;///BIKIN YG DIPICK LEBIH CETHO
	while (!(ButtonBack()))
	{ 
		SensorReadDigital();
    2b68:	e7 e0       	ldi	r30, 0x07	; 7
    2b6a:	ee 2e       	mov	r14, r30
void SettingDebugSensor()
{
	LCDclr();
	uint8_t l_Num=0;
	//~ uint8_t dip=0;///BIKIN YG DIPICK LEBIH CETHO
	while (!(ButtonBack()))
    2b6c:	4d c0       	rjmp	.+154    	; 0x2c08 <SettingDebugSensor+0xac>
	{ 
		SensorReadDigital();
    2b6e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <SensorReadDigital>
    2b72:	0f e0       	ldi	r16, 0x0F	; 15
    2b74:	17 e0       	ldi	r17, 0x07	; 7
    2b76:	fe 2c       	mov	r15, r14
    2b78:	f1 1a       	sub	r15, r17
		for (l_Num=0;l_Num<=7;l_Num++)
		{
			if (isset(gSensH,l_Num))	cetak_bil(1,15-l_Num-8,1,1);
    2b7a:	80 91 d1 02 	lds	r24, 0x02D1
    2b7e:	6f 2d       	mov	r22, r15
    2b80:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    2b84:	88 23       	and	r24, r24
    2b86:	19 f0       	breq	.+6      	; 0x2b8e <SettingDebugSensor+0x32>
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <SettingDebugSensor+0x36>
			else 						cetak_bil(0,15-l_Num-8,1,1);
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	61 2f       	mov	r22, r17
    2b94:	41 e0       	ldi	r20, 0x01	; 1
    2b96:	21 e0       	ldi	r18, 0x01	; 1
    2b98:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
			if (isset(gSensL,l_Num))	cetak_bil(1,15-l_Num,1,1);
    2b9c:	80 91 cf 02 	lds	r24, 0x02CF
    2ba0:	6f 2d       	mov	r22, r15
    2ba2:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    2ba6:	88 23       	and	r24, r24
    2ba8:	19 f0       	breq	.+6      	; 0x2bb0 <SettingDebugSensor+0x54>
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <SettingDebugSensor+0x58>
			else 						cetak_bil(0,15-l_Num,1,1);
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	60 2f       	mov	r22, r16
    2bb6:	41 e0       	ldi	r20, 0x01	; 1
    2bb8:	21 e0       	ldi	r18, 0x01	; 1
    2bba:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
    2bbe:	11 50       	subi	r17, 0x01	; 1
    2bc0:	01 50       	subi	r16, 0x01	; 1
	uint8_t l_Num=0;
	//~ uint8_t dip=0;///BIKIN YG DIPICK LEBIH CETHO
	while (!(ButtonBack()))
	{ 
		SensorReadDigital();
		for (l_Num=0;l_Num<=7;l_Num++)
    2bc2:	1f 3f       	cpi	r17, 0xFF	; 255
    2bc4:	c1 f6       	brne	.-80     	; 0x2b76 <SettingDebugSensor+0x1a>
			if (isset(gSensH,l_Num))	cetak_bil(1,15-l_Num-8,1,1);
			else 						cetak_bil(0,15-l_Num-8,1,1);
			if (isset(gSensL,l_Num))	cetak_bil(1,15-l_Num,1,1);
			else 						cetak_bil(0,15-l_Num,1,1);
		}
		cetak_bil(isset(gSensA,SENS_A_LEFT_BIT),7,0,1);
    2bc6:	80 91 87 03 	lds	r24, 0x0387
    2bca:	60 e0       	ldi	r22, 0x00	; 0
    2bcc:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	67 e0       	ldi	r22, 0x07	; 7
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	21 e0       	ldi	r18, 0x01	; 1
    2bd8:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
		cetak_bil(isset(gSensA,SENS_A_MID_BIT),8,0,1);
    2bdc:	80 91 87 03 	lds	r24, 0x0387
    2be0:	62 e0       	ldi	r22, 0x02	; 2
    2be2:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	68 e0       	ldi	r22, 0x08	; 8
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	21 e0       	ldi	r18, 0x01	; 1
    2bee:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
		cetak_bil(isset(gSensA,SENS_A_RIGHT_BIT),9,0,1);
    2bf2:	80 91 87 03 	lds	r24, 0x0387
    2bf6:	61 e0       	ldi	r22, 0x01	; 1
    2bf8:	0e 94 69 00 	call	0xd2	; 0xd2 <isset>
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	69 e0       	ldi	r22, 0x09	; 9
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	21 e0       	ldi	r18, 0x01	; 1
    2c04:	0e 94 a9 00 	call	0x152	; 0x152 <cetak_bil>
void SettingDebugSensor()
{
	LCDclr();
	uint8_t l_Num=0;
	//~ uint8_t dip=0;///BIKIN YG DIPICK LEBIH CETHO
	while (!(ButtonBack()))
    2c08:	0e 94 a1 01 	call	0x342	; 0x342 <ButtonBack>
    2c0c:	88 23       	and	r24, r24
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <SettingDebugSensor+0xb6>
    2c10:	ae cf       	rjmp	.-164    	; 0x2b6e <SettingDebugSensor+0x12>
			//~ _delay_ms(50);
		//~ }
		//~ if (dip>1) dip=0;
		//~ else dip++;
	}
	gScrollNum = GetCursor(STATE_SETTING_DEBUG_SENSOR);
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	80 93 d0 02 	sts	0x02D0, r24
	gState = STATE_SETTING_DEBUG_MENU;
    2c18:	8d e3       	ldi	r24, 0x3D	; 61
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	90 93 95 02 	sts	0x0295, r25
    2c20:	80 93 94 02 	sts	0x0294, r24
}
    2c24:	1f 91       	pop	r17
    2c26:	0f 91       	pop	r16
    2c28:	ff 90       	pop	r15
    2c2a:	ef 90       	pop	r14
    2c2c:	08 95       	ret

00002c2e <main>:
	 * 100 = atur bobot
	 */

int main(void)
{
	Init();
    2c2e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <Init>
	
	gState = STATE_MENU;
    2c32:	10 92 95 02 	sts	0x0295, r1
    2c36:	10 92 94 02 	sts	0x0294, r1
	//~ Calibrate();
	//~ ProgMapping();
	while(1)
	{
		if (gState == STATE_CALIBRATE)						Calibrate();
    2c3a:	80 91 94 02 	lds	r24, 0x0294
    2c3e:	90 91 95 02 	lds	r25, 0x0295
    2c42:	85 30       	cpi	r24, 0x05	; 5
    2c44:	91 05       	cpc	r25, r1
    2c46:	11 f4       	brne	.+4      	; 0x2c4c <main+0x1e>
		}
	}
}
void Calibrate()
{
	SensorCalibrate();
    2c48:	0e 94 ef 03 	call	0x7de	; 0x7de <SensorCalibrate>
	//~ Calibrate();
	//~ ProgMapping();
	while(1)
	{
		if (gState == STATE_CALIBRATE)						Calibrate();
		if (gState == STATE_MENU)							Menu();
    2c4c:	80 91 94 02 	lds	r24, 0x0294
    2c50:	90 91 95 02 	lds	r25, 0x0295
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	11 f4       	brne	.+4      	; 0x2c5c <main+0x2e>
    2c58:	0e 94 3a 11 	call	0x2274	; 0x2274 <Menu>
		if (gState == STATE_RUN)							Run();
    2c5c:	80 91 94 02 	lds	r24, 0x0294
    2c60:	90 91 95 02 	lds	r25, 0x0295
    2c64:	87 30       	cpi	r24, 0x07	; 7
    2c66:	91 05       	cpc	r25, r1
    2c68:	11 f4       	brne	.+4      	; 0x2c6e <main+0x40>
    2c6a:	0e 94 98 0a 	call	0x1530	; 0x1530 <Run>
		if (gState == STATE_RUN_MAPPING)					RunMapping(0);
    2c6e:	80 91 94 02 	lds	r24, 0x0294
    2c72:	90 91 95 02 	lds	r25, 0x0295
    2c76:	89 30       	cpi	r24, 0x09	; 9
    2c78:	91 05       	cpc	r25, r1
    2c7a:	19 f4       	brne	.+6      	; 0x2c82 <main+0x54>
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <RunMapping>
		if (gState == STATE_RUN_MAPPING_C1)					RunMapping(1);
    2c82:	80 91 94 02 	lds	r24, 0x0294
    2c86:	90 91 95 02 	lds	r25, 0x0295
    2c8a:	8a 30       	cpi	r24, 0x0A	; 10
    2c8c:	91 05       	cpc	r25, r1
    2c8e:	19 f4       	brne	.+6      	; 0x2c96 <main+0x68>
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <RunMapping>
		if (gState == STATE_RUN_MAPPING_C2)					RunMapping(2);
    2c96:	80 91 94 02 	lds	r24, 0x0294
    2c9a:	90 91 95 02 	lds	r25, 0x0295
    2c9e:	82 30       	cpi	r24, 0x02	; 2
    2ca0:	91 05       	cpc	r25, r1
    2ca2:	19 f4       	brne	.+6      	; 0x2caa <main+0x7c>
    2ca4:	82 e0       	ldi	r24, 0x02	; 2
    2ca6:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <RunMapping>
		if (gState == STATE_RUN_MAPPING_C3)					RunMapping(3);
    2caa:	80 91 94 02 	lds	r24, 0x0294
    2cae:	90 91 95 02 	lds	r25, 0x0295
    2cb2:	83 30       	cpi	r24, 0x03	; 3
    2cb4:	91 05       	cpc	r25, r1
    2cb6:	19 f4       	brne	.+6      	; 0x2cbe <main+0x90>
    2cb8:	83 e0       	ldi	r24, 0x03	; 3
    2cba:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <RunMapping>
		if (gState == STATE_RUN_MAPPING_EBOTEC)				RunMapping(4);
    2cbe:	80 91 94 02 	lds	r24, 0x0294
    2cc2:	90 91 95 02 	lds	r25, 0x0295
    2cc6:	84 30       	cpi	r24, 0x04	; 4
    2cc8:	91 05       	cpc	r25, r1
    2cca:	19 f4       	brne	.+6      	; 0x2cd2 <main+0xa4>
    2ccc:	84 e0       	ldi	r24, 0x04	; 4
    2cce:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <RunMapping>
		if (gState == STATE_RUN_LEARN)						RunLearn();
    2cd2:	80 91 94 02 	lds	r24, 0x0294
    2cd6:	90 91 95 02 	lds	r25, 0x0295
    2cda:	81 30       	cpi	r24, 0x01	; 1
    2cdc:	91 05       	cpc	r25, r1
    2cde:	11 f4       	brne	.+4      	; 0x2ce4 <main+0xb6>
    2ce0:	0e 94 94 0a 	call	0x1528	; 0x1528 <RunLearn>
		
		if (gState == STATE_RUN_TEST_COUNTER)				RunTestCounter();
    2ce4:	80 91 94 02 	lds	r24, 0x0294
    2ce8:	90 91 95 02 	lds	r25, 0x0295
    2cec:	88 30       	cpi	r24, 0x08	; 8
    2cee:	91 05       	cpc	r25, r1
    2cf0:	11 f4       	brne	.+4      	; 0x2cf6 <main+0xc8>
    2cf2:	0e 94 1c 0b 	call	0x1638	; 0x1638 <RunTestCounter>
		if (gState == STATE_SETTING_MENU)					SettingMenu();
    2cf6:	80 91 94 02 	lds	r24, 0x0294
    2cfa:	90 91 95 02 	lds	r25, 0x0295
    2cfe:	86 30       	cpi	r24, 0x06	; 6
    2d00:	91 05       	cpc	r25, r1
    2d02:	11 f4       	brne	.+4      	; 0x2d08 <main+0xda>
    2d04:	0e 94 78 12 	call	0x24f0	; 0x24f0 <SettingMenu>
		if (gState == STATE_SETTING_SET_PID_SPEED_MENU)		SettingSetPIDSpeedMenu();
    2d08:	80 91 94 02 	lds	r24, 0x0294
    2d0c:	90 91 95 02 	lds	r25, 0x0295
    2d10:	8e 33       	cpi	r24, 0x3E	; 62
    2d12:	91 05       	cpc	r25, r1
    2d14:	11 f4       	brne	.+4      	; 0x2d1a <main+0xec>
    2d16:	0e 94 67 13 	call	0x26ce	; 0x26ce <SettingSetPIDSpeedMenu>
		if (gState == STATE_SETTING_SET_PID_SPEED_KD)		SettingSetPIDSpeedKD();
    2d1a:	80 91 94 02 	lds	r24, 0x0294
    2d1e:	90 91 95 02 	lds	r25, 0x0295
    2d22:	22 e0       	ldi	r18, 0x02	; 2
    2d24:	8e 36       	cpi	r24, 0x6E	; 110
    2d26:	92 07       	cpc	r25, r18
    2d28:	11 f4       	brne	.+4      	; 0x2d2e <main+0x100>
    2d2a:	0e 94 c4 14 	call	0x2988	; 0x2988 <SettingSetPIDSpeedKD>
		if (gState == STATE_SETTING_SET_PID_SPEED_KP)		SettingSetPIDSpeedKP();
    2d2e:	80 91 94 02 	lds	r24, 0x0294
    2d32:	90 91 95 02 	lds	r25, 0x0295
    2d36:	22 e0       	ldi	r18, 0x02	; 2
    2d38:	8d 36       	cpi	r24, 0x6D	; 109
    2d3a:	92 07       	cpc	r25, r18
    2d3c:	11 f4       	brne	.+4      	; 0x2d42 <main+0x114>
    2d3e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <SettingSetPIDSpeedKP>
		if (gState == STATE_SETTING_SET_PID_SPEED_SPEED)	SettingSetPIDSpeedSpeed();
    2d42:	80 91 94 02 	lds	r24, 0x0294
    2d46:	90 91 95 02 	lds	r25, 0x0295
    2d4a:	22 e0       	ldi	r18, 0x02	; 2
    2d4c:	8f 36       	cpi	r24, 0x6F	; 111
    2d4e:	92 07       	cpc	r25, r18
    2d50:	11 f4       	brne	.+4      	; 0x2d56 <main+0x128>
    2d52:	0e 94 36 14 	call	0x286c	; 0x286c <SettingSetPIDSpeedSpeed>
		if (gState == STATE_SETTING_DEBUG_MENU)				SettingDebugMenu();
    2d56:	80 91 94 02 	lds	r24, 0x0294
    2d5a:	90 91 95 02 	lds	r25, 0x0295
    2d5e:	8d 33       	cpi	r24, 0x3D	; 61
    2d60:	91 05       	cpc	r25, r1
    2d62:	11 f4       	brne	.+4      	; 0x2d68 <main+0x13a>
    2d64:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <SettingDebugMenu>
		if (gState == STATE_SETTING_DEBUG_SENSOR)			SettingDebugSensor();
    2d68:	80 91 94 02 	lds	r24, 0x0294
    2d6c:	90 91 95 02 	lds	r25, 0x0295
    2d70:	22 e0       	ldi	r18, 0x02	; 2
    2d72:	83 36       	cpi	r24, 0x63	; 99
    2d74:	92 07       	cpc	r25, r18
    2d76:	09 f0       	breq	.+2      	; 0x2d7a <main+0x14c>
    2d78:	60 cf       	rjmp	.-320    	; 0x2c3a <main+0xc>
    2d7a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <SettingDebugSensor>
    2d7e:	5d cf       	rjmp	.-326    	; 0x2c3a <main+0xc>

00002d80 <LCDMix_4Bit>:
//sets four port pins to corresponding nibble
//for high nibble use mask data & 0b11110000
//for low nibble use (data & 0b00001111)<<4
static void LCDMix_4Bit(uint8_t data)
{
  if((data)&(0b10000000)) LDPD7 |=1<<LCD_D7;
    2d80:	87 ff       	sbrs	r24, 7
    2d82:	02 c0       	rjmp	.+4      	; 0x2d88 <LCDMix_4Bit+0x8>
    2d84:	c0 9a       	sbi	0x18, 0	; 24
    2d86:	01 c0       	rjmp	.+2      	; 0x2d8a <LCDMix_4Bit+0xa>
    else LDPD7 &=~(1<<LCD_D7);
    2d88:	c0 98       	cbi	0x18, 0	; 24
  if((data)&(0b01000000)) LDPD6 |=1<<LCD_D6;
    2d8a:	86 ff       	sbrs	r24, 6
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <LCDMix_4Bit+0x12>
    2d8e:	c1 9a       	sbi	0x18, 1	; 24
    2d90:	01 c0       	rjmp	.+2      	; 0x2d94 <LCDMix_4Bit+0x14>
    else LDPD6 &=~(1<<LCD_D6);
    2d92:	c1 98       	cbi	0x18, 1	; 24
  if((data)&(0b00100000)) LDPD5 |=1<<LCD_D5;
    2d94:	85 ff       	sbrs	r24, 5
    2d96:	02 c0       	rjmp	.+4      	; 0x2d9c <LCDMix_4Bit+0x1c>
    2d98:	c2 9a       	sbi	0x18, 2	; 24
    2d9a:	01 c0       	rjmp	.+2      	; 0x2d9e <LCDMix_4Bit+0x1e>
    else LDPD5&=~(1<<LCD_D5);
    2d9c:	c2 98       	cbi	0x18, 2	; 24
  if((data)&(0b00010000)) LDPD4 |=1<<LCD_D4;
    2d9e:	84 ff       	sbrs	r24, 4
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <LCDMix_4Bit+0x26>
    2da2:	c3 9a       	sbi	0x18, 3	; 24
    2da4:	08 95       	ret
    else LDPD4 &=~(1<<LCD_D4);	
    2da6:	c3 98       	cbi	0x18, 3	; 24
    2da8:	08 95       	ret

00002daa <LCDsendChar>:
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}
}	
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
    2daa:	1f 93       	push	r17
    2dac:	18 2f       	mov	r17, r24
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
#ifdef LCD_4BIT_M
	LCDMix_4Bit(ch & 0b11110000);
    2dae:	80 7f       	andi	r24, 0xF0	; 240
    2db0:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <LCDMix_4Bit>
	LDPRS |=1<<LCD_RS;
    2db4:	c5 9a       	sbi	0x18, 5	; 24
	LDPE |=1<<LCD_E;		
    2db6:	c4 9a       	sbi	0x18, 4	; 24
    2db8:	87 eb       	ldi	r24, 0xB7	; 183
    2dba:	9b e0       	ldi	r25, 0x0B	; 11
    2dbc:	01 97       	sbiw	r24, 0x01	; 1
    2dbe:	f1 f7       	brne	.-4      	; 0x2dbc <LCDsendChar+0x12>
    2dc0:	00 c0       	rjmp	.+0      	; 0x2dc2 <LCDsendChar+0x18>
    2dc2:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
    2dc4:	c4 98       	cbi	0x18, 4	; 24
	LDPRS &=~(1<<LCD_RS);
    2dc6:	c5 98       	cbi	0x18, 5	; 24
    2dc8:	87 eb       	ldi	r24, 0xB7	; 183
    2dca:	9b e0       	ldi	r25, 0x0B	; 11
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <LCDsendChar+0x22>
    2dd0:	00 c0       	rjmp	.+0      	; 0x2dd2 <LCDsendChar+0x28>
    2dd2:	00 00       	nop
	_delay_ms(1);
	LCDMix_4Bit((ch & 0b00001111)<<4);
    2dd4:	81 2f       	mov	r24, r17
    2dd6:	82 95       	swap	r24
    2dd8:	80 7f       	andi	r24, 0xF0	; 240
    2dda:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <LCDMix_4Bit>
	LDPRS |=1<<LCD_RS;
    2dde:	c5 9a       	sbi	0x18, 5	; 24
	LDPE |=1<<LCD_E;		
    2de0:	c4 9a       	sbi	0x18, 4	; 24
    2de2:	87 eb       	ldi	r24, 0xB7	; 183
    2de4:	9b e0       	ldi	r25, 0x0B	; 11
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <LCDsendChar+0x3c>
    2dea:	00 c0       	rjmp	.+0      	; 0x2dec <LCDsendChar+0x42>
    2dec:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
    2dee:	c4 98       	cbi	0x18, 4	; 24
	LDPRS &=~(1<<LCD_RS);
    2df0:	c5 98       	cbi	0x18, 5	; 24
    2df2:	87 eb       	ldi	r24, 0xB7	; 183
    2df4:	9b e0       	ldi	r25, 0x0B	; 11
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	f1 f7       	brne	.-4      	; 0x2df6 <LCDsendChar+0x4c>
    2dfa:	00 c0       	rjmp	.+0      	; 0x2dfc <LCDsendChar+0x52>
    2dfc:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
	LDPRS &=~(1<<LCD_RS);
	_delay_ms(1);	
#endif
}
    2dfe:	1f 91       	pop	r17
    2e00:	08 95       	ret

00002e02 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
    2e02:	1f 93       	push	r17
    2e04:	18 2f       	mov	r17, r24
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
#ifdef LCD_4BIT_M
	LCDMix_4Bit(cmd & 0b11110000);
    2e06:	80 7f       	andi	r24, 0xF0	; 240
    2e08:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <LCDMix_4Bit>
	LDPE |=1<<LCD_E;		
    2e0c:	c4 9a       	sbi	0x18, 4	; 24
    2e0e:	87 eb       	ldi	r24, 0xB7	; 183
    2e10:	9b e0       	ldi	r25, 0x0B	; 11
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <LCDsendCommand+0x10>
    2e16:	00 c0       	rjmp	.+0      	; 0x2e18 <LCDsendCommand+0x16>
    2e18:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
    2e1a:	c4 98       	cbi	0x18, 4	; 24
    2e1c:	87 eb       	ldi	r24, 0xB7	; 183
    2e1e:	9b e0       	ldi	r25, 0x0B	; 11
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <LCDsendCommand+0x1e>
    2e24:	00 c0       	rjmp	.+0      	; 0x2e26 <LCDsendCommand+0x24>
    2e26:	00 00       	nop
	_delay_ms(1);
	LCDMix_4Bit((cmd & 0b00001111)<<4);
    2e28:	81 2f       	mov	r24, r17
    2e2a:	82 95       	swap	r24
    2e2c:	80 7f       	andi	r24, 0xF0	; 240
    2e2e:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <LCDMix_4Bit>
	LDPE |=1<<LCD_E;		
    2e32:	c4 9a       	sbi	0x18, 4	; 24
    2e34:	87 eb       	ldi	r24, 0xB7	; 183
    2e36:	9b e0       	ldi	r25, 0x0B	; 11
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <LCDsendCommand+0x36>
    2e3c:	00 c0       	rjmp	.+0      	; 0x2e3e <LCDsendCommand+0x3c>
    2e3e:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
    2e40:	c4 98       	cbi	0x18, 4	; 24
    2e42:	87 eb       	ldi	r24, 0xB7	; 183
    2e44:	9b e0       	ldi	r25, 0x0B	; 11
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	f1 f7       	brne	.-4      	; 0x2e46 <LCDsendCommand+0x44>
    2e4a:	00 c0       	rjmp	.+0      	; 0x2e4c <LCDsendCommand+0x4a>
    2e4c:	00 00       	nop
	LDPE |=1<<LCD_E;		
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}		
    2e4e:	1f 91       	pop	r17
    2e50:	08 95       	ret

00002e52 <LCDclr>:
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
}
    2e58:	08 95       	ret

00002e5a <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
    2e5a:	82 e0       	ldi	r24, 0x02	; 2
    2e5c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
}
    2e60:	08 95       	ret

00002e62 <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
    2e62:	ef 92       	push	r14
    2e64:	ff 92       	push	r15
    2e66:	1f 93       	push	r17
    2e68:	df 93       	push	r29
    2e6a:	cf 93       	push	r28
    2e6c:	0f 92       	push	r0
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
    2e72:	00 97       	sbiw	r24, 0x00	; 0
    2e74:	81 f0       	breq	.+32     	; 0x2e96 <LCDstring+0x34>
    2e76:	18 2f       	mov	r17, r24
    2e78:	48 2f       	mov	r20, r24
    2e7a:	59 2f       	mov	r21, r25
    2e7c:	7a 01       	movw	r14, r20
    2e7e:	07 c0       	rjmp	.+14     	; 0x2e8e <LCDstring+0x2c>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
    2e80:	f7 01       	movw	r30, r14
    2e82:	81 91       	ld	r24, Z+
    2e84:	7f 01       	movw	r14, r30
    2e86:	69 83       	std	Y+1, r22	; 0x01
    2e88:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCDsendChar>
    2e8c:	69 81       	ldd	r22, Y+1	; 0x01

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
    2e8e:	8e 2d       	mov	r24, r14
    2e90:	81 1b       	sub	r24, r17
    2e92:	86 17       	cp	r24, r22
    2e94:	a8 f3       	brcs	.-22     	; 0x2e80 <LCDstring+0x1e>
	{
		LCDsendChar(data[i]);
	}
}
    2e96:	0f 90       	pop	r0
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	1f 91       	pop	r17
    2e9e:	ff 90       	pop	r15
    2ea0:	ef 90       	pop	r14
    2ea2:	08 95       	ret

00002ea4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
    2ea4:	62 30       	cpi	r22, 0x02	; 2
    2ea6:	31 f0       	breq	.+12     	; 0x2eb4 <LCDGotoXY+0x10>
    2ea8:	63 30       	cpi	r22, 0x03	; 3
    2eaa:	31 f0       	breq	.+12     	; 0x2eb8 <LCDGotoXY+0x14>
    2eac:	61 30       	cpi	r22, 0x01	; 1
    2eae:	29 f4       	brne	.+10     	; 0x2eba <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
    2eb0:	80 5c       	subi	r24, 0xC0	; 192
    2eb2:	03 c0       	rjmp	.+6      	; 0x2eba <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
    2eb4:	8c 5e       	subi	r24, 0xEC	; 236
    2eb6:	01 c0       	rjmp	.+2      	; 0x2eba <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
    2eb8:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
    2eba:	80 68       	ori	r24, 0x80	; 128
    2ebc:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
	
}
    2ec0:	08 95       	ret

00002ec2 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
    2ec2:	1f 93       	push	r17
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	ec 01       	movw	r28, r24
    2eca:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
    2ecc:	64 2f       	mov	r22, r20
    2ece:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    2ed2:	10 e0       	ldi	r17, 0x00	; 0
    2ed4:	03 c0       	rjmp	.+6      	; 0x2edc <CopyStringtoLCD+0x1a>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
    2ed6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
    2eda:	1f 5f       	subi	r17, 0xFF	; 255
    2edc:	fe 01       	movw	r30, r28
    2ede:	e1 0f       	add	r30, r17
    2ee0:	f1 1d       	adc	r31, r1
    2ee2:	84 91       	lpm	r24, Z+
    2ee4:	88 23       	and	r24, r24
    2ee6:	b9 f7       	brne	.-18     	; 0x2ed6 <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
    2ee8:	df 91       	pop	r29
    2eea:	cf 91       	pop	r28
    2eec:	1f 91       	pop	r17
    2eee:	08 95       	ret

00002ef0 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
    2ef0:	cf 92       	push	r12
    2ef2:	df 92       	push	r13
    2ef4:	ff 92       	push	r15
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	0f 92       	push	r0
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	6c 01       	movw	r12, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
    2f06:	66 0f       	add	r22, r22
    2f08:	66 0f       	add	r22, r22
    2f0a:	66 0f       	add	r22, r22
    2f0c:	60 64       	ori	r22, 0x40	; 64
	for (i=0; i<8; i++){
    2f0e:	00 e0       	ldi	r16, 0x00	; 0
    2f10:	10 e0       	ldi	r17, 0x00	; 0
		pcc=pgm_read_byte(&pc[i]);
    2f12:	f6 01       	movw	r30, r12
    2f14:	e0 0f       	add	r30, r16
    2f16:	f1 1f       	adc	r31, r17
    2f18:	f4 90       	lpm	r15, Z+
		LCDsendCommand(a++);
    2f1a:	86 2f       	mov	r24, r22
    2f1c:	80 0f       	add	r24, r16
    2f1e:	69 83       	std	Y+1, r22	; 0x01
    2f20:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
		LCDsendChar(pcc);
    2f24:	8f 2d       	mov	r24, r15
    2f26:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
    2f2a:	0f 5f       	subi	r16, 0xFF	; 255
    2f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f2e:	69 81       	ldd	r22, Y+1	; 0x01
    2f30:	08 30       	cpi	r16, 0x08	; 8
    2f32:	11 05       	cpc	r17, r1
    2f34:	71 f7       	brne	.-36     	; 0x2f12 <LCDdefinechar+0x22>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
    2f36:	0f 90       	pop	r0
    2f38:	cf 91       	pop	r28
    2f3a:	df 91       	pop	r29
    2f3c:	1f 91       	pop	r17
    2f3e:	0f 91       	pop	r16
    2f40:	ff 90       	pop	r15
    2f42:	df 90       	pop	r13
    2f44:	cf 90       	pop	r12
    2f46:	08 95       	ret

00002f48 <LCDinit>:
  if((data)&(0b00000001)) LDPD0 |=1<<LCD_D0;
    else LDPD0 &=~(1<<LCD_D0);			
}
#endif
void LCDinit(void)//Initializes LCD
{
    2f48:	cf 93       	push	r28
    2f4a:	df 93       	push	r29
    2f4c:	87 ec       	ldi	r24, 0xC7	; 199
    2f4e:	9f ea       	ldi	r25, 0xAF	; 175
    2f50:	01 97       	sbiw	r24, 0x01	; 1
    2f52:	f1 f7       	brne	.-4      	; 0x2f50 <LCDinit+0x8>
    2f54:	00 c0       	rjmp	.+0      	; 0x2f56 <LCDinit+0xe>
    2f56:	00 00       	nop

#ifdef LCD_4BIT_M
	//4 mixed bit part
	_delay_ms(15);
	//zero to data pins
	LCDMix_4Bit(0b00000000);
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <LCDMix_4Bit>
	//zero to control pins
	LDPRS &=~(1<<LCD_RS);
    2f5e:	c5 98       	cbi	0x18, 5	; 24
	LDPRW &=~(1<<LCD_RW);
    2f60:	c7 98       	cbi	0x18, 7	; 24
	LDPE &=~(1<<LCD_E);
    2f62:	c4 98       	cbi	0x18, 4	; 24
	//set data direction
	LDDD4 |=1<<LCD_D4;
    2f64:	bb 9a       	sbi	0x17, 3	; 23
	LDDD5 |=1<<LCD_D5;
    2f66:	ba 9a       	sbi	0x17, 2	; 23
	LDDD6 |=1<<LCD_D6;
    2f68:	b9 9a       	sbi	0x17, 1	; 23
	LDDD7 |=1<<LCD_D7;
    2f6a:	b8 9a       	sbi	0x17, 0	; 23
	//control direction pins
	LDDRS |=1<<LCD_RS;
    2f6c:	bd 9a       	sbi	0x17, 5	; 23
	LDDRW |=1<<LCD_RW;
    2f6e:	bf 9a       	sbi	0x17, 7	; 23
	LDDE |=1<<LCD_E;
    2f70:	bc 9a       	sbi	0x17, 4	; 23
   //---------one------
	LCDMix_4Bit(0b00110000);
    2f72:	80 e3       	ldi	r24, 0x30	; 48
    2f74:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <LCDMix_4Bit>
	LDPE |=1<<LCD_E;		
    2f78:	c4 9a       	sbi	0x18, 4	; 24
    2f7a:	87 eb       	ldi	r24, 0xB7	; 183
    2f7c:	9b e0       	ldi	r25, 0x0B	; 11
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	f1 f7       	brne	.-4      	; 0x2f7e <LCDinit+0x36>
    2f82:	00 c0       	rjmp	.+0      	; 0x2f84 <LCDinit+0x3c>
    2f84:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
    2f86:	c4 98       	cbi	0x18, 4	; 24
    2f88:	87 eb       	ldi	r24, 0xB7	; 183
    2f8a:	9b e0       	ldi	r25, 0x0B	; 11
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <LCDinit+0x44>
    2f90:	00 c0       	rjmp	.+0      	; 0x2f92 <LCDinit+0x4a>
    2f92:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LCDMix_4Bit(0b00110000);
    2f94:	80 e3       	ldi	r24, 0x30	; 48
    2f96:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <LCDMix_4Bit>
	LDPE |=1<<LCD_E;		
    2f9a:	c4 9a       	sbi	0x18, 4	; 24
    2f9c:	87 eb       	ldi	r24, 0xB7	; 183
    2f9e:	9b e0       	ldi	r25, 0x0B	; 11
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <LCDinit+0x58>
    2fa4:	00 c0       	rjmp	.+0      	; 0x2fa6 <LCDinit+0x5e>
    2fa6:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
    2fa8:	c4 98       	cbi	0x18, 4	; 24
    2faa:	87 eb       	ldi	r24, 0xB7	; 183
    2fac:	9b e0       	ldi	r25, 0x0B	; 11
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <LCDinit+0x66>
    2fb2:	00 c0       	rjmp	.+0      	; 0x2fb4 <LCDinit+0x6c>
    2fb4:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LCDMix_4Bit(0b00100000);
    2fb6:	80 e2       	ldi	r24, 0x20	; 32
    2fb8:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <LCDMix_4Bit>
	LDPE |=1<<LCD_E;		
    2fbc:	c4 9a       	sbi	0x18, 4	; 24
    2fbe:	87 eb       	ldi	r24, 0xB7	; 183
    2fc0:	9b e0       	ldi	r25, 0x0B	; 11
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <LCDinit+0x7a>
    2fc6:	00 c0       	rjmp	.+0      	; 0x2fc8 <LCDinit+0x80>
    2fc8:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
    2fca:	c4 98       	cbi	0x18, 4	; 24
    2fcc:	87 eb       	ldi	r24, 0xB7	; 183
    2fce:	9b e0       	ldi	r25, 0x0B	; 11
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <LCDinit+0x88>
    2fd4:	00 c0       	rjmp	.+0      	; 0x2fd6 <LCDinit+0x8e>
    2fd6:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
    2fd8:	88 e2       	ldi	r24, 0x28	; 40
    2fda:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
    2fde:	8c e0       	ldi	r24, 0x0C	; 12
    2fe0:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
    2fe4:	c0 e0       	ldi	r28, 0x00	; 0
    2fe6:	d0 e0       	ldi	r29, 0x00	; 0
#endif
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
    2fe8:	ce 01       	movw	r24, r28
    2fea:	23 e0       	ldi	r18, 0x03	; 3
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	2a 95       	dec	r18
    2ff2:	e1 f7       	brne	.-8      	; 0x2fec <LCDinit+0xa4>
    2ff4:	8c 5a       	subi	r24, 0xAC	; 172
    2ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff8:	6c 2f       	mov	r22, r28
    2ffa:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <LCDdefinechar>
    2ffe:	21 96       	adiw	r28, 0x01	; 1
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
#endif
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
    3000:	c8 30       	cpi	r28, 0x08	; 8
    3002:	d1 05       	cpc	r29, r1
    3004:	89 f7       	brne	.-30     	; 0x2fe8 <LCDinit+0xa0>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}
}	
    3006:	df 91       	pop	r29
    3008:	cf 91       	pop	r28
    300a:	08 95       	ret

0000300c <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
    300c:	0f 93       	push	r16
    300e:	1f 93       	push	r17
    3010:	08 2f       	mov	r16, r24
	for (uint8_t i=0;i<n;i++)
    3012:	10 e0       	ldi	r17, 0x00	; 0
    3014:	04 c0       	rjmp	.+8      	; 0x301e <LCDshiftLeft+0x12>
	{
		LCDsendCommand(0x1E);
    3016:	8e e1       	ldi	r24, 0x1E	; 30
    3018:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
    301c:	1f 5f       	subi	r17, 0xFF	; 255
    301e:	10 17       	cp	r17, r16
    3020:	d0 f3       	brcs	.-12     	; 0x3016 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
    3022:	1f 91       	pop	r17
    3024:	0f 91       	pop	r16
    3026:	08 95       	ret

00003028 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	08 2f       	mov	r16, r24
	for (uint8_t i=0;i<n;i++)
    302e:	10 e0       	ldi	r17, 0x00	; 0
    3030:	04 c0       	rjmp	.+8      	; 0x303a <LCDshiftRight+0x12>
	{
		LCDsendCommand(0x18);
    3032:	88 e1       	ldi	r24, 0x18	; 24
    3034:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    3038:	1f 5f       	subi	r17, 0xFF	; 255
    303a:	10 17       	cp	r17, r16
    303c:	d0 f3       	brcs	.-12     	; 0x3032 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    303e:	1f 91       	pop	r17
    3040:	0f 91       	pop	r16
    3042:	08 95       	ret

00003044 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    3044:	8e e0       	ldi	r24, 0x0E	; 14
    3046:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
}
    304a:	08 95       	ret

0000304c <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    304c:	8f e0       	ldi	r24, 0x0F	; 15
    304e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
}
    3052:	08 95       	ret

00003054 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    3054:	8c e0       	ldi	r24, 0x0C	; 12
    3056:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
}
    305a:	08 95       	ret

0000305c <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    305c:	88 e0       	ldi	r24, 0x08	; 8
    305e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
}
    3062:	08 95       	ret

00003064 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    3064:	8c e0       	ldi	r24, 0x0C	; 12
    3066:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
}
    306a:	08 95       	ret

0000306c <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    306c:	0f 93       	push	r16
    306e:	1f 93       	push	r17
    3070:	08 2f       	mov	r16, r24
	for (uint8_t i=0;i<n;i++)
    3072:	10 e0       	ldi	r17, 0x00	; 0
    3074:	04 c0       	rjmp	.+8      	; 0x307e <LCDcursorLeft+0x12>
	{
		LCDsendCommand(0x10);
    3076:	80 e1       	ldi	r24, 0x10	; 16
    3078:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    307c:	1f 5f       	subi	r17, 0xFF	; 255
    307e:	10 17       	cp	r17, r16
    3080:	d0 f3       	brcs	.-12     	; 0x3076 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    3082:	1f 91       	pop	r17
    3084:	0f 91       	pop	r16
    3086:	08 95       	ret

00003088 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    3088:	0f 93       	push	r16
    308a:	1f 93       	push	r17
    308c:	08 2f       	mov	r16, r24
	for (uint8_t i=0;i<n;i++)
    308e:	10 e0       	ldi	r17, 0x00	; 0
    3090:	04 c0       	rjmp	.+8      	; 0x309a <LCDcursorRight+0x12>
	{
		LCDsendCommand(0x14);
    3092:	84 e1       	ldi	r24, 0x14	; 20
    3094:	0e 94 01 17 	call	0x2e02	; 0x2e02 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    3098:	1f 5f       	subi	r17, 0xFF	; 255
    309a:	10 17       	cp	r17, r16
    309c:	d0 f3       	brcs	.-12     	; 0x3092 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    309e:	1f 91       	pop	r17
    30a0:	0f 91       	pop	r16
    30a2:	08 95       	ret

000030a4 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
    30a4:	cf 92       	push	r12
    30a6:	df 92       	push	r13
    30a8:	ef 92       	push	r14
    30aa:	ff 92       	push	r15
    30ac:	0f 93       	push	r16
    30ae:	1f 93       	push	r17
    30b0:	df 93       	push	r29
    30b2:	cf 93       	push	r28
    30b4:	0f 92       	push	r0
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
    30ba:	e6 e0       	ldi	r30, 0x06	; 6
    30bc:	8e 9f       	mul	r24, r30
    30be:	f0 01       	movw	r30, r0
    30c0:	11 24       	eor	r1, r1
    30c2:	24 2f       	mov	r18, r20
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	e2 9f       	mul	r30, r18
    30c8:	c0 01       	movw	r24, r0
    30ca:	e3 9f       	mul	r30, r19
    30cc:	90 0d       	add	r25, r0
    30ce:	f2 9f       	mul	r31, r18
    30d0:	90 0d       	add	r25, r0
    30d2:	11 24       	eor	r1, r1
    30d4:	70 e0       	ldi	r23, 0x00	; 0
    30d6:	0e 94 ad 18 	call	0x315a	; 0x315a <__divmodhi4>
    30da:	6b 01       	movw	r12, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    30dc:	cb 01       	movw	r24, r22
    30de:	66 e0       	ldi	r22, 0x06	; 6
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	0e 94 99 18 	call	0x3132	; 0x3132 <__udivmodhi4>
    30e6:	e8 2e       	mov	r14, r24
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    30e8:	00 e0       	ldi	r16, 0x00	; 0
    30ea:	10 e0       	ldi	r17, 0x00	; 0
    30ec:	ff 24       	eor	r15, r15
    30ee:	15 c0       	rjmp	.+42     	; 0x311a <LCDprogressBar+0x76>
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
    30f0:	98 01       	movw	r18, r16
    30f2:	2b 5f       	subi	r18, 0xFB	; 251
    30f4:	3f 4f       	sbci	r19, 0xFF	; 255
    30f6:	c2 16       	cp	r12, r18
    30f8:	d3 06       	cpc	r13, r19
    30fa:	28 f4       	brcc	.+10     	; 0x3106 <LCDprogressBar+0x62>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    30fc:	c0 16       	cp	r12, r16
    30fe:	d1 06       	cpc	r13, r17
    3100:	20 f4       	brcc	.+8      	; 0x310a <LCDprogressBar+0x66>
			{
				// this is an empty block
				// use space character?
				c = 0;
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	03 c0       	rjmp	.+6      	; 0x310c <LCDprogressBar+0x68>
			}
		}
		else
		{
			// this is a full block
			c = 5;
    3106:	85 e0       	ldi	r24, 0x05	; 5
    3108:	01 c0       	rjmp	.+2      	; 0x310c <LCDprogressBar+0x68>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    310a:	8e 2d       	mov	r24, r14
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
    310c:	49 83       	std	Y+1, r20	; 0x01
    310e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
    3112:	f3 94       	inc	r15
    3114:	0a 5f       	subi	r16, 0xFA	; 250
    3116:	1f 4f       	sbci	r17, 0xFF	; 255
    3118:	49 81       	ldd	r20, Y+1	; 0x01
    311a:	f4 16       	cp	r15, r20
    311c:	48 f3       	brcs	.-46     	; 0x30f0 <LCDprogressBar+0x4c>
		
		// write character to display
		LCDsendChar(c);
	}

}
    311e:	0f 90       	pop	r0
    3120:	cf 91       	pop	r28
    3122:	df 91       	pop	r29
    3124:	1f 91       	pop	r17
    3126:	0f 91       	pop	r16
    3128:	ff 90       	pop	r15
    312a:	ef 90       	pop	r14
    312c:	df 90       	pop	r13
    312e:	cf 90       	pop	r12
    3130:	08 95       	ret

00003132 <__udivmodhi4>:
    3132:	aa 1b       	sub	r26, r26
    3134:	bb 1b       	sub	r27, r27
    3136:	51 e1       	ldi	r21, 0x11	; 17
    3138:	07 c0       	rjmp	.+14     	; 0x3148 <__udivmodhi4_ep>

0000313a <__udivmodhi4_loop>:
    313a:	aa 1f       	adc	r26, r26
    313c:	bb 1f       	adc	r27, r27
    313e:	a6 17       	cp	r26, r22
    3140:	b7 07       	cpc	r27, r23
    3142:	10 f0       	brcs	.+4      	; 0x3148 <__udivmodhi4_ep>
    3144:	a6 1b       	sub	r26, r22
    3146:	b7 0b       	sbc	r27, r23

00003148 <__udivmodhi4_ep>:
    3148:	88 1f       	adc	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	5a 95       	dec	r21
    314e:	a9 f7       	brne	.-22     	; 0x313a <__udivmodhi4_loop>
    3150:	80 95       	com	r24
    3152:	90 95       	com	r25
    3154:	bc 01       	movw	r22, r24
    3156:	cd 01       	movw	r24, r26
    3158:	08 95       	ret

0000315a <__divmodhi4>:
    315a:	97 fb       	bst	r25, 7
    315c:	09 2e       	mov	r0, r25
    315e:	07 26       	eor	r0, r23
    3160:	0a d0       	rcall	.+20     	; 0x3176 <__divmodhi4_neg1>
    3162:	77 fd       	sbrc	r23, 7
    3164:	04 d0       	rcall	.+8      	; 0x316e <__divmodhi4_neg2>
    3166:	e5 df       	rcall	.-54     	; 0x3132 <__udivmodhi4>
    3168:	06 d0       	rcall	.+12     	; 0x3176 <__divmodhi4_neg1>
    316a:	00 20       	and	r0, r0
    316c:	1a f4       	brpl	.+6      	; 0x3174 <__divmodhi4_exit>

0000316e <__divmodhi4_neg2>:
    316e:	70 95       	com	r23
    3170:	61 95       	neg	r22
    3172:	7f 4f       	sbci	r23, 0xFF	; 255

00003174 <__divmodhi4_exit>:
    3174:	08 95       	ret

00003176 <__divmodhi4_neg1>:
    3176:	f6 f7       	brtc	.-4      	; 0x3174 <__divmodhi4_exit>
    3178:	90 95       	com	r25
    317a:	81 95       	neg	r24
    317c:	9f 4f       	sbci	r25, 0xFF	; 255
    317e:	08 95       	ret

00003180 <snprintf>:
    3180:	ae e0       	ldi	r26, 0x0E	; 14
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	e6 ec       	ldi	r30, 0xC6	; 198
    3186:	f8 e1       	ldi	r31, 0x18	; 24
    3188:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <__prologue_saves__+0x1c>
    318c:	0d 89       	ldd	r16, Y+21	; 0x15
    318e:	1e 89       	ldd	r17, Y+22	; 0x16
    3190:	8f 89       	ldd	r24, Y+23	; 0x17
    3192:	98 8d       	ldd	r25, Y+24	; 0x18
    3194:	26 e0       	ldi	r18, 0x06	; 6
    3196:	2c 83       	std	Y+4, r18	; 0x04
    3198:	1a 83       	std	Y+2, r17	; 0x02
    319a:	09 83       	std	Y+1, r16	; 0x01
    319c:	97 ff       	sbrs	r25, 7
    319e:	02 c0       	rjmp	.+4      	; 0x31a4 <snprintf+0x24>
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	90 e8       	ldi	r25, 0x80	; 128
    31a4:	01 97       	sbiw	r24, 0x01	; 1
    31a6:	9e 83       	std	Y+6, r25	; 0x06
    31a8:	8d 83       	std	Y+5, r24	; 0x05
    31aa:	9e 01       	movw	r18, r28
    31ac:	25 5e       	subi	r18, 0xE5	; 229
    31ae:	3f 4f       	sbci	r19, 0xFF	; 255
    31b0:	ce 01       	movw	r24, r28
    31b2:	01 96       	adiw	r24, 0x01	; 1
    31b4:	69 8d       	ldd	r22, Y+25	; 0x19
    31b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31b8:	a9 01       	movw	r20, r18
    31ba:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <vfprintf>
    31be:	4d 81       	ldd	r20, Y+5	; 0x05
    31c0:	5e 81       	ldd	r21, Y+6	; 0x06
    31c2:	57 fd       	sbrc	r21, 7
    31c4:	0a c0       	rjmp	.+20     	; 0x31da <snprintf+0x5a>
    31c6:	2f 81       	ldd	r18, Y+7	; 0x07
    31c8:	38 85       	ldd	r19, Y+8	; 0x08
    31ca:	42 17       	cp	r20, r18
    31cc:	53 07       	cpc	r21, r19
    31ce:	0c f4       	brge	.+2      	; 0x31d2 <snprintf+0x52>
    31d0:	9a 01       	movw	r18, r20
    31d2:	02 0f       	add	r16, r18
    31d4:	13 1f       	adc	r17, r19
    31d6:	f8 01       	movw	r30, r16
    31d8:	10 82       	st	Z, r1
    31da:	2e 96       	adiw	r28, 0x0e	; 14
    31dc:	e4 e0       	ldi	r30, 0x04	; 4
    31de:	0c 94 c8 1b 	jmp	0x3790	; 0x3790 <__epilogue_restores__+0x1c>

000031e2 <vfprintf>:
    31e2:	ac e0       	ldi	r26, 0x0C	; 12
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	e7 ef       	ldi	r30, 0xF7	; 247
    31e8:	f8 e1       	ldi	r31, 0x18	; 24
    31ea:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__prologue_saves__>
    31ee:	6c 01       	movw	r12, r24
    31f0:	1b 01       	movw	r2, r22
    31f2:	8a 01       	movw	r16, r20
    31f4:	fc 01       	movw	r30, r24
    31f6:	17 82       	std	Z+7, r1	; 0x07
    31f8:	16 82       	std	Z+6, r1	; 0x06
    31fa:	83 81       	ldd	r24, Z+3	; 0x03
    31fc:	81 ff       	sbrs	r24, 1
    31fe:	d1 c1       	rjmp	.+930    	; 0x35a2 <vfprintf+0x3c0>
    3200:	2e 01       	movw	r4, r28
    3202:	08 94       	sec
    3204:	41 1c       	adc	r4, r1
    3206:	51 1c       	adc	r5, r1
    3208:	f6 01       	movw	r30, r12
    320a:	93 81       	ldd	r25, Z+3	; 0x03
    320c:	f1 01       	movw	r30, r2
    320e:	93 fd       	sbrc	r25, 3
    3210:	85 91       	lpm	r24, Z+
    3212:	93 ff       	sbrs	r25, 3
    3214:	81 91       	ld	r24, Z+
    3216:	1f 01       	movw	r2, r30
    3218:	88 23       	and	r24, r24
    321a:	09 f4       	brne	.+2      	; 0x321e <vfprintf+0x3c>
    321c:	be c1       	rjmp	.+892    	; 0x359a <vfprintf+0x3b8>
    321e:	85 32       	cpi	r24, 0x25	; 37
    3220:	39 f4       	brne	.+14     	; 0x3230 <vfprintf+0x4e>
    3222:	93 fd       	sbrc	r25, 3
    3224:	85 91       	lpm	r24, Z+
    3226:	93 ff       	sbrs	r25, 3
    3228:	81 91       	ld	r24, Z+
    322a:	1f 01       	movw	r2, r30
    322c:	85 32       	cpi	r24, 0x25	; 37
    322e:	29 f4       	brne	.+10     	; 0x323a <vfprintf+0x58>
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	b6 01       	movw	r22, r12
    3234:	0e 94 14 1b 	call	0x3628	; 0x3628 <fputc>
    3238:	e7 cf       	rjmp	.-50     	; 0x3208 <vfprintf+0x26>
    323a:	ee 24       	eor	r14, r14
    323c:	ff 24       	eor	r15, r15
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	20 32       	cpi	r18, 0x20	; 32
    3242:	b0 f4       	brcc	.+44     	; 0x3270 <vfprintf+0x8e>
    3244:	8b 32       	cpi	r24, 0x2B	; 43
    3246:	69 f0       	breq	.+26     	; 0x3262 <vfprintf+0x80>
    3248:	8c 32       	cpi	r24, 0x2C	; 44
    324a:	28 f4       	brcc	.+10     	; 0x3256 <vfprintf+0x74>
    324c:	80 32       	cpi	r24, 0x20	; 32
    324e:	51 f0       	breq	.+20     	; 0x3264 <vfprintf+0x82>
    3250:	83 32       	cpi	r24, 0x23	; 35
    3252:	71 f4       	brne	.+28     	; 0x3270 <vfprintf+0x8e>
    3254:	0b c0       	rjmp	.+22     	; 0x326c <vfprintf+0x8a>
    3256:	8d 32       	cpi	r24, 0x2D	; 45
    3258:	39 f0       	breq	.+14     	; 0x3268 <vfprintf+0x86>
    325a:	80 33       	cpi	r24, 0x30	; 48
    325c:	49 f4       	brne	.+18     	; 0x3270 <vfprintf+0x8e>
    325e:	21 60       	ori	r18, 0x01	; 1
    3260:	2c c0       	rjmp	.+88     	; 0x32ba <vfprintf+0xd8>
    3262:	22 60       	ori	r18, 0x02	; 2
    3264:	24 60       	ori	r18, 0x04	; 4
    3266:	29 c0       	rjmp	.+82     	; 0x32ba <vfprintf+0xd8>
    3268:	28 60       	ori	r18, 0x08	; 8
    326a:	27 c0       	rjmp	.+78     	; 0x32ba <vfprintf+0xd8>
    326c:	20 61       	ori	r18, 0x10	; 16
    326e:	25 c0       	rjmp	.+74     	; 0x32ba <vfprintf+0xd8>
    3270:	27 fd       	sbrc	r18, 7
    3272:	2c c0       	rjmp	.+88     	; 0x32cc <vfprintf+0xea>
    3274:	38 2f       	mov	r19, r24
    3276:	30 53       	subi	r19, 0x30	; 48
    3278:	3a 30       	cpi	r19, 0x0A	; 10
    327a:	98 f4       	brcc	.+38     	; 0x32a2 <vfprintf+0xc0>
    327c:	26 ff       	sbrs	r18, 6
    327e:	08 c0       	rjmp	.+16     	; 0x3290 <vfprintf+0xae>
    3280:	8e 2d       	mov	r24, r14
    3282:	88 0f       	add	r24, r24
    3284:	e8 2e       	mov	r14, r24
    3286:	ee 0c       	add	r14, r14
    3288:	ee 0c       	add	r14, r14
    328a:	e8 0e       	add	r14, r24
    328c:	e3 0e       	add	r14, r19
    328e:	15 c0       	rjmp	.+42     	; 0x32ba <vfprintf+0xd8>
    3290:	8f 2d       	mov	r24, r15
    3292:	88 0f       	add	r24, r24
    3294:	f8 2e       	mov	r15, r24
    3296:	ff 0c       	add	r15, r15
    3298:	ff 0c       	add	r15, r15
    329a:	f8 0e       	add	r15, r24
    329c:	f3 0e       	add	r15, r19
    329e:	20 62       	ori	r18, 0x20	; 32
    32a0:	0c c0       	rjmp	.+24     	; 0x32ba <vfprintf+0xd8>
    32a2:	8e 32       	cpi	r24, 0x2E	; 46
    32a4:	21 f4       	brne	.+8      	; 0x32ae <vfprintf+0xcc>
    32a6:	26 fd       	sbrc	r18, 6
    32a8:	78 c1       	rjmp	.+752    	; 0x359a <vfprintf+0x3b8>
    32aa:	20 64       	ori	r18, 0x40	; 64
    32ac:	06 c0       	rjmp	.+12     	; 0x32ba <vfprintf+0xd8>
    32ae:	8c 36       	cpi	r24, 0x6C	; 108
    32b0:	11 f4       	brne	.+4      	; 0x32b6 <vfprintf+0xd4>
    32b2:	20 68       	ori	r18, 0x80	; 128
    32b4:	02 c0       	rjmp	.+4      	; 0x32ba <vfprintf+0xd8>
    32b6:	88 36       	cpi	r24, 0x68	; 104
    32b8:	49 f4       	brne	.+18     	; 0x32cc <vfprintf+0xea>
    32ba:	f1 01       	movw	r30, r2
    32bc:	93 fd       	sbrc	r25, 3
    32be:	85 91       	lpm	r24, Z+
    32c0:	93 ff       	sbrs	r25, 3
    32c2:	81 91       	ld	r24, Z+
    32c4:	1f 01       	movw	r2, r30
    32c6:	88 23       	and	r24, r24
    32c8:	09 f0       	breq	.+2      	; 0x32cc <vfprintf+0xea>
    32ca:	ba cf       	rjmp	.-140    	; 0x3240 <vfprintf+0x5e>
    32cc:	98 2f       	mov	r25, r24
    32ce:	95 54       	subi	r25, 0x45	; 69
    32d0:	93 30       	cpi	r25, 0x03	; 3
    32d2:	18 f0       	brcs	.+6      	; 0x32da <vfprintf+0xf8>
    32d4:	90 52       	subi	r25, 0x20	; 32
    32d6:	93 30       	cpi	r25, 0x03	; 3
    32d8:	28 f4       	brcc	.+10     	; 0x32e4 <vfprintf+0x102>
    32da:	0c 5f       	subi	r16, 0xFC	; 252
    32dc:	1f 4f       	sbci	r17, 0xFF	; 255
    32de:	ff e3       	ldi	r31, 0x3F	; 63
    32e0:	f9 83       	std	Y+1, r31	; 0x01
    32e2:	0d c0       	rjmp	.+26     	; 0x32fe <vfprintf+0x11c>
    32e4:	83 36       	cpi	r24, 0x63	; 99
    32e6:	31 f0       	breq	.+12     	; 0x32f4 <vfprintf+0x112>
    32e8:	83 37       	cpi	r24, 0x73	; 115
    32ea:	71 f0       	breq	.+28     	; 0x3308 <vfprintf+0x126>
    32ec:	83 35       	cpi	r24, 0x53	; 83
    32ee:	09 f0       	breq	.+2      	; 0x32f2 <vfprintf+0x110>
    32f0:	60 c0       	rjmp	.+192    	; 0x33b2 <vfprintf+0x1d0>
    32f2:	22 c0       	rjmp	.+68     	; 0x3338 <vfprintf+0x156>
    32f4:	f8 01       	movw	r30, r16
    32f6:	80 81       	ld	r24, Z
    32f8:	89 83       	std	Y+1, r24	; 0x01
    32fa:	0e 5f       	subi	r16, 0xFE	; 254
    32fc:	1f 4f       	sbci	r17, 0xFF	; 255
    32fe:	42 01       	movw	r8, r4
    3300:	71 e0       	ldi	r23, 0x01	; 1
    3302:	a7 2e       	mov	r10, r23
    3304:	b1 2c       	mov	r11, r1
    3306:	16 c0       	rjmp	.+44     	; 0x3334 <vfprintf+0x152>
    3308:	62 e0       	ldi	r22, 0x02	; 2
    330a:	66 2e       	mov	r6, r22
    330c:	71 2c       	mov	r7, r1
    330e:	60 0e       	add	r6, r16
    3310:	71 1e       	adc	r7, r17
    3312:	f8 01       	movw	r30, r16
    3314:	80 80       	ld	r8, Z
    3316:	91 80       	ldd	r9, Z+1	; 0x01
    3318:	26 ff       	sbrs	r18, 6
    331a:	03 c0       	rjmp	.+6      	; 0x3322 <vfprintf+0x140>
    331c:	6e 2d       	mov	r22, r14
    331e:	70 e0       	ldi	r23, 0x00	; 0
    3320:	02 c0       	rjmp	.+4      	; 0x3326 <vfprintf+0x144>
    3322:	6f ef       	ldi	r22, 0xFF	; 255
    3324:	7f ef       	ldi	r23, 0xFF	; 255
    3326:	c4 01       	movw	r24, r8
    3328:	2c 87       	std	Y+12, r18	; 0x0c
    332a:	0e 94 09 1b 	call	0x3612	; 0x3612 <strnlen>
    332e:	5c 01       	movw	r10, r24
    3330:	83 01       	movw	r16, r6
    3332:	2c 85       	ldd	r18, Y+12	; 0x0c
    3334:	2f 77       	andi	r18, 0x7F	; 127
    3336:	17 c0       	rjmp	.+46     	; 0x3366 <vfprintf+0x184>
    3338:	52 e0       	ldi	r21, 0x02	; 2
    333a:	65 2e       	mov	r6, r21
    333c:	71 2c       	mov	r7, r1
    333e:	60 0e       	add	r6, r16
    3340:	71 1e       	adc	r7, r17
    3342:	f8 01       	movw	r30, r16
    3344:	80 80       	ld	r8, Z
    3346:	91 80       	ldd	r9, Z+1	; 0x01
    3348:	26 ff       	sbrs	r18, 6
    334a:	03 c0       	rjmp	.+6      	; 0x3352 <vfprintf+0x170>
    334c:	6e 2d       	mov	r22, r14
    334e:	70 e0       	ldi	r23, 0x00	; 0
    3350:	02 c0       	rjmp	.+4      	; 0x3356 <vfprintf+0x174>
    3352:	6f ef       	ldi	r22, 0xFF	; 255
    3354:	7f ef       	ldi	r23, 0xFF	; 255
    3356:	c4 01       	movw	r24, r8
    3358:	2c 87       	std	Y+12, r18	; 0x0c
    335a:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <strnlen_P>
    335e:	5c 01       	movw	r10, r24
    3360:	2c 85       	ldd	r18, Y+12	; 0x0c
    3362:	20 68       	ori	r18, 0x80	; 128
    3364:	83 01       	movw	r16, r6
    3366:	23 fd       	sbrc	r18, 3
    3368:	20 c0       	rjmp	.+64     	; 0x33aa <vfprintf+0x1c8>
    336a:	08 c0       	rjmp	.+16     	; 0x337c <vfprintf+0x19a>
    336c:	80 e2       	ldi	r24, 0x20	; 32
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	b6 01       	movw	r22, r12
    3372:	2c 87       	std	Y+12, r18	; 0x0c
    3374:	0e 94 14 1b 	call	0x3628	; 0x3628 <fputc>
    3378:	fa 94       	dec	r15
    337a:	2c 85       	ldd	r18, Y+12	; 0x0c
    337c:	8f 2d       	mov	r24, r15
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	a8 16       	cp	r10, r24
    3382:	b9 06       	cpc	r11, r25
    3384:	98 f3       	brcs	.-26     	; 0x336c <vfprintf+0x18a>
    3386:	11 c0       	rjmp	.+34     	; 0x33aa <vfprintf+0x1c8>
    3388:	f4 01       	movw	r30, r8
    338a:	27 fd       	sbrc	r18, 7
    338c:	85 91       	lpm	r24, Z+
    338e:	27 ff       	sbrs	r18, 7
    3390:	81 91       	ld	r24, Z+
    3392:	4f 01       	movw	r8, r30
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	b6 01       	movw	r22, r12
    3398:	2c 87       	std	Y+12, r18	; 0x0c
    339a:	0e 94 14 1b 	call	0x3628	; 0x3628 <fputc>
    339e:	2c 85       	ldd	r18, Y+12	; 0x0c
    33a0:	f1 10       	cpse	r15, r1
    33a2:	fa 94       	dec	r15
    33a4:	08 94       	sec
    33a6:	a1 08       	sbc	r10, r1
    33a8:	b1 08       	sbc	r11, r1
    33aa:	a1 14       	cp	r10, r1
    33ac:	b1 04       	cpc	r11, r1
    33ae:	61 f7       	brne	.-40     	; 0x3388 <vfprintf+0x1a6>
    33b0:	f1 c0       	rjmp	.+482    	; 0x3594 <vfprintf+0x3b2>
    33b2:	84 36       	cpi	r24, 0x64	; 100
    33b4:	11 f0       	breq	.+4      	; 0x33ba <vfprintf+0x1d8>
    33b6:	89 36       	cpi	r24, 0x69	; 105
    33b8:	49 f5       	brne	.+82     	; 0x340c <vfprintf+0x22a>
    33ba:	27 ff       	sbrs	r18, 7
    33bc:	08 c0       	rjmp	.+16     	; 0x33ce <vfprintf+0x1ec>
    33be:	f8 01       	movw	r30, r16
    33c0:	60 81       	ld	r22, Z
    33c2:	71 81       	ldd	r23, Z+1	; 0x01
    33c4:	82 81       	ldd	r24, Z+2	; 0x02
    33c6:	93 81       	ldd	r25, Z+3	; 0x03
    33c8:	0c 5f       	subi	r16, 0xFC	; 252
    33ca:	1f 4f       	sbci	r17, 0xFF	; 255
    33cc:	09 c0       	rjmp	.+18     	; 0x33e0 <vfprintf+0x1fe>
    33ce:	f8 01       	movw	r30, r16
    33d0:	60 81       	ld	r22, Z
    33d2:	71 81       	ldd	r23, Z+1	; 0x01
    33d4:	88 27       	eor	r24, r24
    33d6:	77 fd       	sbrc	r23, 7
    33d8:	80 95       	com	r24
    33da:	98 2f       	mov	r25, r24
    33dc:	0e 5f       	subi	r16, 0xFE	; 254
    33de:	1f 4f       	sbci	r17, 0xFF	; 255
    33e0:	4f e6       	ldi	r20, 0x6F	; 111
    33e2:	b4 2e       	mov	r11, r20
    33e4:	b2 22       	and	r11, r18
    33e6:	97 ff       	sbrs	r25, 7
    33e8:	09 c0       	rjmp	.+18     	; 0x33fc <vfprintf+0x21a>
    33ea:	90 95       	com	r25
    33ec:	80 95       	com	r24
    33ee:	70 95       	com	r23
    33f0:	61 95       	neg	r22
    33f2:	7f 4f       	sbci	r23, 0xFF	; 255
    33f4:	8f 4f       	sbci	r24, 0xFF	; 255
    33f6:	9f 4f       	sbci	r25, 0xFF	; 255
    33f8:	f0 e8       	ldi	r31, 0x80	; 128
    33fa:	bf 2a       	or	r11, r31
    33fc:	a2 01       	movw	r20, r4
    33fe:	2a e0       	ldi	r18, 0x0A	; 10
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	0e 94 40 1b 	call	0x3680	; 0x3680 <__ultoa_invert>
    3406:	78 2e       	mov	r7, r24
    3408:	74 18       	sub	r7, r4
    340a:	45 c0       	rjmp	.+138    	; 0x3496 <vfprintf+0x2b4>
    340c:	85 37       	cpi	r24, 0x75	; 117
    340e:	31 f4       	brne	.+12     	; 0x341c <vfprintf+0x23a>
    3410:	3f ee       	ldi	r19, 0xEF	; 239
    3412:	b3 2e       	mov	r11, r19
    3414:	b2 22       	and	r11, r18
    3416:	2a e0       	ldi	r18, 0x0A	; 10
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	25 c0       	rjmp	.+74     	; 0x3466 <vfprintf+0x284>
    341c:	99 ef       	ldi	r25, 0xF9	; 249
    341e:	b9 2e       	mov	r11, r25
    3420:	b2 22       	and	r11, r18
    3422:	8f 36       	cpi	r24, 0x6F	; 111
    3424:	c1 f0       	breq	.+48     	; 0x3456 <vfprintf+0x274>
    3426:	80 37       	cpi	r24, 0x70	; 112
    3428:	20 f4       	brcc	.+8      	; 0x3432 <vfprintf+0x250>
    342a:	88 35       	cpi	r24, 0x58	; 88
    342c:	09 f0       	breq	.+2      	; 0x3430 <vfprintf+0x24e>
    342e:	b5 c0       	rjmp	.+362    	; 0x359a <vfprintf+0x3b8>
    3430:	0d c0       	rjmp	.+26     	; 0x344c <vfprintf+0x26a>
    3432:	80 37       	cpi	r24, 0x70	; 112
    3434:	21 f0       	breq	.+8      	; 0x343e <vfprintf+0x25c>
    3436:	88 37       	cpi	r24, 0x78	; 120
    3438:	09 f0       	breq	.+2      	; 0x343c <vfprintf+0x25a>
    343a:	af c0       	rjmp	.+350    	; 0x359a <vfprintf+0x3b8>
    343c:	02 c0       	rjmp	.+4      	; 0x3442 <vfprintf+0x260>
    343e:	20 e1       	ldi	r18, 0x10	; 16
    3440:	b2 2a       	or	r11, r18
    3442:	b4 fe       	sbrs	r11, 4
    3444:	0b c0       	rjmp	.+22     	; 0x345c <vfprintf+0x27a>
    3446:	84 e0       	ldi	r24, 0x04	; 4
    3448:	b8 2a       	or	r11, r24
    344a:	08 c0       	rjmp	.+16     	; 0x345c <vfprintf+0x27a>
    344c:	b4 fe       	sbrs	r11, 4
    344e:	09 c0       	rjmp	.+18     	; 0x3462 <vfprintf+0x280>
    3450:	e6 e0       	ldi	r30, 0x06	; 6
    3452:	be 2a       	or	r11, r30
    3454:	06 c0       	rjmp	.+12     	; 0x3462 <vfprintf+0x280>
    3456:	28 e0       	ldi	r18, 0x08	; 8
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	05 c0       	rjmp	.+10     	; 0x3466 <vfprintf+0x284>
    345c:	20 e1       	ldi	r18, 0x10	; 16
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	02 c0       	rjmp	.+4      	; 0x3466 <vfprintf+0x284>
    3462:	20 e1       	ldi	r18, 0x10	; 16
    3464:	32 e0       	ldi	r19, 0x02	; 2
    3466:	b7 fe       	sbrs	r11, 7
    3468:	08 c0       	rjmp	.+16     	; 0x347a <vfprintf+0x298>
    346a:	f8 01       	movw	r30, r16
    346c:	60 81       	ld	r22, Z
    346e:	71 81       	ldd	r23, Z+1	; 0x01
    3470:	82 81       	ldd	r24, Z+2	; 0x02
    3472:	93 81       	ldd	r25, Z+3	; 0x03
    3474:	0c 5f       	subi	r16, 0xFC	; 252
    3476:	1f 4f       	sbci	r17, 0xFF	; 255
    3478:	07 c0       	rjmp	.+14     	; 0x3488 <vfprintf+0x2a6>
    347a:	f8 01       	movw	r30, r16
    347c:	60 81       	ld	r22, Z
    347e:	71 81       	ldd	r23, Z+1	; 0x01
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	0e 5f       	subi	r16, 0xFE	; 254
    3486:	1f 4f       	sbci	r17, 0xFF	; 255
    3488:	a2 01       	movw	r20, r4
    348a:	0e 94 40 1b 	call	0x3680	; 0x3680 <__ultoa_invert>
    348e:	78 2e       	mov	r7, r24
    3490:	74 18       	sub	r7, r4
    3492:	ff e7       	ldi	r31, 0x7F	; 127
    3494:	bf 22       	and	r11, r31
    3496:	b6 fe       	sbrs	r11, 6
    3498:	0b c0       	rjmp	.+22     	; 0x34b0 <vfprintf+0x2ce>
    349a:	2e ef       	ldi	r18, 0xFE	; 254
    349c:	b2 22       	and	r11, r18
    349e:	7e 14       	cp	r7, r14
    34a0:	38 f4       	brcc	.+14     	; 0x34b0 <vfprintf+0x2ce>
    34a2:	b4 fe       	sbrs	r11, 4
    34a4:	07 c0       	rjmp	.+14     	; 0x34b4 <vfprintf+0x2d2>
    34a6:	b2 fc       	sbrc	r11, 2
    34a8:	05 c0       	rjmp	.+10     	; 0x34b4 <vfprintf+0x2d2>
    34aa:	8f ee       	ldi	r24, 0xEF	; 239
    34ac:	b8 22       	and	r11, r24
    34ae:	02 c0       	rjmp	.+4      	; 0x34b4 <vfprintf+0x2d2>
    34b0:	a7 2c       	mov	r10, r7
    34b2:	01 c0       	rjmp	.+2      	; 0x34b6 <vfprintf+0x2d4>
    34b4:	ae 2c       	mov	r10, r14
    34b6:	8b 2d       	mov	r24, r11
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	b4 fe       	sbrs	r11, 4
    34bc:	0d c0       	rjmp	.+26     	; 0x34d8 <vfprintf+0x2f6>
    34be:	fe 01       	movw	r30, r28
    34c0:	e7 0d       	add	r30, r7
    34c2:	f1 1d       	adc	r31, r1
    34c4:	20 81       	ld	r18, Z
    34c6:	20 33       	cpi	r18, 0x30	; 48
    34c8:	19 f4       	brne	.+6      	; 0x34d0 <vfprintf+0x2ee>
    34ca:	e9 ee       	ldi	r30, 0xE9	; 233
    34cc:	be 22       	and	r11, r30
    34ce:	09 c0       	rjmp	.+18     	; 0x34e2 <vfprintf+0x300>
    34d0:	a3 94       	inc	r10
    34d2:	b2 fe       	sbrs	r11, 2
    34d4:	06 c0       	rjmp	.+12     	; 0x34e2 <vfprintf+0x300>
    34d6:	04 c0       	rjmp	.+8      	; 0x34e0 <vfprintf+0x2fe>
    34d8:	86 78       	andi	r24, 0x86	; 134
    34da:	90 70       	andi	r25, 0x00	; 0
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	09 f0       	breq	.+2      	; 0x34e2 <vfprintf+0x300>
    34e0:	a3 94       	inc	r10
    34e2:	8b 2c       	mov	r8, r11
    34e4:	99 24       	eor	r9, r9
    34e6:	b3 fc       	sbrc	r11, 3
    34e8:	14 c0       	rjmp	.+40     	; 0x3512 <vfprintf+0x330>
    34ea:	b0 fe       	sbrs	r11, 0
    34ec:	0f c0       	rjmp	.+30     	; 0x350c <vfprintf+0x32a>
    34ee:	af 14       	cp	r10, r15
    34f0:	28 f4       	brcc	.+10     	; 0x34fc <vfprintf+0x31a>
    34f2:	e7 2c       	mov	r14, r7
    34f4:	ef 0c       	add	r14, r15
    34f6:	ea 18       	sub	r14, r10
    34f8:	af 2c       	mov	r10, r15
    34fa:	08 c0       	rjmp	.+16     	; 0x350c <vfprintf+0x32a>
    34fc:	e7 2c       	mov	r14, r7
    34fe:	06 c0       	rjmp	.+12     	; 0x350c <vfprintf+0x32a>
    3500:	80 e2       	ldi	r24, 0x20	; 32
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	b6 01       	movw	r22, r12
    3506:	0e 94 14 1b 	call	0x3628	; 0x3628 <fputc>
    350a:	a3 94       	inc	r10
    350c:	af 14       	cp	r10, r15
    350e:	c0 f3       	brcs	.-16     	; 0x3500 <vfprintf+0x31e>
    3510:	04 c0       	rjmp	.+8      	; 0x351a <vfprintf+0x338>
    3512:	af 14       	cp	r10, r15
    3514:	10 f4       	brcc	.+4      	; 0x351a <vfprintf+0x338>
    3516:	fa 18       	sub	r15, r10
    3518:	01 c0       	rjmp	.+2      	; 0x351c <vfprintf+0x33a>
    351a:	ff 24       	eor	r15, r15
    351c:	84 fe       	sbrs	r8, 4
    351e:	0f c0       	rjmp	.+30     	; 0x353e <vfprintf+0x35c>
    3520:	80 e3       	ldi	r24, 0x30	; 48
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	b6 01       	movw	r22, r12
    3526:	0e 94 14 1b 	call	0x3628	; 0x3628 <fputc>
    352a:	82 fe       	sbrs	r8, 2
    352c:	1f c0       	rjmp	.+62     	; 0x356c <vfprintf+0x38a>
    352e:	81 fe       	sbrs	r8, 1
    3530:	03 c0       	rjmp	.+6      	; 0x3538 <vfprintf+0x356>
    3532:	88 e5       	ldi	r24, 0x58	; 88
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	10 c0       	rjmp	.+32     	; 0x3558 <vfprintf+0x376>
    3538:	88 e7       	ldi	r24, 0x78	; 120
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	0d c0       	rjmp	.+26     	; 0x3558 <vfprintf+0x376>
    353e:	c4 01       	movw	r24, r8
    3540:	86 78       	andi	r24, 0x86	; 134
    3542:	90 70       	andi	r25, 0x00	; 0
    3544:	00 97       	sbiw	r24, 0x00	; 0
    3546:	91 f0       	breq	.+36     	; 0x356c <vfprintf+0x38a>
    3548:	81 fc       	sbrc	r8, 1
    354a:	02 c0       	rjmp	.+4      	; 0x3550 <vfprintf+0x36e>
    354c:	80 e2       	ldi	r24, 0x20	; 32
    354e:	01 c0       	rjmp	.+2      	; 0x3552 <vfprintf+0x370>
    3550:	8b e2       	ldi	r24, 0x2B	; 43
    3552:	b7 fc       	sbrc	r11, 7
    3554:	8d e2       	ldi	r24, 0x2D	; 45
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	b6 01       	movw	r22, r12
    355a:	0e 94 14 1b 	call	0x3628	; 0x3628 <fputc>
    355e:	06 c0       	rjmp	.+12     	; 0x356c <vfprintf+0x38a>
    3560:	80 e3       	ldi	r24, 0x30	; 48
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	b6 01       	movw	r22, r12
    3566:	0e 94 14 1b 	call	0x3628	; 0x3628 <fputc>
    356a:	ea 94       	dec	r14
    356c:	7e 14       	cp	r7, r14
    356e:	c0 f3       	brcs	.-16     	; 0x3560 <vfprintf+0x37e>
    3570:	7a 94       	dec	r7
    3572:	f2 01       	movw	r30, r4
    3574:	e7 0d       	add	r30, r7
    3576:	f1 1d       	adc	r31, r1
    3578:	80 81       	ld	r24, Z
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	b6 01       	movw	r22, r12
    357e:	0e 94 14 1b 	call	0x3628	; 0x3628 <fputc>
    3582:	77 20       	and	r7, r7
    3584:	a9 f7       	brne	.-22     	; 0x3570 <vfprintf+0x38e>
    3586:	06 c0       	rjmp	.+12     	; 0x3594 <vfprintf+0x3b2>
    3588:	80 e2       	ldi	r24, 0x20	; 32
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	b6 01       	movw	r22, r12
    358e:	0e 94 14 1b 	call	0x3628	; 0x3628 <fputc>
    3592:	fa 94       	dec	r15
    3594:	ff 20       	and	r15, r15
    3596:	c1 f7       	brne	.-16     	; 0x3588 <vfprintf+0x3a6>
    3598:	37 ce       	rjmp	.-914    	; 0x3208 <vfprintf+0x26>
    359a:	f6 01       	movw	r30, r12
    359c:	26 81       	ldd	r18, Z+6	; 0x06
    359e:	37 81       	ldd	r19, Z+7	; 0x07
    35a0:	02 c0       	rjmp	.+4      	; 0x35a6 <vfprintf+0x3c4>
    35a2:	2f ef       	ldi	r18, 0xFF	; 255
    35a4:	3f ef       	ldi	r19, 0xFF	; 255
    35a6:	c9 01       	movw	r24, r18
    35a8:	2c 96       	adiw	r28, 0x0c	; 12
    35aa:	e2 e1       	ldi	r30, 0x12	; 18
    35ac:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__epilogue_restores__>

000035b0 <__eerd_byte_m32>:
    35b0:	e1 99       	sbic	0x1c, 1	; 28
    35b2:	fe cf       	rjmp	.-4      	; 0x35b0 <__eerd_byte_m32>
    35b4:	9f bb       	out	0x1f, r25	; 31
    35b6:	8e bb       	out	0x1e, r24	; 30
    35b8:	e0 9a       	sbi	0x1c, 0	; 28
    35ba:	99 27       	eor	r25, r25
    35bc:	8d b3       	in	r24, 0x1d	; 29
    35be:	08 95       	ret

000035c0 <__eeupd_byte_m32>:
    35c0:	26 2f       	mov	r18, r22

000035c2 <__eeupd_r18_m32>:
    35c2:	e1 99       	sbic	0x1c, 1	; 28
    35c4:	fe cf       	rjmp	.-4      	; 0x35c2 <__eeupd_r18_m32>
    35c6:	9f bb       	out	0x1f, r25	; 31
    35c8:	8e bb       	out	0x1e, r24	; 30
    35ca:	e0 9a       	sbi	0x1c, 0	; 28
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	0d b2       	in	r0, 0x1d	; 29
    35d0:	02 16       	cp	r0, r18
    35d2:	31 f0       	breq	.+12     	; 0x35e0 <__eeupd_r18_m32+0x1e>
    35d4:	2d bb       	out	0x1d, r18	; 29
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	e2 9a       	sbi	0x1c, 2	; 28
    35dc:	e1 9a       	sbi	0x1c, 1	; 28
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	08 95       	ret

000035e2 <__eewr_byte_m32>:
    35e2:	26 2f       	mov	r18, r22

000035e4 <__eewr_r18_m32>:
    35e4:	e1 99       	sbic	0x1c, 1	; 28
    35e6:	fe cf       	rjmp	.-4      	; 0x35e4 <__eewr_r18_m32>
    35e8:	9f bb       	out	0x1f, r25	; 31
    35ea:	8e bb       	out	0x1e, r24	; 30
    35ec:	2d bb       	out	0x1d, r18	; 29
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	f8 94       	cli
    35f2:	e2 9a       	sbi	0x1c, 2	; 28
    35f4:	e1 9a       	sbi	0x1c, 1	; 28
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	01 96       	adiw	r24, 0x01	; 1
    35fa:	08 95       	ret

000035fc <strnlen_P>:
    35fc:	fc 01       	movw	r30, r24
    35fe:	05 90       	lpm	r0, Z+
    3600:	61 50       	subi	r22, 0x01	; 1
    3602:	70 40       	sbci	r23, 0x00	; 0
    3604:	01 10       	cpse	r0, r1
    3606:	d8 f7       	brcc	.-10     	; 0x35fe <strnlen_P+0x2>
    3608:	80 95       	com	r24
    360a:	90 95       	com	r25
    360c:	8e 0f       	add	r24, r30
    360e:	9f 1f       	adc	r25, r31
    3610:	08 95       	ret

00003612 <strnlen>:
    3612:	fc 01       	movw	r30, r24
    3614:	61 50       	subi	r22, 0x01	; 1
    3616:	70 40       	sbci	r23, 0x00	; 0
    3618:	01 90       	ld	r0, Z+
    361a:	01 10       	cpse	r0, r1
    361c:	d8 f7       	brcc	.-10     	; 0x3614 <strnlen+0x2>
    361e:	80 95       	com	r24
    3620:	90 95       	com	r25
    3622:	8e 0f       	add	r24, r30
    3624:	9f 1f       	adc	r25, r31
    3626:	08 95       	ret

00003628 <fputc>:
    3628:	0f 93       	push	r16
    362a:	1f 93       	push	r17
    362c:	cf 93       	push	r28
    362e:	df 93       	push	r29
    3630:	8c 01       	movw	r16, r24
    3632:	eb 01       	movw	r28, r22
    3634:	8b 81       	ldd	r24, Y+3	; 0x03
    3636:	81 ff       	sbrs	r24, 1
    3638:	1b c0       	rjmp	.+54     	; 0x3670 <fputc+0x48>
    363a:	82 ff       	sbrs	r24, 2
    363c:	0d c0       	rjmp	.+26     	; 0x3658 <fputc+0x30>
    363e:	2e 81       	ldd	r18, Y+6	; 0x06
    3640:	3f 81       	ldd	r19, Y+7	; 0x07
    3642:	8c 81       	ldd	r24, Y+4	; 0x04
    3644:	9d 81       	ldd	r25, Y+5	; 0x05
    3646:	28 17       	cp	r18, r24
    3648:	39 07       	cpc	r19, r25
    364a:	64 f4       	brge	.+24     	; 0x3664 <fputc+0x3c>
    364c:	e8 81       	ld	r30, Y
    364e:	f9 81       	ldd	r31, Y+1	; 0x01
    3650:	01 93       	st	Z+, r16
    3652:	f9 83       	std	Y+1, r31	; 0x01
    3654:	e8 83       	st	Y, r30
    3656:	06 c0       	rjmp	.+12     	; 0x3664 <fputc+0x3c>
    3658:	e8 85       	ldd	r30, Y+8	; 0x08
    365a:	f9 85       	ldd	r31, Y+9	; 0x09
    365c:	80 2f       	mov	r24, r16
    365e:	09 95       	icall
    3660:	00 97       	sbiw	r24, 0x00	; 0
    3662:	31 f4       	brne	.+12     	; 0x3670 <fputc+0x48>
    3664:	8e 81       	ldd	r24, Y+6	; 0x06
    3666:	9f 81       	ldd	r25, Y+7	; 0x07
    3668:	01 96       	adiw	r24, 0x01	; 1
    366a:	9f 83       	std	Y+7, r25	; 0x07
    366c:	8e 83       	std	Y+6, r24	; 0x06
    366e:	02 c0       	rjmp	.+4      	; 0x3674 <fputc+0x4c>
    3670:	0f ef       	ldi	r16, 0xFF	; 255
    3672:	1f ef       	ldi	r17, 0xFF	; 255
    3674:	c8 01       	movw	r24, r16
    3676:	df 91       	pop	r29
    3678:	cf 91       	pop	r28
    367a:	1f 91       	pop	r17
    367c:	0f 91       	pop	r16
    367e:	08 95       	ret

00003680 <__ultoa_invert>:
    3680:	fa 01       	movw	r30, r20
    3682:	aa 27       	eor	r26, r26
    3684:	28 30       	cpi	r18, 0x08	; 8
    3686:	51 f1       	breq	.+84     	; 0x36dc <__ultoa_invert+0x5c>
    3688:	20 31       	cpi	r18, 0x10	; 16
    368a:	81 f1       	breq	.+96     	; 0x36ec <__ultoa_invert+0x6c>
    368c:	e8 94       	clt
    368e:	6f 93       	push	r22
    3690:	6e 7f       	andi	r22, 0xFE	; 254
    3692:	6e 5f       	subi	r22, 0xFE	; 254
    3694:	7f 4f       	sbci	r23, 0xFF	; 255
    3696:	8f 4f       	sbci	r24, 0xFF	; 255
    3698:	9f 4f       	sbci	r25, 0xFF	; 255
    369a:	af 4f       	sbci	r26, 0xFF	; 255
    369c:	b1 e0       	ldi	r27, 0x01	; 1
    369e:	3e d0       	rcall	.+124    	; 0x371c <__ultoa_invert+0x9c>
    36a0:	b4 e0       	ldi	r27, 0x04	; 4
    36a2:	3c d0       	rcall	.+120    	; 0x371c <__ultoa_invert+0x9c>
    36a4:	67 0f       	add	r22, r23
    36a6:	78 1f       	adc	r23, r24
    36a8:	89 1f       	adc	r24, r25
    36aa:	9a 1f       	adc	r25, r26
    36ac:	a1 1d       	adc	r26, r1
    36ae:	68 0f       	add	r22, r24
    36b0:	79 1f       	adc	r23, r25
    36b2:	8a 1f       	adc	r24, r26
    36b4:	91 1d       	adc	r25, r1
    36b6:	a1 1d       	adc	r26, r1
    36b8:	6a 0f       	add	r22, r26
    36ba:	71 1d       	adc	r23, r1
    36bc:	81 1d       	adc	r24, r1
    36be:	91 1d       	adc	r25, r1
    36c0:	a1 1d       	adc	r26, r1
    36c2:	20 d0       	rcall	.+64     	; 0x3704 <__ultoa_invert+0x84>
    36c4:	09 f4       	brne	.+2      	; 0x36c8 <__ultoa_invert+0x48>
    36c6:	68 94       	set
    36c8:	3f 91       	pop	r19
    36ca:	2a e0       	ldi	r18, 0x0A	; 10
    36cc:	26 9f       	mul	r18, r22
    36ce:	11 24       	eor	r1, r1
    36d0:	30 19       	sub	r19, r0
    36d2:	30 5d       	subi	r19, 0xD0	; 208
    36d4:	31 93       	st	Z+, r19
    36d6:	de f6       	brtc	.-74     	; 0x368e <__ultoa_invert+0xe>
    36d8:	cf 01       	movw	r24, r30
    36da:	08 95       	ret
    36dc:	46 2f       	mov	r20, r22
    36de:	47 70       	andi	r20, 0x07	; 7
    36e0:	40 5d       	subi	r20, 0xD0	; 208
    36e2:	41 93       	st	Z+, r20
    36e4:	b3 e0       	ldi	r27, 0x03	; 3
    36e6:	0f d0       	rcall	.+30     	; 0x3706 <__ultoa_invert+0x86>
    36e8:	c9 f7       	brne	.-14     	; 0x36dc <__ultoa_invert+0x5c>
    36ea:	f6 cf       	rjmp	.-20     	; 0x36d8 <__ultoa_invert+0x58>
    36ec:	46 2f       	mov	r20, r22
    36ee:	4f 70       	andi	r20, 0x0F	; 15
    36f0:	40 5d       	subi	r20, 0xD0	; 208
    36f2:	4a 33       	cpi	r20, 0x3A	; 58
    36f4:	18 f0       	brcs	.+6      	; 0x36fc <__ultoa_invert+0x7c>
    36f6:	49 5d       	subi	r20, 0xD9	; 217
    36f8:	31 fd       	sbrc	r19, 1
    36fa:	40 52       	subi	r20, 0x20	; 32
    36fc:	41 93       	st	Z+, r20
    36fe:	02 d0       	rcall	.+4      	; 0x3704 <__ultoa_invert+0x84>
    3700:	a9 f7       	brne	.-22     	; 0x36ec <__ultoa_invert+0x6c>
    3702:	ea cf       	rjmp	.-44     	; 0x36d8 <__ultoa_invert+0x58>
    3704:	b4 e0       	ldi	r27, 0x04	; 4
    3706:	a6 95       	lsr	r26
    3708:	97 95       	ror	r25
    370a:	87 95       	ror	r24
    370c:	77 95       	ror	r23
    370e:	67 95       	ror	r22
    3710:	ba 95       	dec	r27
    3712:	c9 f7       	brne	.-14     	; 0x3706 <__ultoa_invert+0x86>
    3714:	00 97       	sbiw	r24, 0x00	; 0
    3716:	61 05       	cpc	r22, r1
    3718:	71 05       	cpc	r23, r1
    371a:	08 95       	ret
    371c:	9b 01       	movw	r18, r22
    371e:	ac 01       	movw	r20, r24
    3720:	0a 2e       	mov	r0, r26
    3722:	06 94       	lsr	r0
    3724:	57 95       	ror	r21
    3726:	47 95       	ror	r20
    3728:	37 95       	ror	r19
    372a:	27 95       	ror	r18
    372c:	ba 95       	dec	r27
    372e:	c9 f7       	brne	.-14     	; 0x3722 <__ultoa_invert+0xa2>
    3730:	62 0f       	add	r22, r18
    3732:	73 1f       	adc	r23, r19
    3734:	84 1f       	adc	r24, r20
    3736:	95 1f       	adc	r25, r21
    3738:	a0 1d       	adc	r26, r0
    373a:	08 95       	ret

0000373c <__prologue_saves__>:
    373c:	2f 92       	push	r2
    373e:	3f 92       	push	r3
    3740:	4f 92       	push	r4
    3742:	5f 92       	push	r5
    3744:	6f 92       	push	r6
    3746:	7f 92       	push	r7
    3748:	8f 92       	push	r8
    374a:	9f 92       	push	r9
    374c:	af 92       	push	r10
    374e:	bf 92       	push	r11
    3750:	cf 92       	push	r12
    3752:	df 92       	push	r13
    3754:	ef 92       	push	r14
    3756:	ff 92       	push	r15
    3758:	0f 93       	push	r16
    375a:	1f 93       	push	r17
    375c:	cf 93       	push	r28
    375e:	df 93       	push	r29
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	ca 1b       	sub	r28, r26
    3766:	db 0b       	sbc	r29, r27
    3768:	0f b6       	in	r0, 0x3f	; 63
    376a:	f8 94       	cli
    376c:	de bf       	out	0x3e, r29	; 62
    376e:	0f be       	out	0x3f, r0	; 63
    3770:	cd bf       	out	0x3d, r28	; 61
    3772:	09 94       	ijmp

00003774 <__epilogue_restores__>:
    3774:	2a 88       	ldd	r2, Y+18	; 0x12
    3776:	39 88       	ldd	r3, Y+17	; 0x11
    3778:	48 88       	ldd	r4, Y+16	; 0x10
    377a:	5f 84       	ldd	r5, Y+15	; 0x0f
    377c:	6e 84       	ldd	r6, Y+14	; 0x0e
    377e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3780:	8c 84       	ldd	r8, Y+12	; 0x0c
    3782:	9b 84       	ldd	r9, Y+11	; 0x0b
    3784:	aa 84       	ldd	r10, Y+10	; 0x0a
    3786:	b9 84       	ldd	r11, Y+9	; 0x09
    3788:	c8 84       	ldd	r12, Y+8	; 0x08
    378a:	df 80       	ldd	r13, Y+7	; 0x07
    378c:	ee 80       	ldd	r14, Y+6	; 0x06
    378e:	fd 80       	ldd	r15, Y+5	; 0x05
    3790:	0c 81       	ldd	r16, Y+4	; 0x04
    3792:	1b 81       	ldd	r17, Y+3	; 0x03
    3794:	aa 81       	ldd	r26, Y+2	; 0x02
    3796:	b9 81       	ldd	r27, Y+1	; 0x01
    3798:	ce 0f       	add	r28, r30
    379a:	d1 1d       	adc	r29, r1
    379c:	0f b6       	in	r0, 0x3f	; 63
    379e:	f8 94       	cli
    37a0:	de bf       	out	0x3e, r29	; 62
    37a2:	0f be       	out	0x3f, r0	; 63
    37a4:	cd bf       	out	0x3d, r28	; 61
    37a6:	ed 01       	movw	r28, r26
    37a8:	08 95       	ret

000037aa <_exit>:
    37aa:	f8 94       	cli

000037ac <__stop_program>:
    37ac:	ff cf       	rjmp	.-2      	; 0x37ac <__stop_program>
